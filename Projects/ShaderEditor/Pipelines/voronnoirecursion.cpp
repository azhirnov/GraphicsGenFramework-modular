// This is generated file
// Origin file: 'ShaderEditor/Pipelines/VoronnoiRecursion.ppln'
#include "all_pipelines.h"
// C++ shader
#ifdef GRAPHICS_API_SOFT
namespace SWShaderLang {
namespace {

#	define INOUT
#	define IN
#	define OUT

	struct ShadertoyUB
	{
		Float4 iResolution;
		Float iTime;
		Float iTimeDelta;
		Int iFrame;
		Float _padding0;
		SArr<Float4,4> iChannelTime;
		SArr<Float4,4> iChannelResolution;
		Float4 iMouse;
		Float4 iDate;
		Float iSampleRate;
		Float _padding1;
		Float _padding2;
		Float _padding3;
		SArr<Float4,4> iCameraFrustum;
		Float4 iCameraPos;
	
		ShadertoyUB () {}
		ShadertoyUB (ShadertoyUB &&) = default;
		ShadertoyUB (const ShadertoyUB &) = default;
		explicit ShadertoyUB(const Float4 &iResolution, const Float &iTime, const Float &iTimeDelta, const Int &iFrame, const Float &_padding0, const SArr<Float4,4> &iChannelTime, const SArr<Float4,4> &iChannelResolution, const Float4 &iMouse, const Float4 &iDate, const Float &iSampleRate, const Float &_padding1, const Float &_padding2, const Float &_padding3, const SArr<Float4,4> &iCameraFrustum, const Float4 &iCameraPos) : iResolution{iResolution}, iTime{iTime}, iTimeDelta{iTimeDelta}, iFrame{iFrame}, _padding0{_padding0}, iChannelTime{iChannelTime}, iChannelResolution{iChannelResolution}, iMouse{iMouse}, iDate{iDate}, iSampleRate{iSampleRate}, _padding1{_padding1}, _padding2{_padding2}, _padding3{_padding3}, iCameraFrustum{iCameraFrustum}, iCameraPos{iCameraPos} {}
	
		ShadertoyUB& operator = (ShadertoyUB &&) = default;
		ShadertoyUB& operator = (const ShadertoyUB &) = default;
		Bool operator == (const ShadertoyUB &right) const {
			return	all( iResolution == right.iResolution ) &&
					all( iTime == right.iTime ) &&
					all( iTimeDelta == right.iTimeDelta ) &&
					all( iFrame == right.iFrame ) &&
					all( _padding0 == right._padding0 ) &&
					all( iChannelTime == right.iChannelTime ) &&
					all( iChannelResolution == right.iChannelResolution ) &&
					all( iMouse == right.iMouse ) &&
					all( iDate == right.iDate ) &&
					all( iSampleRate == right.iSampleRate ) &&
					all( _padding1 == right._padding1 ) &&
					all( _padding2 == right._padding2 ) &&
					all( _padding3 == right._padding3 ) &&
					all( iCameraFrustum == right.iCameraFrustum ) &&
					all( iCameraPos == right.iCameraPos );
		}
		Bool operator != (const ShadertoyUB &right) const { return !(*this == right); }
	
	};
	
	
	//---------------------------------
	
	static Float4 voronoi (IN Float2 x);
	static Float3 Rainbow (IN Float color, IN Float dist);
	static Float3 HSVtoRGB (IN Float3 hsv);
	static Float3 VoronoiFactal (IN Float2 coord, IN Float time);
	static void mainImage (OUT Float4 &fragColor, IN Float2 fragCoord);
	static Float Hash21 (IN Float2 p1);
	static Float2 Hash12 (IN Float f);
	static Float2 Hash22 (IN Float2 p);
	static Float Hash11 (IN Float a);
	
	//---------------------------------
	
	static void sw_voronnoirecursion_comp (const Impl::SWShaderHelper &_helper_)
	{
		// prepare externals
		Impl::Image2D< vec4, Impl::EStorageAccess::WriteOnly >  un_DstImage;    _helper_.GetImage( 0, un_DstImage );
		Impl::UniformBuffer< ShadertoyUB >  external_0;    _helper_.GetUniformBuffer( 1, external_0 );
		auto& gl_GlobalInvocationID = _helper_.GetComputeShaderState().inGlobalInvocationID;
	
		// shader
		{
			Float2 coord1 = (Float2(gl_GlobalInvocationID.xy) + Float(0.5f));
			;
			Float4 color1;
			
			// mainImage(vf4;vf2;
			Float2 xL_fragCoord = coord1;
			Bool xL_exit = Bool(false);
			do {
				
				// VoronoiFactal(vf2;f1;
				Float2 xD_coord = (xL_fragCoord.xy / external_0->iResolution.xx);
				Float xD_time = external_0->iTime;
				Float3 xD_return = Float3(0);
				Bool xD_exit = Bool(false);
				do {
					Float2 xD_uv = (xD_coord * Float(4.0f));
					;
					Float3 xD_color2 = Float3(0.0f);
					;
					Float xD_alpha = Float(0.0f);
					;
					Float xD_value = Float(0.0f);
					;
					for (Int h = Int(0); (!xD_exit && (h < Int(4))); ++(h))
					{
						
						// voronoi(vf2;
						Float2 xS_x = xD_uv;
						Float4 xS_return = Float4(0);
						Bool xS_exit = Bool(false);
						do {
							Float2 xS_n = glm::floor(xS_x);
							;
							Float2 xS_f1 = glm::fract(xS_x);
							;
							Float2 xS_mg = Float2(0.0f);
							;
							Float2 xS_mr = Float2(0.0f);
							;
							Float xS_md = Float(8.0f);
							;
							for (Int j = Int(-1); (!xS_exit && (j <= Int(1))); (j)++)
							{
								for (Int i = Int(-1); (!xS_exit && (i <= Int(1))); (i)++)
								{
									Float2 xS_g = Float2(Float(i), Float(j));
									;
									
									// Hash22(vf2;
									Float2 xI_p = (xS_n + xS_g);
									Float2 xI_return = Float2(0);
									Bool xI_exit = Bool(false);
									do {
										Float2 xI_q = Float2(dot(xI_p, Float2(127.09999847f, 311.70001221f)), dot(xI_p, Float2(269.5f, 183.30000305f)));
										;
										{
											xI_return = glm::fract((glm::sin(xI_q) * Float(43758.546875f)));
											xI_exit = true;
											break;
										};
									
									} while(false);
									// end Hash22(vf2;;
									Float2 xS_o = xI_return;
									;
									xS_o = (Float(0.5f) + (Float(0.5f) * glm::sin(((external_0->iTime * Float(0.5f)) + (Float(6.28310013f) * xS_o)))));
									Float2 xS_r = ((xS_g + xS_o) - xS_f1);
									;
									Float xS_d = dot(xS_r, xS_r);
									;
									if ((xS_d < xS_md))
									{
										xS_md = xS_d;
										xS_mr = xS_r;
										xS_mg = xS_g;
									;
									}
									;
								}
								if (xS_exit) break;
								;
							}
							if (xS_exit) break;
							;
							xS_md = Float(8.0f);
							for (Int t = Int(-2); (!xS_exit && (t <= Int(2))); (t)++)
							{
								for (Int c = Int(-2); (!xS_exit && (c <= Int(2))); (c)++)
								{
									Float2 xS_g1 = (xS_mg + Float2(Float(c), Float(t)));
									;
									
									// Hash22(vf2;
									Float2 xV_p = (xS_n + xS_g1);
									Float2 xV_return = Float2(0);
									Bool xV_exit = Bool(false);
									do {
										Float2 xV_q = Float2(dot(xV_p, Float2(127.09999847f, 311.70001221f)), dot(xV_p, Float2(269.5f, 183.30000305f)));
										;
										{
											xV_return = glm::fract((glm::sin(xV_q) * Float(43758.546875f)));
											xV_exit = true;
											break;
										};
									
									} while(false);
									// end Hash22(vf2;;
									Float2 xS_o1 = xV_return;
									;
									xS_o1 = (Float(0.5f) + (Float(0.5f) * glm::sin(((external_0->iTime * Float(0.5f)) + (Float(6.28310013f) * xS_o1)))));
									Float2 xS_r1 = ((xS_g1 + xS_o1) - xS_f1);
									;
									if ((dot((xS_mr - xS_r1), (xS_mr - xS_r1)) > Float(0.00001f)))
									{
										xS_md = glm::min(xS_md, dot((Float(0.5f) * (xS_mr + xS_r1)), normalize((xS_r1 - xS_mr))));
									;
									}
									;
								}
								if (xS_exit) break;
								;
							}
							if (xS_exit) break;
							;
							
							// Hash21(vf2;
							Float2 xR_p1 = (xS_mg + xS_n);
							Float xR_return = Float(0);
							Bool xR_exit = Bool(false);
							do {
								{
									xR_return = glm::fract((glm::sin((xR_p1.x + (xR_p1.y * Float(64.0f)))) * Float(104003.8984375f)));
									xR_exit = true;
									break;
								};
							
							} while(false);
							// end Hash21(vf2;;
							{
								xS_return = Float4((xS_x - ((xS_n + xS_mr) + xS_f1)), xS_md, xR_return);
								xS_exit = true;
								break;
							};
						
						} while(false);
						// end voronoi(vf2;;
						Float4 xD_v = xS_return;
						;
						
						// Hash12(f1;
						Float xR_xRE_f = xD_v.w;
						Float2 xR_xRE_return = Float2(0);
						Bool xR_xRE_exit = Bool(false);
						do {
							{
								xR_xRE_return = glm::fract((glm::cos(xR_xRE_f) * Float2(10003.57910156f, 37049.69921875f)));
								xR_xRE_exit = true;
								break;
							};
						
						} while(false);
						// end Hash12(f1;;
						xD_uv = ((((xD_v.xy * Float(0.5f)) + Float(0.5f)) * Float(6.0f)) + xR_xRE_return);
						Float xD_f2 = glm::pow((Float(0.01f) * Float((Int(4) - h))), Float(3.0f));
						;
						Float xD_a1 = (Float(1.0f) - smoothstep(Float(0.0f), (Float(0.08f) + xD_f2), xD_v.z));
						;
						
						// Hash11(f1;
						Float xC_a = ((Float((h + Int(1))) / Float(4.0f)) + (xD_value * Float(1.34099996f)));
						Float xC_return = Float(0);
						Bool xC_exit = Bool(false);
						do {
							
							// Hash21(vf2;
							Float2 xO_p1 = Float2(glm::fract((xC_a * Float(2.0f))), glm::fract((xC_a * Float(4.0f))));
							Float xO_return = Float(0);
							Bool xO_exit = Bool(false);
							do {
								{
									xO_return = glm::fract((glm::sin((xO_p1.x + (xO_p1.y * Float(64.0f)))) * Float(104003.8984375f)));
									xO_exit = true;
									break;
								};
							
							} while(false);
							// end Hash21(vf2;;
							{
								xC_return = xO_return;
								xC_exit = true;
								break;
							};
						
						} while(false);
						// end Hash11(f1;;
						
						// Rainbow(f1;f1;
						Float xA_color = xC_return;
						Float xA_dist = ( ((h > Int(1))) ? (Float(0.0f)) : (xD_a1) );
						Float3 xA_return = Float3(0);
						Bool xA_exit = Bool(false);
						do {
							xA_dist = glm::pow(xA_dist, Float(8.0f));
							
							// HSVtoRGB(vf3;
							Float3 xA_xAD_hsv = Float3(xA_color, Float(1.0f), Float(1.0f));
							Float3 xA_xAD_return = Float3(0);
							Bool xA_xAD_exit = Bool(false);
							do {
								Float3 xA_xAD_col = Float3((glm::abs(((xA_xAD_hsv.x * Float(6.0f)) - Float(3.0f))) - Float(1.0f)), (Float(2.0f) - glm::abs(((xA_xAD_hsv.x * Float(6.0f)) - Float(2.0f)))), (Float(2.0f) - glm::abs(((xA_xAD_hsv.x * Float(6.0f)) - Float(4.0f)))));
								;
								{
									xA_xAD_return = ((((glm::clamp(xA_xAD_col, Float3(0.0f), Float3(1.0f)) - Float(1.0f)) * xA_xAD_hsv.y) + Float(1.0f)) * xA_xAD_hsv.z);
									xA_xAD_exit = true;
									break;
								};
							
							} while(false);
							// end HSVtoRGB(vf3;;
							{
								xA_return = mix(Float3(1.0f), xA_xAD_return, (Float(1.0f) - xA_dist));
								xA_exit = true;
								break;
							};
						
						} while(false);
						// end Rainbow(f1;f1;;
						Float3 xD_c1 = xA_return;
						;
						xD_color2 = ((xD_color2 * xD_alpha) + (xD_c1 * xD_a1));
						xD_alpha = glm::max(xD_alpha, xD_a1);
						xD_value = xD_v.w;
					}
					if (xD_exit) break;
					;
					
					// Rainbow(f1;f1;
					Float xU_color = Float(0.06f);
					Float xU_dist = xD_alpha;
					Float3 xU_return = Float3(0);
					Bool xU_exit = Bool(false);
					do {
						xU_dist = glm::pow(xU_dist, Float(8.0f));
						
						// HSVtoRGB(vf3;
						Float3 xE_hsv = Float3(xU_color, Float(1.0f), Float(1.0f));
						Float3 xE_return = Float3(0);
						Bool xE_exit = Bool(false);
						do {
							Float3 xE_col = Float3((glm::abs(((xE_hsv.x * Float(6.0f)) - Float(3.0f))) - Float(1.0f)), (Float(2.0f) - glm::abs(((xE_hsv.x * Float(6.0f)) - Float(2.0f)))), (Float(2.0f) - glm::abs(((xE_hsv.x * Float(6.0f)) - Float(4.0f)))));
							;
							{
								xE_return = ((((glm::clamp(xE_col, Float3(0.0f), Float3(1.0f)) - Float(1.0f)) * xE_hsv.y) + Float(1.0f)) * xE_hsv.z);
								xE_exit = true;
								break;
							};
						
						} while(false);
						// end HSVtoRGB(vf3;;
						{
							xU_return = mix(Float3(1.0f), xE_return, (Float(1.0f) - xU_dist));
							xU_exit = true;
							break;
						};
					
					} while(false);
					// end Rainbow(f1;f1;;
					{
						xD_return = (Float3(xD_alpha) * xU_return);
						xD_exit = true;
						break;
					};
				
				} while(false);
				// end VoronoiFactal(vf2;f1;;
				Float3 xL_color3 = xD_return;
				;
				color1 = Float4(xL_color3, Float(1.0f));
			
			} while(false);
			// end mainImage(vf4;vf2;;
			 ;
			imageStore(un_DstImage, Int2(gl_GlobalInvocationID.xy), color1);
		}
	}
	
}		// anonymous namespace
}		// SWShaderLang
#endif	// GRAPHICS_API_SOFT


namespace Pipelines
{

void Create_voronnoirecursion (PipelineTemplateDescriptor& descr)
{
	descr = PipelineTemplateDescriptor();
	descr.supportedShaders = EShader::Compute;

	descr.localGroupSize = uint3(32, 32, 1);
	descr.layout = PipelineLayoutDescriptor::Builder()
			.AddImage( "un_DstImage", EImage::Tex2D, EPixelFormat::RGBA8_UNorm, EShaderMemoryModel::WriteOnly, 0u, 0u, EShader::Compute )
			.AddUniformBuffer( "", 288_b, 0u, 1u, EShader::Compute )
			.Finish();

	descr.Compute().StringGLSL( 
R"#(#version 450 core


#define SH_VERTEX           (1<<0)
#define SH_TESS_CONTROL     (1<<1)
#define SH_TESS_EVALUATION  (1<<2)
#define SH_GEOMETRY         (1<<3)
#define SH_FRAGMENT         (1<<4)
#define SH_COMPUTE          (1<<5)

#ifdef GL_ARB_gpu_shader_int64
#extension GL_ARB_gpu_shader_int64 : require
//#define ARB_gpu_shader_int64_enabled  1
#endif

// for vulkan compatibility
#ifdef GL_ARB_separate_shader_objects
#extension GL_ARB_separate_shader_objects : enable
#define ARB_separate_shader_objects_enabled  1
#endif

#define bool2		bvec2
#define bool3		bvec3
#define bool4		bvec4

#define int2		ivec2
#define int3		ivec3
#define int4		ivec4

#define uint2		uvec2
#define uint3		uvec3
#define uint4		uvec4

#ifdef ARB_gpu_shader_int64_enabled
# define ilong		int64_t
# define ilong2		i64vec2
# define ilong3		i64vec3
# define ilong4		i64vec4
# define ulong		uint64_t
# define ulong2		u64vec2
# define ulong3		u64vec3
# define ulong4		u64vec4
#endif // ARB_gpu_shader_int64_enabled

#define float2		vec2
#define float3		vec3
#define float4		vec4
			
#define float2x2	mat2x2
#define float2x3	mat2x3
#define float2x4	mat2x4
#define float3x2	mat3x2
#define float3x3	mat3x3
#define float3x4	mat3x4
#define float4x2	mat4x2
#define float4x3	mat4x3
#define float4x4	mat4x4

#define double2		dvec2
#define double3		dvec3
#define double4		dvec4
			
#define double2x2	dmat2x2
#define double2x3	dmat2x3
#define double2x4	dmat2x4
#define double3x2	dmat3x2
#define double3x3	dmat3x3
#define double3x4	dmat3x4
#define double4x2	dmat4x2
#define double4x3	dmat4x3
#define double4x4	dmat4x4

#ifdef VULKAN
#define PUSH_CONSTANT( _name_ )	layout (std140, push_constant) uniform _name_
#else
#define PUSH_CONSTANT( _name_ )	layout (std140) uniform pushConst_##_name_
#endif
		
#define SHADER	SH_COMPUTE


layout(binding=0) layout(rgba8) writeonly uniform image2D un_DstImage;

layout(binding=0) layout(std140) uniform ShadertoyUB {
	layout(offset=0, align=16) vec4  iResolution;
	layout(offset=16, align=4) float  iTime;
	layout(offset=20, align=4) float  iTimeDelta;
	layout(offset=24, align=4) int  iFrame;
	layout(offset=28, align=4) float  _padding0;
	layout(offset=32, align=16) vec4  iChannelTime[4];
	layout(offset=96, align=16) vec4  iChannelResolution[4];
	layout(offset=160, align=16) vec4  iMouse;
	layout(offset=176, align=16) vec4  iDate;
	layout(offset=192, align=4) float  iSampleRate;
	layout(offset=196, align=4) float  _padding1;
	layout(offset=200, align=4) float  _padding2;
	layout(offset=204, align=4) float  _padding3;
	layout(offset=208, align=16) vec4  iCameraFrustum[4];
	layout(offset=272, align=16) vec4  iCameraPos;

} ;


layout (local_size_x=32, local_size_y=32, local_size_z=1) in;

float Hash21 (in vec2 p1);
vec2 Hash12 (in float f);
vec2 Hash22 (in vec2 p);
float Hash11 (in float a);
vec4 voronoi (in vec2 x);
void mainImage (out vec4 fragColor, in vec2 fragCoord);
vec3 HSVtoRGB (in vec3 hsv);
vec3 Rainbow (in float color, in float dist);
vec3 VoronoiFactal (in vec2 coord, in float time);

//---------------------------------

void main ()
{
	vec2 coord1 = (vec2( gl_GlobalInvocationID.xy ) + float( 0.5f ));
	;
	vec4 color1;
	mainImage(color1, coord1);
	imageStore( un_DstImage, ivec2( gl_GlobalInvocationID.xy ), color1 );
}


vec2 Hash22 (in vec2 p)
{
	vec2 q = vec2( dot( p, vec2( 127.09999847f, 311.70001221f ) ), dot( p, vec2( 269.5f, 183.30000305f ) ) );
	;
	return fract( (sin( q ) * float( 43758.546875f )) );
}


float Hash21 (in vec2 p1)
{
	return fract( (sin( (p1.x + (p1.y * float( 64.0f ))) ) * float( 104003.8984375f )) );
}


vec2 Hash12 (in float f)
{
	return fract( (cos( f ) * vec2( 10003.57910156f, 37049.69921875f )) );
}


float Hash11 (in float a)
{
	return Hash21(vec2( fract( (a * float( 2.0f )) ), fract( (a * float( 4.0f )) ) ));
}


vec4 voronoi (in vec2 x)
{
	vec2 n = floor( x );
	;
	vec2 f1 = fract( x );
	;
	vec2 mg = vec2( 0.0f );
	;
	vec2 mr = vec2( 0.0f );
	;
	float md = float( 8.0f );
	;
	for (int j = int( -1 ); (j <= int( 1 )); ( j )++)
	{
		for (int i = int( -1 ); (i <= int( 1 )); ( i )++)
		{
			vec2 g = vec2( float( i ), float( j ) );
			;
			vec2 o = Hash22((n + g));
			;
			o = (float( 0.5f ) + (float( 0.5f ) * sin( ((iTime * float( 0.5f )) + (float( 6.28310013f ) * o)) )));
			vec2 r = ((g + o) - f1);
			;
			float d = dot( r, r );
			;
			if ((d < md))
			{
				md = d;
				mr = r;
				mg = g;
			;
			}
			;
		}
	}
	;
	md = float( 8.0f );
	for (int t = int( -2 ); (t <= int( 2 )); ( t )++)
	{
		for (int c = int( -2 ); (c <= int( 2 )); ( c )++)
		{
			vec2 g1 = (mg + vec2( float( c ), float( t ) ));
			;
			vec2 o1 = Hash22((n + g1));
			;
			o1 = (float( 0.5f ) + (float( 0.5f ) * sin( ((iTime * float( 0.5f )) + (float( 6.28310013f ) * o1)) )));
			vec2 r1 = ((g1 + o1) - f1);
			;
			if ((dot( (mr - r1), (mr - r1) ) > float( 0.00001f )))
			{
				md = min( md, dot( (float( 0.5f ) * (mr + r1)), normalize( (r1 - mr) ) ) );
			}
			;
		}
	}
	;
	return vec4( (x - ((n + mr) + f1)), md, Hash21((mg + n)) );
}


vec3 HSVtoRGB (in vec3 hsv)
{
	vec3 col = vec3( (abs( ((hsv.x * float( 6.0f )) - float( 3.0f )) ) - float( 1.0f )), (float( 2.0f ) - abs( ((hsv.x * float( 6.0f )) - float( 2.0f )) )), (float( 2.0f ) - abs( ((hsv.x * float( 6.0f )) - float( 4.0f )) )) );
	;
	return ((((clamp( col, vec3( 0.0f ), vec3( 1.0f ) ) - float( 1.0f )) * hsv.y) + float( 1.0f )) * hsv.z);
}


vec3 Rainbow (in float color, in float dist)
{
	dist = pow( dist, float( 8.0f ) );
	return mix( vec3( 1.0f ), HSVtoRGB(vec3( color, float( 1.0f ), float( 1.0f ) )), (float( 1.0f ) - dist) );
}


vec3 VoronoiFactal (in vec2 coord, in float time)
{
	vec2 uv = (coord * float( 4.0f ));
	;
	vec3 color2 = vec3( 0.0f );
	;
	float alpha = float( 0.0f );
	;
	float value = float( 0.0f );
	;
	for (int h = int( 0 ); (h < int( 4 )); ++( h ))
	{
		vec4 v = voronoi(uv);
		;
		uv = ((((v.xy * float( 0.5f )) + float( 0.5f )) * float( 6.0f )) + Hash12(v.w));
		float f2 = pow( (float( 0.01f ) * float( (int( 4 ) - h) )), float( 3.0f ) );
		;
		float a1 = (float( 1.0f ) - smoothstep( float( 0.0f ), (float( 0.08f ) + f2), v.z ));
		;
		vec3 c1 = Rainbow(Hash11(((float( (h + int( 1 )) ) / float( 4.0f )) + (value * float( 1.34099996f )))), ( ((h > int( 1 ))) ? (float( 0.0f )) : (a1) ));
		;
		color2 = ((color2 * alpha) + (c1 * a1));
		alpha = max( alpha, a1 );
		value = v.w;
	}
	;
	return (vec3( alpha ) * Rainbow(float( 0.06f ), alpha));
}


void mainImage (out vec4 fragColor, in vec2 fragCoord)
{
	vec3 color3 = VoronoiFactal((fragCoord.xy / iResolution.xx), iTime);
	;
	fragColor = vec4( color3, float( 1.0f ) );
}



)#"_str );
	descr.Compute().ArraySPIRV({ 
0x07230203, 0x00010000, 0x00080006, 0x000001DD, 0x00000000, 0x00020011, 0x00000001, 0x0006000B, 0x00000002, 0x4C534C47, 0x6474732E, 0x3035342E, 
0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0006000F, 0x00000005, 0x00000005, 0x6E69616D, 0x00000000, 0x0000003A, 0x00060010, 0x00000005, 
0x00000011, 0x00000020, 0x00000020, 0x00000001, 0x00030007, 0x00000001, 0x00000000, 0x002D0003, 0x00000002, 0x000001C2, 0x00000001, 0x4F202F2F, 
0x646F4D70, 0x50656C75, 0x65636F72, 0x64657373, 0x746E6520, 0x702D7972, 0x746E696F, 0x69616D20, 0x2F2F0A6E, 0x4D704F20, 0x6C75646F, 0x6F725065, 
0x73736563, 0x63206465, 0x6E65696C, 0x706F2074, 0x6C676E65, 0x0A303031, 0x4F202F2F, 0x646F4D70, 0x50656C75, 0x65636F72, 0x64657373, 0x72617420, 
0x2D746567, 0x20766E65, 0x6E65706F, 0x2F0A6C67, 0x704F202F, 0x75646F4D, 0x7250656C, 0x7365636F, 0x20646573, 0x72746E65, 0x6F702D79, 0x20746E69, 
0x6E69616D, 0x696C230A, 0x3120656E, 0x0000000A, 0x00070004, 0x415F4C47, 0x675F4252, 0x735F7570, 0x65646168, 0x6E695F72, 0x00343674, 0x00090004, 
0x415F4C47, 0x735F4252, 0x72617065, 0x5F657461, 0x64616873, 0x6F5F7265, 0x63656A62, 0x00007374, 0x00040005, 0x00000005, 0x6E69616D, 0x00000000, 
0x00050005, 0x0000000C, 0x68736148, 0x76283232, 0x003B3266, 0x00030005, 0x0000000B, 0x00000070, 0x00050005, 0x00000010, 0x68736148, 0x76283132, 
0x003B3266, 0x00030005, 0x0000000F, 0x00003170, 0x00050005, 0x00000015, 0x68736148, 0x66283231, 0x00003B31, 0x00030005, 0x00000014, 0x00000066, 
0x00050005, 0x00000019, 0x68736148, 0x66283131, 0x00003B31, 0x00030005, 0x00000018, 0x00000061, 0x00060005, 0x0000001E, 0x6F726F76, 0x28696F6E, 
0x3B326676, 0x00000000, 0x00030005, 0x0000001D, 0x00000078, 0x00060005, 0x00000024, 0x74565348, 0x4247526F, 0x33667628, 0x0000003B, 0x00030005, 
0x00000023, 0x00767368, 0x00060005, 0x00000029, 0x6E696152, 0x28776F62, 0x663B3166, 0x00003B31, 0x00040005, 0x00000027, 0x6F6C6F63, 0x00000072, 
0x00040005, 0x00000028, 0x74736964, 0x00000000, 0x00080005, 0x0000002E, 0x6F726F56, 0x46696F6E, 0x61746361, 0x6676286C, 0x31663B32, 0x0000003B, 
0x00040005, 0x0000002C, 0x726F6F63, 0x00000064, 0x00040005, 0x0000002D, 0x656D6974, 0x00000000, 0x00070005, 0x00000034, 0x6E69616D, 0x67616D49, 
0x66762865, 0x66763B34, 0x00003B32, 0x00050005, 0x00000032, 0x67617266, 0x6F6C6F43, 0x00000072, 0x00050005, 0x00000033, 0x67617266, 0x726F6F43, 
0x00000064, 0x00040005, 0x00000036, 0x726F6F63, 0x00003164, 0x00080005, 0x0000003A, 0x475F6C67, 0x61626F6C, 0x766E496C, 0x7461636F, 0x496E6F69, 
0x00000044, 0x00040005, 0x00000042, 0x6F6C6F63, 0x00003172, 0x00040005, 0x00000043, 0x61726170, 0x0000006D, 0x00040005, 0x00000044, 0x61726170, 
0x0000006D, 0x00050005, 0x0000004A, 0x445F6E75, 0x6D497473, 0x00656761, 0x00030005, 0x00000052, 0x00000071, 0x00040005, 0x00000086, 0x61726170, 
0x0000006D, 0x00030005, 0x0000008A, 0x0000006E, 0x00030005, 0x0000008D, 0x00003166, 0x00030005, 0x00000090, 0x0000676D, 0x00030005, 0x00000093, 
0x0000726D, 0x00030005, 0x00000094, 0x0000646D, 0x00030005, 0x00000097, 0x0000006A, 0x00030005, 0x000000A2, 0x00000069, 0x00030005, 0x000000AA, 
0x00000067, 0x00030005, 0x000000B0, 0x0000006F, 0x00040005, 0x000000B4, 0x61726170, 0x0000006D, 0x00050005, 0x000000BA, 0x64616853, 0x6F747265, 
0x00425579, 0x00060006, 0x000000BA, 0x00000000, 0x73655269, 0x74756C6F, 0x006E6F69, 0x00050006, 0x000000BA, 0x00000001, 0x6D695469, 0x00000065, 
0x00060006, 0x000000BA, 0x00000002, 0x6D695469, 0x6C654465, 0x00006174, 0x00050006, 0x000000BA, 0x00000003, 0x61724669, 0x0000656D, 0x00060006, 
0x000000BA, 0x00000004, 0x6461705F, 0x676E6964, 0x00000030, 0x00070006, 0x000000BA, 0x00000005, 0x61684369, 0x6C656E6E, 0x656D6954, 0x00000000, 
0x00080006, 0x000000BA, 0x00000006, 0x61684369, 0x6C656E6E, 0x6F736552, 0x6974756C, 0x00006E6F, 0x00050006, 0x000000BA, 0x00000007, 0x756F4D69, 
0x00006573, 0x00050006, 0x000000BA, 0x00000008, 0x74614469, 0x00000065, 0x00060006, 0x000000BA, 0x00000009, 0x6D615369, 0x52656C70, 0x00657461, 
0x00060006, 0x000000BA, 0x0000000A, 0x6461705F, 0x676E6964, 0x00000031, 0x00060006, 0x000000BA, 0x0000000B, 0x6461705F, 0x676E6964, 0x00000032, 
0x00060006, 0x000000BA, 0x0000000C, 0x6461705F, 0x676E6964, 0x00000033, 0x00070006, 0x000000BA, 0x0000000D, 0x6D614369, 0x46617265, 0x74737572, 
0x00006D75, 0x00060006, 0x000000BA, 0x0000000E, 0x6D614369, 0x50617265, 0x0000736F, 0x00030005, 0x000000BC, 0x00000000, 0x00030005, 0x000000CA, 
0x00000072, 0x00030005, 0x000000D0, 0x00000064, 0x00030005, 0x000000E0, 0x00000074, 0x00030005, 0x000000EA, 0x00000063, 0x00030005, 0x000000F2, 
0x00003167, 0x00030005, 0x000000FA, 0x0000316F, 0x00040005, 0x000000FE, 0x61726170, 0x0000006D, 0x00030005, 0x0000010B, 0x00003172, 0x00040005, 
0x00000136, 0x61726170, 0x0000006D, 0x00030005, 0x0000013D, 0x006C6F63, 0x00040005, 0x00000169, 0x61726170, 0x0000006D, 0x00030005, 0x00000171, 
0x00007675, 0x00040005, 0x00000174, 0x6F6C6F63, 0x00003272, 0x00040005, 0x00000175, 0x68706C61, 0x00000061, 0x00040005, 0x00000176, 0x756C6176, 
0x00000065, 0x00030005, 0x00000177, 0x00000068, 0x00030005, 0x00000181, 0x00000076, 0x00040005, 0x00000182, 0x61726170, 0x0000006D, 0x00040005, 
0x0000018B, 0x61726170, 0x0000006D, 0x00030005, 0x00000191, 0x00003266, 0x00030005, 0x00000198, 0x00003161, 0x00030005, 0x000001A0, 0x00003163, 
0x00040005, 0x000001A9, 0x61726170, 0x0000006D, 0x00040005, 0x000001AF, 0x61726170, 0x0000006D, 0x00040005, 0x000001B0, 0x61726170, 0x0000006D, 
0x00040005, 0x000001C3, 0x61726170, 0x0000006D, 0x00040005, 0x000001C4, 0x61726170, 0x0000006D, 0x00040005, 0x000001CA, 0x6F6C6F63, 0x00003372, 
0x00040005, 0x000001D1, 0x61726170, 0x0000006D, 0x00040005, 0x000001D2, 0x61726170, 0x0000006D, 0x00040047, 0x0000003A, 0x0000000B, 0x0000001C, 
0x00040047, 0x0000004A, 0x00000022, 0x00000000, 0x00040047, 0x0000004A, 0x00000021, 0x00000000, 0x00030047, 0x0000004A, 0x00000019, 0x00040047, 
0x000000B7, 0x00000006, 0x00000010, 0x00040047, 0x000000B8, 0x00000006, 0x00000010, 0x00040047, 0x000000B9, 0x00000006, 0x00000010, 0x00050048, 
0x000000BA, 0x00000000, 0x00000023, 0x00000000, 0x00050048, 0x000000BA, 0x00000001, 0x00000023, 0x00000010, 0x00050048, 0x000000BA, 0x00000002, 
0x00000023, 0x00000014, 0x00050048, 0x000000BA, 0x00000003, 0x00000023, 0x00000018, 0x00050048, 0x000000BA, 0x00000004, 0x00000023, 0x0000001C, 
0x00050048, 0x000000BA, 0x00000005, 0x00000023, 0x00000020, 0x00050048, 0x000000BA, 0x00000006, 0x00000023, 0x00000060, 0x00050048, 0x000000BA, 
0x00000007, 0x00000023, 0x000000A0, 0x00050048, 0x000000BA, 0x00000008, 0x00000023, 0x000000B0, 0x00050048, 0x000000BA, 0x00000009, 0x00000023, 
0x000000C0, 0x00050048, 0x000000BA, 0x0000000A, 0x00000023, 0x000000C4, 0x00050048, 0x000000BA, 0x0000000B, 0x00000023, 0x000000C8, 0x00050048, 
0x000000BA, 0x0000000C, 0x00000023, 0x000000CC, 0x00050048, 0x000000BA, 0x0000000D, 0x00000023, 0x000000D0, 0x00050048, 0x000000BA, 0x0000000E, 
0x00000023, 0x00000110, 0x00030047, 0x000000BA, 0x00000002, 0x00040047, 0x000000BC, 0x00000022, 0x00000000, 0x00040047, 0x000000BC, 0x00000021, 
0x00000001, 0x00040047, 0x000001DC, 0x0000000B, 0x00000019, 0x00020013, 0x00000003, 0x00030021, 0x00000004, 0x00000003, 0x00030016, 0x00000007, 
0x00000020, 0x00040017, 0x00000008, 0x00000007, 0x00000002, 0x00040020, 0x00000009, 0x00000007, 0x00000008, 0x00040021, 0x0000000A, 0x00000008, 
0x00000009, 0x00040021, 0x0000000E, 0x00000007, 0x00000009, 0x00040020, 0x00000012, 0x00000007, 0x00000007, 0x00040021, 0x00000013, 0x00000008, 
0x00000012, 0x00040021, 0x00000017, 0x00000007, 0x00000012, 0x00040017, 0x0000001B, 0x00000007, 0x00000004, 0x00040021, 0x0000001C, 0x0000001B, 
0x00000009, 0x00040017, 0x00000020, 0x00000007, 0x00000003, 0x00040020, 0x00000021, 0x00000007, 0x00000020, 0x00040021, 0x00000022, 0x00000020, 
0x00000021, 0x00050021, 0x00000026, 0x00000020, 0x00000012, 0x00000012, 0x00050021, 0x0000002B, 0x00000020, 0x00000009, 0x00000012, 0x00040020, 
0x00000030, 0x00000007, 0x0000001B, 0x00050021, 0x00000031, 0x00000003, 0x00000030, 0x00000009, 0x00040015, 0x00000037, 0x00000020, 0x00000000, 
0x00040017, 0x00000038, 0x00000037, 0x00000003, 0x00040020, 0x00000039, 0x00000001, 0x00000038, 0x0004003B, 0x00000039, 0x0000003A, 0x00000001, 
0x00040017, 0x0000003B, 0x00000037, 0x00000002, 0x0004002B, 0x00000007, 0x0000003F, 0x3F000000, 0x00090019, 0x00000048, 0x00000007, 0x00000001, 
0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x00000004, 0x00040020, 0x00000049, 0x00000000, 0x00000048, 0x0004003B, 0x00000049, 0x0000004A, 
0x00000000, 0x00040015, 0x0000004E, 0x00000020, 0x00000001, 0x00040017, 0x0000004F, 0x0000004E, 0x00000002, 0x0004002B, 0x00000007, 0x00000054, 
0x42FE3333, 0x0004002B, 0x00000007, 0x00000055, 0x439BD99A, 0x0005002C, 0x00000008, 0x00000056, 0x00000054, 0x00000055, 0x0004002B, 0x00000007, 
0x00000059, 0x4386C000, 0x0004002B, 0x00000007, 0x0000005A, 0x43374CCD, 0x0005002C, 0x00000008, 0x0000005B, 0x00000059, 0x0000005A, 0x0004002B, 
0x00000007, 0x00000060, 0x472AEE8C, 0x0004002B, 0x00000037, 0x00000065, 0x00000000, 0x0004002B, 0x00000037, 0x00000068, 0x00000001, 0x0004002B, 
0x00000007, 0x0000006B, 0x42800000, 0x0004002B, 0x00000007, 0x0000006F, 0x47CB21F3, 0x0004002B, 0x00000007, 0x00000076, 0x461C4E51, 0x0004002B, 
0x00000007, 0x00000077, 0x4710B9B3, 0x0005002C, 0x00000008, 0x00000078, 0x00000076, 0x00000077, 0x0004002B, 0x00000007, 0x0000007E, 0x40000000, 
0x0004002B, 0x00000007, 0x00000082, 0x40800000, 0x0004002B, 0x00000007, 0x00000091, 0x00000000, 0x0005002C, 0x00000008, 0x00000092, 0x00000091, 
0x00000091, 0x0004002B, 0x00000007, 0x00000095, 0x41000000, 0x00040020, 0x00000096, 0x00000007, 0x0000004E, 0x0004002B, 0x0000004E, 0x00000098, 
0xFFFFFFFF, 0x0004002B, 0x0000004E, 0x0000009F, 0x00000001, 0x00020014, 0x000000A0, 0x0004002B, 0x00000037, 0x000000B6, 0x00000004, 0x0004001C, 
0x000000B7, 0x0000001B, 0x000000B6, 0x0004001C, 0x000000B8, 0x0000001B, 0x000000B6, 0x0004001C, 0x000000B9, 0x0000001B, 0x000000B6, 0x0011001E, 
0x000000BA, 0x0000001B, 0x00000007, 0x00000007, 0x0000004E, 0x00000007, 0x000000B7, 0x000000B8, 0x0000001B, 0x0000001B, 0x00000007, 0x00000007, 
0x00000007, 0x00000007, 0x000000B9, 0x0000001B, 0x00040020, 0x000000BB, 0x00000002, 0x000000BA, 0x0004003B, 0x000000BB, 0x000000BC, 0x00000002, 
0x00040020, 0x000000BD, 0x00000002, 0x00000007, 0x0004002B, 0x00000007, 0x000000C1, 0x40C90F28, 0x0004002B, 0x0000004E, 0x000000E1, 0xFFFFFFFE, 
0x0004002B, 0x0000004E, 0x000000E8, 0x00000002, 0x0004002B, 0x00000007, 0x00000118, 0x3727C5AC, 0x0004002B, 0x00000007, 0x00000140, 0x40C00000, 
0x0004002B, 0x00000007, 0x00000142, 0x40400000, 0x0004002B, 0x00000007, 0x00000145, 0x3F800000, 0x0006002C, 0x00000020, 0x00000155, 0x00000091, 
0x00000091, 0x00000091, 0x0006002C, 0x00000020, 0x00000156, 0x00000145, 0x00000145, 0x00000145, 0x0004002B, 0x00000037, 0x0000015F, 0x00000002, 
0x0004002B, 0x0000004E, 0x00000178, 0x00000000, 0x0004002B, 0x0000004E, 0x0000017F, 0x00000004, 0x0004002B, 0x00000037, 0x0000018C, 0x00000003, 
0x0004002B, 0x00000007, 0x00000192, 0x3C23D70A, 0x0004002B, 0x00000007, 0x00000199, 0x3DA3D70A, 0x0004002B, 0x00000007, 0x000001A6, 0x3FABA5E3, 
0x0004002B, 0x00000007, 0x000001C2, 0x3D75C28F, 0x00040020, 0x000001CC, 0x00000002, 0x0000001B, 0x0004002B, 0x00000037, 0x000001DB, 0x00000020, 
0x0006002C, 0x00000038, 0x000001DC, 0x000001DB, 0x000001DB, 0x00000068, 0x00050036, 0x00000003, 0x00000005, 0x00000000, 0x00000004, 0x000200F8, 
0x00000006, 0x0004003B, 0x00000009, 0x00000036, 0x00000007, 0x0004003B, 0x00000030, 0x00000042, 0x00000007, 0x0004003B, 0x00000030, 0x00000043, 
0x00000007, 0x0004003B, 0x00000009, 0x00000044, 0x00000007, 0x00040008, 0x00000001, 0x00000078, 0x00000000, 0x0004003D, 0x00000038, 0x0000003C, 
0x0000003A, 0x0007004F, 0x0000003B, 0x0000003D, 0x0000003C, 0x0000003C, 0x00000000, 0x00000001, 0x00040070, 0x00000008, 0x0000003E, 0x0000003D, 
0x00050050, 0x00000008, 0x00000040, 0x0000003F, 0x0000003F, 0x00050081, 0x00000008, 0x00000041, 0x0000003E, 0x00000040, 0x0003003E, 0x00000036, 
0x00000041, 0x00040008, 0x00000001, 0x0000007B, 0x00000000, 0x0004003D, 0x00000008, 0x00000045, 0x00000036, 0x0003003E, 0x00000044, 0x00000045, 
0x00060039, 0x00000003, 0x00000046, 0x00000034, 0x00000043, 0x00000044, 0x0004003D, 0x0000001B, 0x00000047, 0x00000043, 0x0003003E, 0x00000042, 
0x00000047, 0x00040008, 0x00000001, 0x0000007C, 0x00000000, 0x0004003D, 0x00000048, 0x0000004B, 0x0000004A, 0x0004003D, 0x00000038, 0x0000004C, 
0x0000003A, 0x0007004F, 0x0000003B, 0x0000004D, 0x0000004C, 0x0000004C, 0x00000000, 0x00000001, 0x0004007C, 0x0000004F, 0x00000050, 0x0000004D, 
0x0004003D, 0x0000001B, 0x00000051, 0x00000042, 0x00040063, 0x0000004B, 0x00000050, 0x00000051, 0x000100FD, 0x00010038, 0x00050036, 0x00000008, 
0x0000000C, 0x00000000, 0x0000000A, 0x00030037, 0x00000009, 0x0000000B, 0x000200F8, 0x0000000D, 0x0004003B, 0x00000009, 0x00000052, 0x00000007, 
0x00040008, 0x00000001, 0x00000082, 0x00000000, 0x0004003D, 0x00000008, 0x00000053, 0x0000000B, 0x00050094, 0x00000007, 0x00000057, 0x00000053, 
0x00000056, 0x0004003D, 0x00000008, 0x00000058, 0x0000000B, 0x00050094, 0x00000007, 0x0000005C, 0x00000058, 0x0000005B, 0x00050050, 0x00000008, 
0x0000005D, 0x00000057, 0x0000005C, 0x0003003E, 0x00000052, 0x0000005D, 0x00040008, 0x00000001, 0x00000084, 0x00000000, 0x0004003D, 0x00000008, 
0x0000005E, 0x00000052, 0x0006000C, 0x00000008, 0x0000005F, 0x00000002, 0x0000000D, 0x0000005E, 0x0005008E, 0x00000008, 0x00000061, 0x0000005F, 
0x00000060, 0x0006000C, 0x00000008, 0x00000062, 0x00000002, 0x0000000A, 0x00000061, 0x000200FE, 0x00000062, 0x00010038, 0x00050036, 0x00000007, 
0x00000010, 0x00000000, 0x0000000E, 0x00030037, 0x00000009, 0x0000000F, 0x000200F8, 0x00000011, 0x00040008, 0x00000001, 0x0000008A, 0x00000000, 
0x00050041, 0x00000012, 0x00000066, 0x0000000F, 0x00000065, 0x0004003D, 0x00000007, 0x00000067, 0x00000066, 0x00050041, 0x00000012, 0x00000069, 
0x0000000F, 0x00000068, 0x0004003D, 0x00000007, 0x0000006A, 0x00000069, 0x00050085, 0x00000007, 0x0000006C, 0x0000006A, 0x0000006B, 0x00050081, 
0x00000007, 0x0000006D, 0x00000067, 0x0000006C, 0x0006000C, 0x00000007, 0x0000006E, 0x00000002, 0x0000000D, 0x0000006D, 0x00050085, 0x00000007, 
0x00000070, 0x0000006E, 0x0000006F, 0x0006000C, 0x00000007, 0x00000071, 0x00000002, 0x0000000A, 0x00000070, 0x000200FE, 0x00000071, 0x00010038, 
0x00050036, 0x00000008, 0x00000015, 0x00000000, 0x00000013, 0x00030037, 0x00000012, 0x00000014, 0x000200F8, 0x00000016, 0x00040008, 0x00000001, 
0x00000090, 0x00000000, 0x0004003D, 0x00000007, 0x00000074, 0x00000014, 0x0006000C, 0x00000007, 0x00000075, 0x00000002, 0x0000000E, 0x00000074, 
0x0005008E, 0x00000008, 0x00000079, 0x00000078, 0x00000075, 0x0006000C, 0x00000008, 0x0000007A, 0x00000002, 0x0000000A, 0x00000079, 0x000200FE, 
0x0000007A, 0x00010038, 0x00050036, 0x00000007, 0x00000019, 0x00000000, 0x00000017, 0x00030037, 0x00000012, 0x00000018, 0x000200F8, 0x0000001A, 
0x0004003B, 0x00000009, 0x00000086, 0x00000007, 0x00040008, 0x00000001, 0x00000096, 0x00000000, 0x0004003D, 0x00000007, 0x0000007D, 0x00000018, 
0x00050085, 0x00000007, 0x0000007F, 0x0000007D, 0x0000007E, 0x0006000C, 0x00000007, 0x00000080, 0x00000002, 0x0000000A, 0x0000007F, 0x0004003D, 
0x00000007, 0x00000081, 0x00000018, 0x00050085, 0x00000007, 0x00000083, 0x00000081, 0x00000082, 0x0006000C, 0x00000007, 0x00000084, 0x00000002, 
0x0000000A, 0x00000083, 0x00050050, 0x00000008, 0x00000085, 0x00000080, 0x00000084, 0x0003003E, 0x00000086, 0x00000085, 0x00050039, 0x00000007, 
0x00000087, 0x00000010, 0x00000086, 0x000200FE, 0x00000087, 0x00010038, 0x00050036, 0x0000001B, 0x0000001E, 0x00000000, 0x0000001C, 0x00030037, 
0x00000009, 0x0000001D, 0x000200F8, 0x0000001F, 0x0004003B, 0x00000009, 0x0000008A, 0x00000007, 0x0004003B, 0x00000009, 0x0000008D, 0x00000007, 
0x0004003B, 0x00000009, 0x00000090, 0x00000007, 0x0004003B, 0x00000009, 0x00000093, 0x00000007, 0x0004003B, 0x00000012, 0x00000094, 0x00000007, 
0x0004003B, 0x00000096, 0x00000097, 0x00000007, 0x0004003B, 0x00000096, 0x000000A2, 0x00000007, 0x0004003B, 0x00000009, 0x000000AA, 0x00000007, 
0x0004003B, 0x00000009, 0x000000B0, 0x00000007, 0x0004003B, 0x00000009, 0x000000B4, 0x00000007, 0x0004003B, 0x00000009, 0x000000CA, 0x00000007, 
0x0004003B, 0x00000012, 0x000000D0, 0x00000007, 0x0004003B, 0x00000096, 0x000000E0, 0x00000007, 0x0004003B, 0x00000096, 0x000000EA, 0x00000007, 
0x0004003B, 0x00000009, 0x000000F2, 0x00000007, 0x0004003B, 0x00000009, 0x000000FA, 0x00000007, 0x0004003B, 0x00000009, 0x000000FE, 0x00000007, 
0x0004003B, 0x00000009, 0x0000010B, 0x00000007, 0x0004003B, 0x00000009, 0x00000136, 0x00000007, 0x00040008, 0x00000001, 0x0000009C, 0x00000000, 
0x0004003D, 0x00000008, 0x0000008B, 0x0000001D, 0x0006000C, 0x00000008, 0x0000008C, 0x00000002, 0x00000008, 0x0000008B, 0x0003003E, 0x0000008A, 
0x0000008C, 0x00040008, 0x00000001, 0x0000009E, 0x00000000, 0x0004003D, 0x00000008, 0x0000008E, 0x0000001D, 0x0006000C, 0x00000008, 0x0000008F, 
0x00000002, 0x0000000A, 0x0000008E, 0x0003003E, 0x0000008D, 0x0000008F, 0x00040008, 0x00000001, 0x000000A0, 0x00000000, 0x0003003E, 0x00000090, 
0x00000092, 0x00040008, 0x00000001, 0x000000A2, 0x00000000, 0x0003003E, 0x00000093, 0x00000092, 0x00040008, 0x00000001, 0x000000A4, 0x00000000, 
0x0003003E, 0x00000094, 0x00000095, 0x00040008, 0x00000001, 0x000000A6, 0x00000000, 0x0003003E, 0x00000097, 0x00000098, 0x000200F9, 0x00000099, 
0x000200F8, 0x00000099, 0x000400F6, 0x0000009B, 0x0000009C, 0x00000000, 0x000200F9, 0x0000009D, 0x000200F8, 0x0000009D, 0x0004003D, 0x0000004E, 
0x0000009E, 0x00000097, 0x000500B3, 0x000000A0, 0x000000A1, 0x0000009E, 0x0000009F, 0x000400FA, 0x000000A1, 0x0000009A, 0x0000009B, 0x000200F8, 
0x0000009A, 0x00040008, 0x00000001, 0x000000A8, 0x00000000, 0x0003003E, 0x000000A2, 0x00000098, 0x000200F9, 0x000000A3, 0x000200F8, 0x000000A3, 
0x000400F6, 0x000000A5, 0x000000A6, 0x00000000, 0x000200F9, 0x000000A7, 0x000200F8, 0x000000A7, 0x0004003D, 0x0000004E, 0x000000A8, 0x000000A2, 
0x000500B3, 0x000000A0, 0x000000A9, 0x000000A8, 0x0000009F, 0x000400FA, 0x000000A9, 0x000000A4, 0x000000A5, 0x000200F8, 0x000000A4, 0x00040008, 
0x00000001, 0x000000AA, 0x00000000, 0x0004003D, 0x0000004E, 0x000000AB, 0x000000A2, 0x0004006F, 0x00000007, 0x000000AC, 0x000000AB, 0x0004003D, 
0x0000004E, 0x000000AD, 0x00000097, 0x0004006F, 0x00000007, 0x000000AE, 0x000000AD, 0x00050050, 0x00000008, 0x000000AF, 0x000000AC, 0x000000AE, 
0x0003003E, 0x000000AA, 0x000000AF, 0x00040008, 0x00000001, 0x000000AC, 0x00000000, 0x0004003D, 0x00000008, 0x000000B1, 0x0000008A, 0x0004003D, 
0x00000008, 0x000000B2, 0x000000AA, 0x00050081, 0x00000008, 0x000000B3, 0x000000B1, 0x000000B2, 0x0003003E, 0x000000B4, 0x000000B3, 0x00050039, 
0x00000008, 0x000000B5, 0x0000000C, 0x000000B4, 0x0003003E, 0x000000B0, 0x000000B5, 0x00040008, 0x00000001, 0x000000AE, 0x00000000, 0x00050041, 
0x000000BD, 0x000000BE, 0x000000BC, 0x0000009F, 0x0004003D, 0x00000007, 0x000000BF, 0x000000BE, 0x00050085, 0x00000007, 0x000000C0, 0x000000BF, 
0x0000003F, 0x0004003D, 0x00000008, 0x000000C2, 0x000000B0, 0x0005008E, 0x00000008, 0x000000C3, 0x000000C2, 0x000000C1, 0x00050050, 0x00000008, 
0x000000C4, 0x000000C0, 0x000000C0, 0x00050081, 0x00000008, 0x000000C5, 0x000000C4, 0x000000C3, 0x0006000C, 0x00000008, 0x000000C6, 0x00000002, 
0x0000000D, 0x000000C5, 0x0005008E, 0x00000008, 0x000000C7, 0x000000C6, 0x0000003F, 0x00050050, 0x00000008, 0x000000C8, 0x0000003F, 0x0000003F, 
0x00050081, 0x00000008, 0x000000C9, 0x000000C8, 0x000000C7, 0x0003003E, 0x000000B0, 0x000000C9, 0x00040008, 0x00000001, 0x000000AF, 0x00000000, 
0x0004003D, 0x00000008, 0x000000CB, 0x000000AA, 0x0004003D, 0x00000008, 0x000000CC, 0x000000B0, 0x00050081, 0x00000008, 0x000000CD, 0x000000CB, 
0x000000CC, 0x0004003D, 0x00000008, 0x000000CE, 0x0000008D, 0x00050083, 0x00000008, 0x000000CF, 0x000000CD, 0x000000CE, 0x0003003E, 0x000000CA, 
0x000000CF, 0x00040008, 0x00000001, 0x000000B1, 0x00000000, 0x0004003D, 0x00000008, 0x000000D1, 0x000000CA, 0x0004003D, 0x00000008, 0x000000D2, 
0x000000CA, 0x00050094, 0x00000007, 0x000000D3, 0x000000D1, 0x000000D2, 0x0003003E, 0x000000D0, 0x000000D3, 0x00040008, 0x00000001, 0x000000B3, 
0x00000000, 0x0004003D, 0x00000007, 0x000000D4, 0x000000D0, 0x0004003D, 0x00000007, 0x000000D5, 0x00000094, 0x000500B8, 0x000000A0, 0x000000D6, 
0x000000D4, 0x000000D5, 0x000300F7, 0x000000D8, 0x00000000, 0x000400FA, 0x000000D6, 0x000000D7, 0x000000D8, 0x000200F8, 0x000000D7, 0x00040008, 
0x00000001, 0x000000B5, 0x00000000, 0x0004003D, 0x00000007, 0x000000D9, 0x000000D0, 0x0003003E, 0x00000094, 0x000000D9, 0x00040008, 0x00000001, 
0x000000B6, 0x00000000, 0x0004003D, 0x00000008, 0x000000DA, 0x000000CA, 0x0003003E, 0x00000093, 0x000000DA, 0x00040008, 0x00000001, 0x000000B7, 
0x00000000, 0x0004003D, 0x00000008, 0x000000DB, 0x000000AA, 0x0003003E, 0x00000090, 0x000000DB, 0x000200F9, 0x000000D8, 0x000200F8, 0x000000D8, 
0x000200F9, 0x000000A6, 0x000200F8, 0x000000A6, 0x00040008, 0x00000001, 0x000000A8, 0x00000000, 0x0004003D, 0x0000004E, 0x000000DC, 0x000000A2, 
0x00050080, 0x0000004E, 0x000000DD, 0x000000DC, 0x0000009F, 0x0003003E, 0x000000A2, 0x000000DD, 0x000200F9, 0x000000A3, 0x000200F8, 0x000000A5, 
0x000200F9, 0x0000009C, 0x000200F8, 0x0000009C, 0x00040008, 0x00000001, 0x000000A6, 0x00000000, 0x0004003D, 0x0000004E, 0x000000DE, 0x00000097, 
0x00050080, 0x0000004E, 0x000000DF, 0x000000DE, 0x0000009F, 0x0003003E, 0x00000097, 0x000000DF, 0x000200F9, 0x00000099, 0x000200F8, 0x0000009B, 
0x00040008, 0x00000001, 0x000000BE, 0x00000000, 0x0003003E, 0x00000094, 0x00000095, 0x00040008, 0x00000001, 0x000000BF, 0x00000000, 0x0003003E, 
0x000000E0, 0x000000E1, 0x000200F9, 0x000000E2, 0x000200F8, 0x000000E2, 0x000400F6, 0x000000E4, 0x000000E5, 0x00000000, 0x000200F9, 0x000000E6, 
0x000200F8, 0x000000E6, 0x0004003D, 0x0000004E, 0x000000E7, 0x000000E0, 0x000500B3, 0x000000A0, 0x000000E9, 0x000000E7, 0x000000E8, 0x000400FA, 
0x000000E9, 0x000000E3, 0x000000E4, 0x000200F8, 0x000000E3, 0x00040008, 0x00000001, 0x000000C1, 0x00000000, 0x0003003E, 0x000000EA, 0x000000E1, 
0x000200F9, 0x000000EB, 0x000200F8, 0x000000EB, 0x000400F6, 0x000000ED, 0x000000EE, 0x00000000, 0x000200F9, 0x000000EF, 0x000200F8, 0x000000EF, 
0x0004003D, 0x0000004E, 0x000000F0, 0x000000EA, 0x000500B3, 0x000000A0, 0x000000F1, 0x000000F0, 0x000000E8, 0x000400FA, 0x000000F1, 0x000000EC, 
0x000000ED, 0x000200F8, 0x000000EC, 0x00040008, 0x00000001, 0x000000C3, 0x00000000, 0x0004003D, 0x00000008, 0x000000F3, 0x00000090, 0x0004003D, 
0x0000004E, 0x000000F4, 0x000000EA, 0x0004006F, 0x00000007, 0x000000F5, 0x000000F4, 0x0004003D, 0x0000004E, 0x000000F6, 0x000000E0, 0x0004006F, 
0x00000007, 0x000000F7, 0x000000F6, 0x00050050, 0x00000008, 0x000000F8, 0x000000F5, 0x000000F7, 0x00050081, 0x00000008, 0x000000F9, 0x000000F3, 
0x000000F8, 0x0003003E, 0x000000F2, 0x000000F9, 0x00040008, 0x00000001, 0x000000C5, 0x00000000, 0x0004003D, 0x00000008, 0x000000FB, 0x0000008A, 
0x0004003D, 0x00000008, 0x000000FC, 0x000000F2, 0x00050081, 0x00000008, 0x000000FD, 0x000000FB, 0x000000FC, 0x0003003E, 0x000000FE, 0x000000FD, 
0x00050039, 0x00000008, 0x000000FF, 0x0000000C, 0x000000FE, 0x0003003E, 0x000000FA, 0x000000FF, 0x00040008, 0x00000001, 0x000000C7, 0x00000000, 
0x00050041, 0x000000BD, 0x00000100, 0x000000BC, 0x0000009F, 0x0004003D, 0x00000007, 0x00000101, 0x00000100, 0x00050085, 0x00000007, 0x00000102, 
0x00000101, 0x0000003F, 0x0004003D, 0x00000008, 0x00000103, 0x000000FA, 0x0005008E, 0x00000008, 0x00000104, 0x00000103, 0x000000C1, 0x00050050, 
0x00000008, 0x00000105, 0x00000102, 0x00000102, 0x00050081, 0x00000008, 0x00000106, 0x00000105, 0x00000104, 0x0006000C, 0x00000008, 0x00000107, 
0x00000002, 0x0000000D, 0x00000106, 0x0005008E, 0x00000008, 0x00000108, 0x00000107, 0x0000003F, 0x00050050, 0x00000008, 0x00000109, 0x0000003F, 
0x0000003F, 0x00050081, 0x00000008, 0x0000010A, 0x00000109, 0x00000108, 0x0003003E, 0x000000FA, 0x0000010A, 0x00040008, 0x00000001, 0x000000C8, 
0x00000000, 0x0004003D, 0x00000008, 0x0000010C, 0x000000F2, 0x0004003D, 0x00000008, 0x0000010D, 0x000000FA, 0x00050081, 0x00000008, 0x0000010E, 
0x0000010C, 0x0000010D, 0x0004003D, 0x00000008, 0x0000010F, 0x0000008D, 0x00050083, 0x00000008, 0x00000110, 0x0000010E, 0x0000010F, 0x0003003E, 
0x0000010B, 0x00000110, 0x00040008, 0x00000001, 0x000000CA, 0x00000000, 0x0004003D, 0x00000008, 0x00000111, 0x00000093, 0x0004003D, 0x00000008, 
0x00000112, 0x0000010B, 0x00050083, 0x00000008, 0x00000113, 0x00000111, 0x00000112, 0x0004003D, 0x00000008, 0x00000114, 0x00000093, 0x0004003D, 
0x00000008, 0x00000115, 0x0000010B, 0x00050083, 0x00000008, 0x00000116, 0x00000114, 0x00000115, 0x00050094, 0x00000007, 0x00000117, 0x00000113, 
0x00000116, 0x000500BA, 0x000000A0, 0x00000119, 0x00000117, 0x00000118, 0x000300F7, 0x0000011B, 0x00000000, 0x000400FA, 0x00000119, 0x0000011A, 
0x0000011B, 0x000200F8, 0x0000011A, 0x00040008, 0x00000001, 0x000000CC, 0x00000000, 0x0004003D, 0x00000007, 0x0000011C, 0x00000094, 0x0004003D, 
0x00000008, 0x0000011D, 0x00000093, 0x0004003D, 0x00000008, 0x0000011E, 0x0000010B, 0x00050081, 0x00000008, 0x0000011F, 0x0000011D, 0x0000011E, 
0x0005008E, 0x00000008, 0x00000120, 0x0000011F, 0x0000003F, 0x0004003D, 0x00000008, 0x00000121, 0x0000010B, 0x0004003D, 0x00000008, 0x00000122, 
0x00000093, 0x00050083, 0x00000008, 0x00000123, 0x00000121, 0x00000122, 0x0006000C, 0x00000008, 0x00000124, 0x00000002, 0x00000045, 0x00000123, 
0x00050094, 0x00000007, 0x00000125, 0x00000120, 0x00000124, 0x0007000C, 0x00000007, 0x00000126, 0x00000002, 0x00000025, 0x0000011C, 0x00000125, 
0x0003003E, 0x00000094, 0x00000126, 0x000200F9, 0x0000011B, 0x000200F8, 0x0000011B, 0x000200F9, 0x000000EE, 0x000200F8, 0x000000EE, 0x00040008, 
0x00000001, 0x000000C1, 0x00000000, 0x0004003D, 0x0000004E, 0x00000127, 0x000000EA, 0x00050080, 0x0000004E, 0x00000128, 0x00000127, 0x0000009F, 
0x0003003E, 0x000000EA, 0x00000128, 0x000200F9, 0x000000EB, 0x000200F8, 0x000000ED, 0x000200F9, 0x000000E5, 0x000200F8, 0x000000E5, 0x00040008, 
0x00000001, 0x000000BF, 0x00000000, 0x0004003D, 0x0000004E, 0x00000129, 0x000000E0, 0x00050080, 0x0000004E, 0x0000012A, 0x00000129, 0x0000009F, 
0x0003003E, 0x000000E0, 0x0000012A, 0x000200F9, 0x000000E2, 0x000200F8, 0x000000E4, 0x00040008, 0x00000001, 0x000000D2, 0x00000000, 0x0004003D, 
0x00000008, 0x0000012B, 0x0000001D, 0x0004003D, 0x00000008, 0x0000012C, 0x0000008A, 0x0004003D, 0x00000008, 0x0000012D, 0x00000093, 0x00050081, 
0x00000008, 0x0000012E, 0x0000012C, 0x0000012D, 0x0004003D, 0x00000008, 0x0000012F, 0x0000008D, 0x00050081, 0x00000008, 0x00000130, 0x0000012E, 
0x0000012F, 0x00050083, 0x00000008, 0x00000131, 0x0000012B, 0x00000130, 0x0004003D, 0x00000007, 0x00000132, 0x00000094, 0x0004003D, 0x00000008, 
0x00000133, 0x00000090, 0x0004003D, 0x00000008, 0x00000134, 0x0000008A, 0x00050081, 0x00000008, 0x00000135, 0x00000133, 0x00000134, 0x0003003E, 
0x00000136, 0x00000135, 0x00050039, 0x00000007, 0x00000137, 0x00000010, 0x00000136, 0x00050051, 0x00000007, 0x00000138, 0x00000131, 0x00000000, 
0x00050051, 0x00000007, 0x00000139, 0x00000131, 0x00000001, 0x00070050, 0x0000001B, 0x0000013A, 0x00000138, 0x00000139, 0x00000132, 0x00000137, 
0x000200FE, 0x0000013A, 0x00010038, 0x00050036, 0x00000020, 0x00000024, 0x00000000, 0x00000022, 0x00030037, 0x00000021, 0x00000023, 0x000200F8, 
0x00000025, 0x0004003B, 0x00000021, 0x0000013D, 0x00000007, 0x00040008, 0x00000001, 0x000000D8, 0x00000000, 0x00050041, 0x00000012, 0x0000013E, 
0x00000023, 0x00000065, 0x0004003D, 0x00000007, 0x0000013F, 0x0000013E, 0x00050085, 0x00000007, 0x00000141, 0x0000013F, 0x00000140, 0x00050083, 
0x00000007, 0x00000143, 0x00000141, 0x00000142, 0x0006000C, 0x00000007, 0x00000144, 0x00000002, 0x00000004, 0x00000143, 0x00050083, 0x00000007, 
0x00000146, 0x00000144, 0x00000145, 0x00050041, 0x00000012, 0x00000147, 0x00000023, 0x00000065, 0x0004003D, 0x00000007, 0x00000148, 0x00000147, 
0x00050085, 0x00000007, 0x00000149, 0x00000148, 0x00000140, 0x00050083, 0x00000007, 0x0000014A, 0x00000149, 0x0000007E, 0x0006000C, 0x00000007, 
0x0000014B, 0x00000002, 0x00000004, 0x0000014A, 0x00050083, 0x00000007, 0x0000014C, 0x0000007E, 0x0000014B, 0x00050041, 0x00000012, 0x0000014D, 
0x00000023, 0x00000065, 0x0004003D, 0x00000007, 0x0000014E, 0x0000014D, 0x00050085, 0x00000007, 0x0000014F, 0x0000014E, 0x00000140, 0x00050083, 
0x00000007, 0x00000150, 0x0000014F, 0x00000082, 0x0006000C, 0x00000007, 0x00000151, 0x00000002, 0x00000004, 0x00000150, 0x00050083, 0x00000007, 
0x00000152, 0x0000007E, 0x00000151, 0x00060050, 0x00000020, 0x00000153, 0x00000146, 0x0000014C, 0x00000152, 0x0003003E, 0x0000013D, 0x00000153, 
0x00040008, 0x00000001, 0x000000DA, 0x00000000, 0x0004003D, 0x00000020, 0x00000154, 0x0000013D, 0x0008000C, 0x00000020, 0x00000157, 0x00000002, 
0x0000002B, 0x00000154, 0x00000155, 0x00000156, 0x00060050, 0x00000020, 0x00000158, 0x00000145, 0x00000145, 0x00000145, 0x00050083, 0x00000020, 
0x00000159, 0x00000157, 0x00000158, 0x00050041, 0x00000012, 0x0000015A, 0x00000023, 0x00000068, 0x0004003D, 0x00000007, 0x0000015B, 0x0000015A, 
0x0005008E, 0x00000020, 0x0000015C, 0x00000159, 0x0000015B, 0x00060050, 0x00000020, 0x0000015D, 0x00000145, 0x00000145, 0x00000145, 0x00050081, 
0x00000020, 0x0000015E, 0x0000015C, 0x0000015D, 0x00050041, 0x00000012, 0x00000160, 0x00000023, 0x0000015F, 0x0004003D, 0x00000007, 0x00000161, 
0x00000160, 0x0005008E, 0x00000020, 0x00000162, 0x0000015E, 0x00000161, 0x000200FE, 0x00000162, 0x00010038, 0x00050036, 0x00000020, 0x00000029, 
0x00000000, 0x00000026, 0x00030037, 0x00000012, 0x00000027, 0x00030037, 0x00000012, 0x00000028, 0x000200F8, 0x0000002A, 0x0004003B, 0x00000021, 
0x00000169, 0x00000007, 0x00040008, 0x00000001, 0x000000E0, 0x00000000, 0x0004003D, 0x00000007, 0x00000165, 0x00000028, 0x0007000C, 0x00000007, 
0x00000166, 0x00000002, 0x0000001A, 0x00000165, 0x00000095, 0x0003003E, 0x00000028, 0x00000166, 0x00040008, 0x00000001, 0x000000E1, 0x00000000, 
0x0004003D, 0x00000007, 0x00000167, 0x00000027, 0x00060050, 0x00000020, 0x00000168, 0x00000167, 0x00000145, 0x00000145, 0x0003003E, 0x00000169, 
0x00000168, 0x00050039, 0x00000020, 0x0000016A, 0x00000024, 0x00000169, 0x0004003D, 0x00000007, 0x0000016B, 0x00000028, 0x00050083, 0x00000007, 
0x0000016C, 0x00000145, 0x0000016B, 0x00060050, 0x00000020, 0x0000016D, 0x0000016C, 0x0000016C, 0x0000016C, 0x0008000C, 0x00000020, 0x0000016E, 
0x00000002, 0x0000002E, 0x00000156, 0x0000016A, 0x0000016D, 0x000200FE, 0x0000016E, 0x00010038, 0x00050036, 0x00000020, 0x0000002E, 0x00000000, 
0x0000002B, 0x00030037, 0x00000009, 0x0000002C, 0x00030037, 0x00000012, 0x0000002D, 0x000200F8, 0x0000002F, 0x0004003B, 0x00000009, 0x00000171, 
0x00000007, 0x0004003B, 0x00000021, 0x00000174, 0x00000007, 0x0004003B, 0x00000012, 0x00000175, 0x00000007, 0x0004003B, 0x00000012, 0x00000176, 
0x00000007, 0x0004003B, 0x00000096, 0x00000177, 0x00000007, 0x0004003B, 0x00000030, 0x00000181, 0x00000007, 0x0004003B, 0x00000009, 0x00000182, 
0x00000007, 0x0004003B, 0x00000012, 0x0000018B, 0x00000007, 0x0004003B, 0x00000012, 0x00000191, 0x00000007, 0x0004003B, 0x00000012, 0x00000198, 
0x00000007, 0x0004003B, 0x00000021, 0x000001A0, 0x00000007, 0x0004003B, 0x00000012, 0x000001A9, 0x00000007, 0x0004003B, 0x00000012, 0x000001AF, 
0x00000007, 0x0004003B, 0x00000012, 0x000001B0, 0x00000007, 0x0004003B, 0x00000012, 0x000001C3, 0x00000007, 0x0004003B, 0x00000012, 0x000001C4, 
0x00000007, 0x00040008, 0x00000001, 0x000000E7, 0x00000000, 0x0004003D, 0x00000008, 0x00000172, 0x0000002C, 0x0005008E, 0x00000008, 0x00000173, 
0x00000172, 0x00000082, 0x0003003E, 0x00000171, 0x00000173, 0x00040008, 0x00000001, 0x000000E9, 0x00000000, 0x0003003E, 0x00000174, 0x00000155, 
0x00040008, 0x00000001, 0x000000EB, 0x00000000, 0x0003003E, 0x00000175, 0x00000091, 0x00040008, 0x00000001, 0x000000ED, 0x00000000, 0x0003003E, 
0x00000176, 0x00000091, 0x00040008, 0x00000001, 0x000000EF, 0x00000000, 0x0003003E, 0x00000177, 0x00000178, 0x000200F9, 0x00000179, 0x000200F8, 
0x00000179, 0x000400F6, 0x0000017B, 0x0000017C, 0x00000000, 0x000200F9, 0x0000017D, 0x000200F8, 0x0000017D, 0x0004003D, 0x0000004E, 0x0000017E, 
0x00000177, 0x000500B1, 0x000000A0, 0x00000180, 0x0000017E, 0x0000017F, 0x000400FA, 0x00000180, 0x0000017A, 0x0000017B, 0x000200F8, 0x0000017A, 
0x00040008, 0x00000001, 0x000000F1, 0x00000000, 0x0004003D, 0x00000008, 0x00000183, 0x00000171, 0x0003003E, 0x00000182, 0x00000183, 0x00050039, 
0x0000001B, 0x00000184, 0x0000001E, 0x00000182, 0x0003003E, 0x00000181, 0x00000184, 0x00040008, 0x00000001, 0x000000F3, 0x00000000, 0x0004003D, 
0x0000001B, 0x00000185, 0x00000181, 0x0007004F, 0x00000008, 0x00000186, 0x00000185, 0x00000185, 0x00000000, 0x00000001, 0x0005008E, 0x00000008, 
0x00000187, 0x00000186, 0x0000003F, 0x00050050, 0x00000008, 0x00000188, 0x0000003F, 0x0000003F, 0x00050081, 0x00000008, 0x00000189, 0x00000187, 
0x00000188, 0x0005008E, 0x00000008, 0x0000018A, 0x00000189, 0x00000140, 0x00050041, 0x00000012, 0x0000018D, 0x00000181, 0x0000018C, 0x0004003D, 
0x00000007, 0x0000018E, 0x0000018D, 0x0003003E, 0x0000018B, 0x0000018E, 0x00050039, 0x00000008, 0x0000018F, 0x00000015, 0x0000018B, 0x00050081, 
0x00000008, 0x00000190, 0x0000018A, 0x0000018F, 0x0003003E, 0x00000171, 0x00000190, 0x00040008, 0x00000001, 0x000000F4, 0x00000000, 0x0004003D, 
0x0000004E, 0x00000193, 0x00000177, 0x00050082, 0x0000004E, 0x00000194, 0x0000017F, 0x00000193, 0x0004006F, 0x00000007, 0x00000195, 0x00000194, 
0x00050085, 0x00000007, 0x00000196, 0x00000192, 0x00000195, 0x0007000C, 0x00000007, 0x00000197, 0x00000002, 0x0000001A, 0x00000196, 0x00000142, 
0x0003003E, 0x00000191, 0x00000197, 0x00040008, 0x00000001, 0x000000F6, 0x00000000, 0x0004003D, 0x00000007, 0x0000019A, 0x00000191, 0x00050081, 
0x00000007, 0x0000019B, 0x00000199, 0x0000019A, 0x00050041, 0x00000012, 0x0000019C, 0x00000181, 0x0000015F, 0x0004003D, 0x00000007, 0x0000019D, 
0x0000019C, 0x0008000C, 0x00000007, 0x0000019E, 0x00000002, 0x00000031, 0x00000091, 0x0000019B, 0x0000019D, 0x00050083, 0x00000007, 0x0000019F, 
0x00000145, 0x0000019E, 0x0003003E, 0x00000198, 0x0000019F, 0x00040008, 0x00000001, 0x000000F8, 0x00000000, 0x0004003D, 0x0000004E, 0x000001A1, 
0x00000177, 0x00050080, 0x0000004E, 0x000001A2, 0x000001A1, 0x0000009F, 0x0004006F, 0x00000007, 0x000001A3, 0x000001A2, 0x00050088, 0x00000007, 
0x000001A4, 0x000001A3, 0x00000082, 0x0004003D, 0x00000007, 0x000001A5, 0x00000176, 0x00050085, 0x00000007, 0x000001A7, 0x000001A5, 0x000001A6, 
0x00050081, 0x00000007, 0x000001A8, 0x000001A4, 0x000001A7, 0x0003003E, 0x000001A9, 0x000001A8, 0x00050039, 0x00000007, 0x000001AA, 0x00000019, 
0x000001A9, 0x0004003D, 0x0000004E, 0x000001AB, 0x00000177, 0x000500AD, 0x000000A0, 0x000001AC, 0x000001AB, 0x0000009F, 0x0004003D, 0x00000007, 
0x000001AD, 0x00000198, 0x000600A9, 0x00000007, 0x000001AE, 0x000001AC, 0x00000091, 0x000001AD, 0x0003003E, 0x000001AF, 0x000001AA, 0x0003003E, 
0x000001B0, 0x000001AE, 0x00060039, 0x00000020, 0x000001B1, 0x00000029, 0x000001AF, 0x000001B0, 0x0003003E, 0x000001A0, 0x000001B1, 0x00040008, 
0x00000001, 0x000000FA, 0x00000000, 0x0004003D, 0x00000020, 0x000001B2, 0x00000174, 0x0004003D, 0x00000007, 0x000001B3, 0x00000175, 0x0005008E, 
0x00000020, 0x000001B4, 0x000001B2, 0x000001B3, 0x0004003D, 0x00000020, 0x000001B5, 0x000001A0, 0x0004003D, 0x00000007, 0x000001B6, 0x00000198, 
0x0005008E, 0x00000020, 0x000001B7, 0x000001B5, 0x000001B6, 0x00050081, 0x00000020, 0x000001B8, 0x000001B4, 0x000001B7, 0x0003003E, 0x00000174, 
0x000001B8, 0x00040008, 0x00000001, 0x000000FB, 0x00000000, 0x0004003D, 0x00000007, 0x000001B9, 0x00000175, 0x0004003D, 0x00000007, 0x000001BA, 
0x00000198, 0x0007000C, 0x00000007, 0x000001BB, 0x00000002, 0x00000028, 0x000001B9, 0x000001BA, 0x0003003E, 0x00000175, 0x000001BB, 0x00040008, 
0x00000001, 0x000000FC, 0x00000000, 0x00050041, 0x00000012, 0x000001BC, 0x00000181, 0x0000018C, 0x0004003D, 0x00000007, 0x000001BD, 0x000001BC, 
0x0003003E, 0x00000176, 0x000001BD, 0x000200F9, 0x0000017C, 0x000200F8, 0x0000017C, 0x00040008, 0x00000001, 0x000000EF, 0x00000000, 0x0004003D, 
0x0000004E, 0x000001BE, 0x00000177, 0x00050080, 0x0000004E, 0x000001BF, 0x000001BE, 0x0000009F, 0x0003003E, 0x00000177, 0x000001BF, 0x000200F9, 
0x00000179, 0x000200F8, 0x0000017B, 0x00040008, 0x00000001, 0x000000FF, 0x00000000, 0x0004003D, 0x00000007, 0x000001C0, 0x00000175, 0x00060050, 
0x00000020, 0x000001C1, 0x000001C0, 0x000001C0, 0x000001C0, 0x0003003E, 0x000001C3, 0x000001C2, 0x0004003D, 0x00000007, 0x000001C5, 0x00000175, 
0x0003003E, 0x000001C4, 0x000001C5, 0x00060039, 0x00000020, 0x000001C6, 0x00000029, 0x000001C3, 0x000001C4, 0x00050085, 0x00000020, 0x000001C7, 
0x000001C1, 0x000001C6, 0x000200FE, 0x000001C7, 0x00010038, 0x00050036, 0x00000003, 0x00000034, 0x00000000, 0x00000031, 0x00030037, 0x00000030, 
0x00000032, 0x00030037, 0x00000009, 0x00000033, 0x000200F8, 0x00000035, 0x0004003B, 0x00000021, 0x000001CA, 0x00000007, 0x0004003B, 0x00000009, 
0x000001D1, 0x00000007, 0x0004003B, 0x00000012, 0x000001D2, 0x00000007, 0x00040008, 0x00000001, 0x00000105, 0x00000000, 0x0004003D, 0x00000008, 
0x000001CB, 0x00000033, 0x00050041, 0x000001CC, 0x000001CD, 0x000000BC, 0x00000178, 0x0004003D, 0x0000001B, 0x000001CE, 0x000001CD, 0x0007004F, 
0x00000008, 0x000001CF, 0x000001CE, 0x000001CE, 0x00000000, 0x00000000, 0x00050088, 0x00000008, 0x000001D0, 0x000001CB, 0x000001CF, 0x0003003E, 
0x000001D1, 0x000001D0, 0x00050041, 0x000000BD, 0x000001D3, 0x000000BC, 0x0000009F, 0x0004003D, 0x00000007, 0x000001D4, 0x000001D3, 0x0003003E, 
0x000001D2, 0x000001D4, 0x00060039, 0x00000020, 0x000001D5, 0x0000002E, 0x000001D1, 0x000001D2, 0x0003003E, 0x000001CA, 0x000001D5, 0x00040008, 
0x00000001, 0x00000107, 0x00000000, 0x0004003D, 0x00000020, 0x000001D6, 0x000001CA, 0x00050051, 0x00000007, 0x000001D7, 0x000001D6, 0x00000000, 
0x00050051, 0x00000007, 0x000001D8, 0x000001D6, 0x00000001, 0x00050051, 0x00000007, 0x000001D9, 0x000001D6, 0x00000002, 0x00070050, 0x0000001B, 
0x000001DA, 0x000001D7, 0x000001D8, 0x000001D9, 0x00000145, 0x0003003E, 0x00000032, 0x000001DA, 0x000100FD, 0x00010038 });
#ifdef GRAPHICS_API_SOFT
	descr.Compute().FuncSW( &SWShaderLang::sw_voronnoirecursion_comp );
#endif

};
}	// Pipelines
