// This is generated file
// Origin file: 'Base\Pipelines/Default2.ppln'
#include "all_pipelines.h"

namespace Pipelines
{

void Create_default2 (PipelineTemplateDescription& descr)
{
	descr = PipelineTemplateDescription();
	// RenderState
	descr.renderState = RenderState();
	// InputAssemblyState
	descr.renderState.inputAssembly.topology         = EPrimitive::TriangleList;
	descr.renderState.inputAssembly.primitiveRestart = false;

	descr.dynamicStates = EPipelineDynamicState::Viewport | EPipelineDynamicState::Scissor;
	descr.supportedShaders = EShader::Vertex | EShader::Fragment;
	descr.supportedPrimitives = EPrimitive::TriangleList;

	descr.layout = PipelineLayoutDescription::Builder()
			.AddTexture( "un_ColorTexture", EImage::Tex2D, EPixelFormatClass::AnyColorChannels | EPixelFormatClass::LinearColorSpace | EPixelFormatClass::AnyFloat | EPixelFormatClass::AnyNorm, 0u, 0u, EShader::Fragment )
			.AddUniformBuffer( "ub", 16_b, 0u, 1u, EShader::Fragment )
			.Finish();

	descr.attribs = VertexAttribs()
			.Add( "at_Texcoord", EVertexAttribute::Float2, 1, "" )
			.Add( "at_Position", EVertexAttribute::Float2, 0, "" );

	descr.Vertex().AddSource( EShaderLangFormat::OpenGL_450 | EShaderLangFormat::HighLevel, 
R"#(#version 450 core


#define SH_VERTEX           (1<<0)
#define SH_TESS_CONTROL     (1<<1)
#define SH_TESS_EVALUATION  (1<<2)
#define SH_GEOMETRY         (1<<3)
#define SH_FRAGMENT         (1<<4)
#define SH_COMPUTE          (1<<5)
		
#define SHADER	SH_VERTEX
#ifdef VULKAN
# define gl_VertexID    gl_VertexIndex
# define gl_InstanceID  gl_InstanceIndex
#else
# define gl_VertexIndex    gl_VertexID
# define gl_InstanceIndex  gl_InstanceID
#endif
out gl_PerVertex {
	vec4 gl_Position;
	float gl_PointSize;
	float gl_ClipDistance[];
	float gl_CullDistance[];
};

layout(location=0) in  highp vec2 at_Position;
layout(location=1) in  highp vec2 at_Texcoord;
layout(location=0) smooth out  highp vec2 v_Texcoord;





void main ()
{
	gl_Position = vec4( at_Position, float( 0.0f ), float( 1.0f ) );
	v_Texcoord = at_Texcoord;
}



)#"_str );

	descr.Vertex().AddSpirv( EShaderLangFormat::Vulkan_100 | EShaderLangFormat::SPIRV, { 
0x07230203, 0x00010000, 0x00080006, 0x00000020, 0x00000000, 0x00020011, 0x00000001, 0x0006000B, 0x00000002, 0x4C534C47, 0x6474732E, 0x3035342E, 
0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0009000F, 0x00000000, 0x00000005, 0x6E69616D, 0x00000000, 0x0000000E, 0x00000013, 0x0000001D, 
0x0000001E, 0x00030007, 0x00000001, 0x00000000, 0x00410003, 0x00000002, 0x000001C2, 0x00000001, 0x4F202F2F, 0x646F4D70, 0x50656C75, 0x65636F72, 
0x64657373, 0x746E6520, 0x702D7972, 0x746E696F, 0x69616D20, 0x2F2F0A6E, 0x4D704F20, 0x6C75646F, 0x6F725065, 0x73736563, 0x61206465, 0x2D6F7475, 
0x2D70616D, 0x61636F6C, 0x6E6F6974, 0x2F2F0A73, 0x4D704F20, 0x6C75646F, 0x6F725065, 0x73736563, 0x61206465, 0x2D6F7475, 0x2D70616D, 0x646E6962, 
0x73676E69, 0x202F2F0A, 0x6F4D704F, 0x656C7564, 0x636F7250, 0x65737365, 0x6C632064, 0x746E6569, 0x6C757620, 0x316E616B, 0x2F0A3030, 0x704F202F, 
0x75646F4D, 0x7250656C, 0x7365636F, 0x20646573, 0x67726174, 0x652D7465, 0x7620766E, 0x616B6C75, 0x302E316E, 0x202F2F0A, 0x6F4D704F, 0x656C7564, 
0x636F7250, 0x65737365, 0x6E652064, 0x2D797274, 0x6E696F70, 0x616D2074, 0x230A6E69, 0x656E696C, 0x000A3120, 0x00090004, 0x415F4C47, 0x735F4252, 
0x72617065, 0x5F657461, 0x64616873, 0x6F5F7265, 0x63656A62, 0x00007374, 0x00090004, 0x415F4C47, 0x735F4252, 0x69646168, 0x6C5F676E, 0x75676E61, 
0x5F656761, 0x70303234, 0x006B6361, 0x000A0004, 0x475F4C47, 0x4C474F4F, 0x70635F45, 0x74735F70, 0x5F656C79, 0x656E696C, 0x7269645F, 0x69746365, 
0x00006576, 0x00080004, 0x475F4C47, 0x4C474F4F, 0x6E695F45, 0x64756C63, 0x69645F65, 0x74636572, 0x00657669, 0x00040005, 0x00000005, 0x6E69616D, 
0x00000000, 0x00060005, 0x0000000C, 0x505F6C67, 0x65567265, 0x78657472, 0x00000000, 0x00060006, 0x0000000C, 0x00000000, 0x505F6C67, 0x7469736F, 
0x006E6F69, 0x00070006, 0x0000000C, 0x00000001, 0x505F6C67, 0x746E696F, 0x657A6953, 0x00000000, 0x00070006, 0x0000000C, 0x00000002, 0x435F6C67, 
0x4470696C, 0x61747369, 0x0065636E, 0x00070006, 0x0000000C, 0x00000003, 0x435F6C67, 0x446C6C75, 0x61747369, 0x0065636E, 0x00030005, 0x0000000E, 
0x00000000, 0x00050005, 0x00000013, 0x505F7461, 0x7469736F, 0x006E6F69, 0x00050005, 0x0000001D, 0x65545F76, 0x6F6F6378, 0x00006472, 0x00050005, 
0x0000001E, 0x545F7461, 0x6F637865, 0x0064726F, 0x00050048, 0x0000000C, 0x00000000, 0x0000000B, 0x00000000, 0x00050048, 0x0000000C, 0x00000001, 
0x0000000B, 0x00000001, 0x00050048, 0x0000000C, 0x00000002, 0x0000000B, 0x00000003, 0x00050048, 0x0000000C, 0x00000003, 0x0000000B, 0x00000004, 
0x00030047, 0x0000000C, 0x00000002, 0x00040047, 0x00000013, 0x0000001E, 0x00000000, 0x00040047, 0x0000001D, 0x0000001E, 0x00000000, 0x00040047, 
0x0000001E, 0x0000001E, 0x00000001, 0x00020013, 0x00000003, 0x00030021, 0x00000004, 0x00000003, 0x00030016, 0x00000007, 0x00000020, 0x00040017, 
0x00000008, 0x00000007, 0x00000004, 0x00040015, 0x00000009, 0x00000020, 0x00000000, 0x0004002B, 0x00000009, 0x0000000A, 0x00000001, 0x0004001C, 
0x0000000B, 0x00000007, 0x0000000A, 0x0006001E, 0x0000000C, 0x00000008, 0x00000007, 0x0000000B, 0x0000000B, 0x00040020, 0x0000000D, 0x00000003, 
0x0000000C, 0x0004003B, 0x0000000D, 0x0000000E, 0x00000003, 0x00040015, 0x0000000F, 0x00000020, 0x00000001, 0x0004002B, 0x0000000F, 0x00000010, 
0x00000000, 0x00040017, 0x00000011, 0x00000007, 0x00000002, 0x00040020, 0x00000012, 0x00000001, 0x00000011, 0x0004003B, 0x00000012, 0x00000013, 
0x00000001, 0x0004002B, 0x00000007, 0x00000015, 0x00000000, 0x0004002B, 0x00000007, 0x00000016, 0x3F800000, 0x00040020, 0x0000001A, 0x00000003, 
0x00000008, 0x00040020, 0x0000001C, 0x00000003, 0x00000011, 0x0004003B, 0x0000001C, 0x0000001D, 0x00000003, 0x0004003B, 0x00000012, 0x0000001E, 
0x00000001, 0x00050036, 0x00000003, 0x00000005, 0x00000000, 0x00000004, 0x000200F8, 0x00000006, 0x00040008, 0x00000001, 0x00000004, 0x00000000, 
0x0004003D, 0x00000011, 0x00000014, 0x00000013, 0x00050051, 0x00000007, 0x00000017, 0x00000014, 0x00000000, 0x00050051, 0x00000007, 0x00000018, 
0x00000014, 0x00000001, 0x00070050, 0x00000008, 0x00000019, 0x00000017, 0x00000018, 0x00000015, 0x00000016, 0x00050041, 0x0000001A, 0x0000001B, 
0x0000000E, 0x00000010, 0x0003003E, 0x0000001B, 0x00000019, 0x00040008, 0x00000001, 0x00000005, 0x00000000, 0x0004003D, 0x00000011, 0x0000001F, 
0x0000001E, 0x0003003E, 0x0000001D, 0x0000001F, 0x000100FD, 0x00010038 });

	descr.fragOutput = FragmentOutputState()
			.Add( "out_Color", EFragOutput::Float4, 0 );

	descr.Fragment().AddSource( EShaderLangFormat::OpenGL_450 | EShaderLangFormat::HighLevel, 
R"#(#version 450 core


#define SH_VERTEX           (1<<0)
#define SH_TESS_CONTROL     (1<<1)
#define SH_TESS_EVALUATION  (1<<2)
#define SH_GEOMETRY         (1<<3)
#define SH_FRAGMENT         (1<<4)
#define SH_COMPUTE          (1<<5)
		
#define SHADER	SH_FRAGMENT

layout(location=0) smooth in  highp vec2 v_Texcoord;
layout(location=0) out  highp vec4 out_Color;

layout(binding=0) uniform sampler2D un_ColorTexture;

layout(binding=0) layout(std140) uniform UB {
	layout(offset=0, align=16) vec4  color;

} ub;


layout(origin_upper_left) in vec4 gl_FragCoord;

void main ()
{
	out_Color = (texture( un_ColorTexture, v_Texcoord ) * ub.color);
}



)#"_str );

	descr.Fragment().AddSpirv( EShaderLangFormat::Vulkan_100 | EShaderLangFormat::SPIRV, { 
0x07230203, 0x00010000, 0x00080006, 0x00000020, 0x00000000, 0x00020011, 0x00000001, 0x0006000B, 0x00000002, 0x4C534C47, 0x6474732E, 0x3035342E, 
0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0008000F, 0x00000004, 0x00000005, 0x6E69616D, 0x00000000, 0x0000000A, 0x00000012, 0x0000001F, 
0x00030010, 0x00000005, 0x00000007, 0x00030007, 0x00000001, 0x00000000, 0x00410003, 0x00000002, 0x000001C2, 0x00000001, 0x4F202F2F, 0x646F4D70, 
0x50656C75, 0x65636F72, 0x64657373, 0x746E6520, 0x702D7972, 0x746E696F, 0x69616D20, 0x2F2F0A6E, 0x4D704F20, 0x6C75646F, 0x6F725065, 0x73736563, 
0x61206465, 0x2D6F7475, 0x2D70616D, 0x61636F6C, 0x6E6F6974, 0x2F2F0A73, 0x4D704F20, 0x6C75646F, 0x6F725065, 0x73736563, 0x61206465, 0x2D6F7475, 
0x2D70616D, 0x646E6962, 0x73676E69, 0x202F2F0A, 0x6F4D704F, 0x656C7564, 0x636F7250, 0x65737365, 0x6C632064, 0x746E6569, 0x6C757620, 0x316E616B, 
0x2F0A3030, 0x704F202F, 0x75646F4D, 0x7250656C, 0x7365636F, 0x20646573, 0x67726174, 0x652D7465, 0x7620766E, 0x616B6C75, 0x302E316E, 0x202F2F0A, 
0x6F4D704F, 0x656C7564, 0x636F7250, 0x65737365, 0x6E652064, 0x2D797274, 0x6E696F70, 0x616D2074, 0x230A6E69, 0x656E696C, 0x000A3120, 0x00090004, 
0x415F4C47, 0x735F4252, 0x72617065, 0x5F657461, 0x64616873, 0x6F5F7265, 0x63656A62, 0x00007374, 0x00090004, 0x415F4C47, 0x735F4252, 0x69646168, 
0x6C5F676E, 0x75676E61, 0x5F656761, 0x70303234, 0x006B6361, 0x000A0004, 0x475F4C47, 0x4C474F4F, 0x70635F45, 0x74735F70, 0x5F656C79, 0x656E696C, 
0x7269645F, 0x69746365, 0x00006576, 0x00080004, 0x475F4C47, 0x4C474F4F, 0x6E695F45, 0x64756C63, 0x69645F65, 0x74636572, 0x00657669, 0x00040005, 
0x00000005, 0x6E69616D, 0x00000000, 0x00050005, 0x0000000A, 0x5F74756F, 0x6F6C6F43, 0x00000072, 0x00060005, 0x0000000E, 0x435F6E75, 0x726F6C6F, 
0x74786554, 0x00657275, 0x00050005, 0x00000012, 0x65545F76, 0x6F6F6378, 0x00006472, 0x00030005, 0x00000015, 0x00004255, 0x00050006, 0x00000015, 
0x00000000, 0x6F6C6F63, 0x00000072, 0x00030005, 0x00000017, 0x00006275, 0x00060005, 0x0000001F, 0x465F6C67, 0x43676172, 0x64726F6F, 0x00000000, 
0x00040047, 0x0000000A, 0x0000001E, 0x00000000, 0x00040047, 0x0000000E, 0x00000022, 0x00000000, 0x00040047, 0x0000000E, 0x00000021, 0x00000000, 
0x00040047, 0x00000012, 0x0000001E, 0x00000000, 0x00050048, 0x00000015, 0x00000000, 0x00000023, 0x00000000, 0x00030047, 0x00000015, 0x00000002, 
0x00040047, 0x00000017, 0x00000022, 0x00000000, 0x00040047, 0x00000017, 0x00000021, 0x00000001, 0x00040047, 0x0000001F, 0x0000000B, 0x0000000F, 
0x00020013, 0x00000003, 0x00030021, 0x00000004, 0x00000003, 0x00030016, 0x00000007, 0x00000020, 0x00040017, 0x00000008, 0x00000007, 0x00000004, 
0x00040020, 0x00000009, 0x00000003, 0x00000008, 0x0004003B, 0x00000009, 0x0000000A, 0x00000003, 0x00090019, 0x0000000B, 0x00000007, 0x00000001, 
0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x0003001B, 0x0000000C, 0x0000000B, 0x00040020, 0x0000000D, 0x00000000, 0x0000000C, 
0x0004003B, 0x0000000D, 0x0000000E, 0x00000000, 0x00040017, 0x00000010, 0x00000007, 0x00000002, 0x00040020, 0x00000011, 0x00000001, 0x00000010, 
0x0004003B, 0x00000011, 0x00000012, 0x00000001, 0x0003001E, 0x00000015, 0x00000008, 0x00040020, 0x00000016, 0x00000002, 0x00000015, 0x0004003B, 
0x00000016, 0x00000017, 0x00000002, 0x00040015, 0x00000018, 0x00000020, 0x00000001, 0x0004002B, 0x00000018, 0x00000019, 0x00000000, 0x00040020, 
0x0000001A, 0x00000002, 0x00000008, 0x00040020, 0x0000001E, 0x00000001, 0x00000008, 0x0004003B, 0x0000001E, 0x0000001F, 0x00000001, 0x00050036, 
0x00000003, 0x00000005, 0x00000000, 0x00000004, 0x000200F8, 0x00000006, 0x00040008, 0x00000001, 0x00000005, 0x00000000, 0x0004003D, 0x0000000C, 
0x0000000F, 0x0000000E, 0x0004003D, 0x00000010, 0x00000013, 0x00000012, 0x00050057, 0x00000008, 0x00000014, 0x0000000F, 0x00000013, 0x00050041, 
0x0000001A, 0x0000001B, 0x00000017, 0x00000019, 0x0004003D, 0x00000008, 0x0000001C, 0x0000001B, 0x00050085, 0x00000008, 0x0000001D, 0x00000014, 
0x0000001C, 0x0003003E, 0x0000000A, 0x0000001D, 0x000100FD, 0x00010038 });

};
}	// Pipelines
