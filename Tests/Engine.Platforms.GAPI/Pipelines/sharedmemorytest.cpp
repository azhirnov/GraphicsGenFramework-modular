// This is generated file
// Origin file: 'c:\projects\graphxgenengine\tests\engine.platforms.gapi.tools\compute\sharedmemorytest.cpp'
// Created at: 2018/03/11 - 09:53:09

#include "all_pipelines.h"
// C++ shader
#ifdef GRAPHICS_API_SOFT
namespace SWShaderLang
{
	Float MaxMag (const Float a, const Float b);
	Float4 MaxMag (const Float4 a, const Float4 b);
	
	//---------------------------------
	
	Float MaxMag (const Float a, const Float b)
	{
		if ( (abs( a ) > abs( b )))
		{
			return a;
		;
		}
		;
		if ( (abs( a ) < abs( b )))
		{
			return b;
		;
		}
		;
		return max( a, b );
	}
	
	
	Float4 MaxMag (const Float4 a, const Float4 b)
	{
		return Float4( MaxMag( a.x, b.x ), MaxMag( a.y, b.y ), MaxMag( a.z, b.z ), MaxMag( a.w, b.w ) );
	}
	
	
	static void sw_sharedmemorytest_comp (const Impl::SWShaderHelper &_helper_)
	{
		// prepare externals
		Impl::Image2D< vec4, Impl::EStorageAccess::WriteOnly > un_DstImage;		_helper_.GetImage( 0, un_DstImage );
		Impl::Image2D< vec4, Impl::EStorageAccess::ReadOnly > un_SrcImage;		_helper_.GetImage( 1, un_SrcImage );
		Impl::SharedMemory< Float4 >	sharedMemory;	_helper_.GetShared( 1, 256, sharedMemory );
		Impl::Barrier __barrier_obj0;	_helper_.InitBarrier( 0, __barrier_obj0 );
		auto& gl_LocalInvocationID = _helper_.GetComputeShaderState().inLocalInvocationID;
		auto& gl_LocalInvocationIndex = _helper_.GetComputeShaderState().inLocalInvocationIndex;
	
		// shader
	{
		Int2 coord = Int3( gl_LocalInvocationID ).xy;
		Int idx = Int( gl_LocalInvocationIndex );
		(sharedMemory[idx]) = imageLoad( un_SrcImage, coord );
		__barrier_obj0.Wait();
		Float4 value = Float4( 0.0 );
		Int y = Int( 0 );
		for(; (UInt( y ) < UInt( 16 )); ++( y ))
		{
			Int x = Int( 0 );
			for(; (UInt( x ) < UInt( 16 )); ++( x ))
			{
				value = MaxMag( value, (sharedMemory[(UInt( x ) + (UInt( y ) * UInt( 16 )))]) );
			}
			;
		}
		;
		imageStore( un_DstImage, coord, value );
	}
	
	
	}
}	// SWShaderLang
#endif	// GRAPHICS_API_SOFT


namespace Pipelines
{

void Create_sharedmemorytest (PipelineTemplateDescriptor& descr)
{
	descr = PipelineTemplateDescriptor();
	descr.supportedShaders = EShader::Compute;

	descr.localGroupSize = uint3(16, 16, 1);
	descr.layout = PipelineLayoutDescriptor::Builder()
			.AddImage( "un_DstImage", EImage::Tex2D, EPixelFormat::RGBA32F, EShaderMemoryModel::WriteOnly, 0, 0, EShader::Compute )
			.AddImage( "un_SrcImage", EImage::Tex2D, EPixelFormat::RGBA32F, EShaderMemoryModel::ReadOnly, 1, 1, EShader::Compute )
			.Finish();

	descr.Compute().StringGLSL( 
R"#(#version 450 core
layout (local_size_x=16, local_size_y=16, local_size_z=1) in;

layout(binding=0) layout(rgba32f) writeonly uniform image2D un_DstImage;
layout(binding=1) layout(rgba32f) readonly uniform image2D un_SrcImage;

//---------------------------------

shared vec4 sharedMemory[256];

//---------------------------------

vec4 MaxMag (const vec4 a, const vec4 b);
float MaxMag (const float a, const float b);

//---------------------------------

float MaxMag (const float a, const float b)
{
	if ( (abs( a ) > abs( b )))
	{
		return a;
	;
	}
	;
	if ( (abs( a ) < abs( b )))
	{
		return b;
	;
	}
	;
	return max( a, b );
}


vec4 MaxMag (const vec4 a, const vec4 b)
{
	return vec4( MaxMag( a.x, b.x ), MaxMag( a.y, b.y ), MaxMag( a.z, b.z ), MaxMag( a.w, b.w ) );
}


void main ()
{
	ivec2 coord = ivec3( gl_LocalInvocationID ).xy;
	int idx = int( gl_LocalInvocationIndex );
	(sharedMemory[idx]) = imageLoad( un_SrcImage, coord );
	barrier();
	vec4 value = vec4( 0.0 );
	int y = int( 0 );
	for(; (uint( y ) < uint( 16 )); ++( y ))
	{
		int x = int( 0 );
		for(; (uint( x ) < uint( 16 )); ++( x ))
		{
			value = MaxMag( value, (sharedMemory[(uint( x ) + (uint( y ) * uint( 16 )))]) );
		}
		;
	}
	;
	imageStore( un_DstImage, coord, value );
}


)#"_str );
	descr.Compute().ArraySPIRV({ 
0x07230203, 0x00010000, 0x00080002, 0x00000081, 0x00000000, 0x00020011, 0x00000001, 0x0006000B, 0x00000002, 0x4C534C47, 0x6474732E, 0x3035342E, 
0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0007000F, 0x00000005, 0x00000005, 0x6E69616D, 0x00000000, 0x0000003D, 0x00000045, 0x00060010, 
0x00000005, 0x00000011, 0x00000010, 0x00000010, 0x00000001, 0x00030007, 0x00000001, 0x00000000, 0x002E0003, 0x00000002, 0x000001C2, 0x00000001, 
0x4F202F2F, 0x646F4D70, 0x50656C75, 0x65636F72, 0x64657373, 0x746E6520, 0x702D7972, 0x746E696F, 0x69616D20, 0x2F2F0A6E, 0x4D704F20, 0x6C75646F, 
0x6F725065, 0x73736563, 0x63206465, 0x6E65696C, 0x75762074, 0x6E616B6C, 0x0A303031, 0x4F202F2F, 0x646F4D70, 0x50656C75, 0x65636F72, 0x64657373, 
0x72617420, 0x2D746567, 0x20766E65, 0x6B6C7576, 0x2E316E61, 0x2F2F0A30, 0x4D704F20, 0x6C75646F, 0x6F725065, 0x73736563, 0x65206465, 0x7972746E, 
0x696F702D, 0x6D20746E, 0x0A6E6961, 0x6E696C23, 0x0A312065, 0x00000000, 0x00040005, 0x00000005, 0x6E69616D, 0x00000000, 0x00060005, 0x0000000B, 
0x4D78614D, 0x66286761, 0x31663B31, 0x0000003B, 0x00030005, 0x00000009, 0x00000061, 0x00030005, 0x0000000A, 0x00000062, 0x00060005, 0x00000011, 
0x4D78614D, 0x76286761, 0x763B3466, 0x003B3466, 0x00030005, 0x0000000F, 0x00000061, 0x00030005, 0x00000010, 0x00000062, 0x00040005, 0x0000003A, 
0x726F6F63, 0x00000064, 0x00080005, 0x0000003D, 0x4C5F6C67, 0x6C61636F, 0x6F766E49, 0x69746163, 0x44496E6F, 0x00000000, 0x00030005, 0x00000043, 
0x00786469, 0x00080005, 0x00000045, 0x4C5F6C67, 0x6C61636F, 0x6F766E49, 0x69746163, 0x6E496E6F, 0x00786564, 0x00060005, 0x0000004B, 0x72616873, 
0x654D6465, 0x79726F6D, 0x00000000, 0x00050005, 0x0000004F, 0x535F6E75, 0x6D496372, 0x00656761, 0x00040005, 0x00000056, 0x756C6176, 0x00000065, 
0x00030005, 0x00000059, 0x00000079, 0x00030005, 0x00000064, 0x00000078, 0x00050005, 0x0000007C, 0x445F6E75, 0x6D497473, 0x00656761, 0x00040047, 
0x0000003D, 0x0000000B, 0x0000001B, 0x00040047, 0x00000045, 0x0000000B, 0x0000001D, 0x00040047, 0x0000004F, 0x00000022, 0x00000000, 0x00040047, 
0x0000004F, 0x00000021, 0x00000001, 0x00030047, 0x0000004F, 0x00000018, 0x00040047, 0x0000007C, 0x00000022, 0x00000000, 0x00040047, 0x0000007C, 
0x00000021, 0x00000000, 0x00030047, 0x0000007C, 0x00000019, 0x00040047, 0x00000080, 0x0000000B, 0x00000019, 0x00020013, 0x00000003, 0x00030021, 
0x00000004, 0x00000003, 0x00030016, 0x00000007, 0x00000020, 0x00050021, 0x00000008, 0x00000007, 0x00000007, 0x00000007, 0x00040017, 0x0000000D, 
0x00000007, 0x00000004, 0x00050021, 0x0000000E, 0x0000000D, 0x0000000D, 0x0000000D, 0x00020014, 0x00000015, 0x00040015, 0x00000023, 0x00000020, 
0x00000000, 0x0004002B, 0x00000023, 0x00000024, 0x00000000, 0x0004002B, 0x00000023, 0x00000028, 0x00000001, 0x0004002B, 0x00000023, 0x0000002C, 
0x00000002, 0x0004002B, 0x00000023, 0x00000030, 0x00000003, 0x00040015, 0x00000037, 0x00000020, 0x00000001, 0x00040017, 0x00000038, 0x00000037, 
0x00000002, 0x00040020, 0x00000039, 0x00000007, 0x00000038, 0x00040017, 0x0000003B, 0x00000023, 0x00000003, 0x00040020, 0x0000003C, 0x00000001, 
0x0000003B, 0x0004003B, 0x0000003C, 0x0000003D, 0x00000001, 0x00040017, 0x0000003F, 0x00000037, 0x00000003, 0x00040020, 0x00000042, 0x00000007, 
0x00000037, 0x00040020, 0x00000044, 0x00000001, 0x00000023, 0x0004003B, 0x00000044, 0x00000045, 0x00000001, 0x0004002B, 0x00000023, 0x00000048, 
0x00000100, 0x0004001C, 0x00000049, 0x0000000D, 0x00000048, 0x00040020, 0x0000004A, 0x00000004, 0x00000049, 0x0004003B, 0x0000004A, 0x0000004B, 
0x00000004, 0x00090019, 0x0000004D, 0x00000007, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x00000001, 0x00040020, 0x0000004E, 
0x00000000, 0x0000004D, 0x0004003B, 0x0000004E, 0x0000004F, 0x00000000, 0x00040020, 0x00000053, 0x00000004, 0x0000000D, 0x00040020, 0x00000055, 
0x00000007, 0x0000000D, 0x0004002B, 0x00000007, 0x00000057, 0x00000000, 0x0007002C, 0x0000000D, 0x00000058, 0x00000057, 0x00000057, 0x00000057, 
0x00000057, 0x0004002B, 0x00000037, 0x0000005A, 0x00000000, 0x0004002B, 0x00000023, 0x00000062, 0x00000010, 0x0004002B, 0x00000037, 0x00000078, 
0x00000001, 0x0004003B, 0x0000004E, 0x0000007C, 0x00000000, 0x0006002C, 0x0000003B, 0x00000080, 0x00000062, 0x00000062, 0x00000028, 0x00050036, 
0x00000003, 0x00000005, 0x00000000, 0x00000004, 0x000200F8, 0x00000006, 0x0004003B, 0x00000039, 0x0000003A, 0x00000007, 0x0004003B, 0x00000042, 
0x00000043, 0x00000007, 0x0004003B, 0x00000055, 0x00000056, 0x00000007, 0x0004003B, 0x00000042, 0x00000059, 0x00000007, 0x0004003B, 0x00000042, 
0x00000064, 0x00000007, 0x00040008, 0x00000001, 0x0000002C, 0x00000000, 0x0004003D, 0x0000003B, 0x0000003E, 0x0000003D, 0x0004007C, 0x0000003F, 
0x00000040, 0x0000003E, 0x0007004F, 0x00000038, 0x00000041, 0x00000040, 0x00000040, 0x00000000, 0x00000001, 0x0003003E, 0x0000003A, 0x00000041, 
0x00040008, 0x00000001, 0x0000002D, 0x00000000, 0x0004003D, 0x00000023, 0x00000046, 0x00000045, 0x0004007C, 0x00000037, 0x00000047, 0x00000046, 
0x0003003E, 0x00000043, 0x00000047, 0x00040008, 0x00000001, 0x0000002E, 0x00000000, 0x0004003D, 0x00000037, 0x0000004C, 0x00000043, 0x0004003D, 
0x0000004D, 0x00000050, 0x0000004F, 0x0004003D, 0x00000038, 0x00000051, 0x0000003A, 0x00050062, 0x0000000D, 0x00000052, 0x00000050, 0x00000051, 
0x00050041, 0x00000053, 0x00000054, 0x0000004B, 0x0000004C, 0x0003003E, 0x00000054, 0x00000052, 0x00040008, 0x00000001, 0x0000002F, 0x00000000, 
0x000400E0, 0x0000002C, 0x00000028, 0x00000024, 0x00040008, 0x00000001, 0x00000030, 0x00000000, 0x0003003E, 0x00000056, 0x00000058, 0x00040008, 
0x00000001, 0x00000031, 0x00000000, 0x0003003E, 0x00000059, 0x0000005A, 0x000200F9, 0x0000005B, 0x00040008, 0x00000001, 0x00000032, 0x00000000, 
0x000200F8, 0x0000005B, 0x000400F6, 0x0000005D, 0x0000005E, 0x00000000, 0x000200F9, 0x0000005F, 0x000200F8, 0x0000005F, 0x0004003D, 0x00000037, 
0x00000060, 0x00000059, 0x0004007C, 0x00000023, 0x00000061, 0x00000060, 0x000500B0, 0x00000015, 0x00000063, 0x00000061, 0x00000062, 0x000400FA, 
0x00000063, 0x0000005C, 0x0000005D, 0x000200F8, 0x0000005C, 0x00040008, 0x00000001, 0x00000034, 0x00000000, 0x0003003E, 0x00000064, 0x0000005A, 
0x000200F9, 0x00000065, 0x00040008, 0x00000001, 0x00000035, 0x00000000, 0x000200F8, 0x00000065, 0x000400F6, 0x00000067, 0x00000068, 0x00000000, 
0x000200F9, 0x00000069, 0x000200F8, 0x00000069, 0x0004003D, 0x00000037, 0x0000006A, 0x00000064, 0x0004007C, 0x00000023, 0x0000006B, 0x0000006A, 
0x000500B0, 0x00000015, 0x0000006C, 0x0000006B, 0x00000062, 0x000400FA, 0x0000006C, 0x00000066, 0x00000067, 0x000200F8, 0x00000066, 0x00040008, 
0x00000001, 0x00000037, 0x00000000, 0x0004003D, 0x0000000D, 0x0000006D, 0x00000056, 0x0004003D, 0x00000037, 0x0000006E, 0x00000064, 0x0004007C, 
0x00000023, 0x0000006F, 0x0000006E, 0x0004003D, 0x00000037, 0x00000070, 0x00000059, 0x0004007C, 0x00000023, 0x00000071, 0x00000070, 0x00050084, 
0x00000023, 0x00000072, 0x00000071, 0x00000062, 0x00050080, 0x00000023, 0x00000073, 0x0000006F, 0x00000072, 0x00050041, 0x00000053, 0x00000074, 
0x0000004B, 0x00000073, 0x0004003D, 0x0000000D, 0x00000075, 0x00000074, 0x00060039, 0x0000000D, 0x00000076, 0x00000011, 0x0000006D, 0x00000075, 
0x0003003E, 0x00000056, 0x00000076, 0x000200F9, 0x00000068, 0x000200F8, 0x00000068, 0x00040008, 0x00000001, 0x00000035, 0x00000000, 0x0004003D, 
0x00000037, 0x00000077, 0x00000064, 0x00050080, 0x00000037, 0x00000079, 0x00000077, 0x00000078, 0x0003003E, 0x00000064, 0x00000079, 0x000200F9, 
0x00000065, 0x000200F8, 0x00000067, 0x000200F9, 0x0000005E, 0x000200F8, 0x0000005E, 0x00040008, 0x00000001, 0x00000032, 0x00000000, 0x0004003D, 
0x00000037, 0x0000007A, 0x00000059, 0x00050080, 0x00000037, 0x0000007B, 0x0000007A, 0x00000078, 0x0003003E, 0x00000059, 0x0000007B, 0x000200F9, 
0x0000005B, 0x000200F8, 0x0000005D, 0x00040008, 0x00000001, 0x0000003C, 0x00000000, 0x0004003D, 0x0000004D, 0x0000007D, 0x0000007C, 0x0004003D, 
0x00000038, 0x0000007E, 0x0000003A, 0x0004003D, 0x0000000D, 0x0000007F, 0x00000056, 0x00040063, 0x0000007D, 0x0000007E, 0x0000007F, 0x000100FD, 
0x00010038, 0x00050036, 0x00000007, 0x0000000B, 0x00000000, 0x00000008, 0x00030037, 0x00000007, 0x00000009, 0x00030037, 0x00000007, 0x0000000A, 
0x000200F8, 0x0000000C, 0x00040008, 0x00000001, 0x00000014, 0x00000000, 0x0006000C, 0x00000007, 0x00000013, 0x00000002, 0x00000004, 0x00000009, 
0x0006000C, 0x00000007, 0x00000014, 0x00000002, 0x00000004, 0x0000000A, 0x000500BA, 0x00000015, 0x00000016, 0x00000013, 0x00000014, 0x000300F7, 
0x00000018, 0x00000000, 0x000400FA, 0x00000016, 0x00000017, 0x00000018, 0x000200F8, 0x00000017, 0x00040008, 0x00000001, 0x00000016, 0x00000000, 
0x000200FE, 0x00000009, 0x000200F8, 0x00000018, 0x00040008, 0x00000001, 0x0000001A, 0x00000000, 0x0006000C, 0x00000007, 0x0000001A, 0x00000002, 
0x00000004, 0x00000009, 0x0006000C, 0x00000007, 0x0000001B, 0x00000002, 0x00000004, 0x0000000A, 0x000500B8, 0x00000015, 0x0000001C, 0x0000001A, 
0x0000001B, 0x000300F7, 0x0000001E, 0x00000000, 0x000400FA, 0x0000001C, 0x0000001D, 0x0000001E, 0x000200F8, 0x0000001D, 0x00040008, 0x00000001, 
0x0000001C, 0x00000000, 0x000200FE, 0x0000000A, 0x000200F8, 0x0000001E, 0x00040008, 0x00000001, 0x00000020, 0x00000000, 0x0007000C, 0x00000007, 
0x00000020, 0x00000002, 0x00000028, 0x00000009, 0x0000000A, 0x000200FE, 0x00000020, 0x00010038, 0x00050036, 0x0000000D, 0x00000011, 0x00000000, 
0x0000000E, 0x00030037, 0x0000000D, 0x0000000F, 0x00030037, 0x0000000D, 0x00000010, 0x000200F8, 0x00000012, 0x00040008, 0x00000001, 0x00000026, 
0x00000000, 0x00050051, 0x00000007, 0x00000025, 0x0000000F, 0x00000000, 0x00050051, 0x00000007, 0x00000026, 0x00000010, 0x00000000, 0x00060039, 
0x00000007, 0x00000027, 0x0000000B, 0x00000025, 0x00000026, 0x00050051, 0x00000007, 0x00000029, 0x0000000F, 0x00000001, 0x00050051, 0x00000007, 
0x0000002A, 0x00000010, 0x00000001, 0x00060039, 0x00000007, 0x0000002B, 0x0000000B, 0x00000029, 0x0000002A, 0x00050051, 0x00000007, 0x0000002D, 
0x0000000F, 0x00000002, 0x00050051, 0x00000007, 0x0000002E, 0x00000010, 0x00000002, 0x00060039, 0x00000007, 0x0000002F, 0x0000000B, 0x0000002D, 
0x0000002E, 0x00050051, 0x00000007, 0x00000031, 0x0000000F, 0x00000003, 0x00050051, 0x00000007, 0x00000032, 0x00000010, 0x00000003, 0x00060039, 
0x00000007, 0x00000033, 0x0000000B, 0x00000031, 0x00000032, 0x00070050, 0x0000000D, 0x00000034, 0x00000027, 0x0000002B, 0x0000002F, 0x00000033, 
0x000200FE, 0x00000034, 0x00010038 });
	descr.Compute().StringCL( 
R"#(#define FORMAT( _fmt_ )

// Functions for GLSL compatibility

#define Gen_FloatTemplates( _gen_ ) \
	_gen_( float ) \
	_gen_( float2 ) \
	_gen_( float3 ) \
	_gen_( float4 )

#define Gen_DoubleTemplates( _gen_ ) \
	_gen_( double ) \
	_gen_( double2 ) \
	_gen_( double3 ) \
	_gen_( double4 )
	

// Fract
#define GenTemplate_Fract( _type_ ) \
	_type_ fractTempl_##_type_ (_type_ x) { \
		_type_	ipart; \
		return fract( x, &ipart ); \
	}
	Gen_FloatTemplates( GenTemplate_Fract )
	Gen_DoubleTemplates( GenTemplate_Fract )
#undef GenTemplate_Fract


#undef Gen_FloatTemplates
#undef Gen_DoubleTemplates
			
__local float4 sharedMemory [256];

//---------------------------------

float MaxMag (const float a, const float b);
float4 MaxMag (const float4 a, const float4 b);

//---------------------------------

float MaxMag (const float a, const float b)
{
	if ( (fabs( a ) > fabs( b )))
	{
		return a;
	;
	}
	;
	if ( (fabs( a ) < fabs( b )))
	{
		return b;
	;
	}
	;
	return max( a, b );
}


float4 MaxMag (const float4 a, const float4 b)
{
	return ((float4)( MaxMag( a.x, b.x ), MaxMag( a.y, b.y ), MaxMag( a.z, b.z ), MaxMag( a.w, b.w ) ));
}


kernel void main (
	/*0*/write_only FORMAT(rgba32f) image2d_t un_DstImage,
	/*1*/read_only FORMAT(rgba32f) image2d_t un_SrcImage)
{
	int2 coord = convert_int3( ((uint3)(get_local_id(0),   get_local_id(1),   get_local_id(2))) ).xy;
	int idx = convert_int( ((uint)(get_local_linear_id())) );
	(sharedMemory[idx]) = read_imagef(un_SrcImage, coord);
	barrier(CLK_LOCAL_MEM_FENCE);
	float4 value = ((float4)( 0.0 ));
	int y = ((int)( 0 ));
	for(; (convert_uint( y ) < ((uint)( 16 ))); ++( y ))
	{
		int x = ((int)( 0 ));
		for(; (convert_uint( x ) < ((uint)( 16 ))); ++( x ))
		{
			value = MaxMag( value, (sharedMemory[(convert_uint( x ) + (convert_uint( y ) * ((uint)( 16 ))))]) );
		}
		;
	}
	;
	write_imagef(un_DstImage, coord, value);
}


)#"_str );
#ifdef GRAPHICS_API_SOFT
	descr.Compute().FuncSW( &SWShaderLang::sw_sharedmemorytest_comp );
#endif

};
};
