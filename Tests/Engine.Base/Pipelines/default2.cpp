// This is generated file
// Origin file: 'd:\projects\activeprojects\p034_engine2\external\pipelinecompiler\tests\pipelines\default2.cpp'
// Created at: 2017/10/17 - 12:23:38

#include "all_pipelines.h"

namespace SWShaderLang
{
/*
struct VertexIn
{
	float2	position;
	float2	texcoord;
};

struct VertexOut
{
	float2	texcoord;
};

static void default2_vs (const SWShaderHelper &helper)
{
	// prepare
	In< VertexIn >					in_Vertex;			helper.VS_GetVertex( OUT in_Vertex );
	Var< VertexOut >				out_Vertex;			helper.VS_RegVarying( OUT out_Vertex );
	In< VSBuiltIn_Input >			in_PerVertex;		helper.GetBuiltIn( OUT in_PerVertex );
	Out< VSBuiltIn_Output >			out_PerVertex;		helper.GetBuiltIn( OUT out_PerVertex );
	UniformBuffer< Pipelines::UB >	ub;					helper.GetUniformBuffer( "ub", OUT ub );

	// shader source
	{
		out_PerVertex->position	= ub->mvp * float4(in_Vertex->position, 0.0f, 1.0f);
		out_Vertex->texcoord	= in_Vertex->texcoord;
	}
}

static void default2_fs (const SWShaderHelper &helper)
{
	// prepare
	Texture2D< RGBA8_UNorm >	un_ColorTexture;	helper.GetTexture( "un_ColorTexture", OUT un_ColorTexture );
	In< FSBuiltIn_Input >		in_PerFragment;		helper.GetBuiltIn( OUT in_PerFragment );
	Out< FSBuiltIn_Output >		out_PerFragment;	helper.GetBuiltIn( OUT out_PerFragment );
	
	// shader source
	{
	}
}
*/
}	// SWShaderLang


namespace Pipelines
{

void Create_default2 (PipelineTemplateDescriptor& descr)
{
	descr = PipelineTemplateDescriptor();
	// RenderState
	descr.renderState = RenderState();
	// InputAssemblyState
	descr.renderState.inputAssembly.topology         = EPrimitive::TriangleList;
	descr.renderState.inputAssembly.primitiveRestart = false;

	descr.dynamicStates = EPipelineDynamicState::bits() | EPipelineDynamicState::Viewport | EPipelineDynamicState::Scissor;
	descr.supportedShaders = EShader::bits() | EShader::Vertex | EShader::Fragment;
	descr.supportedPrimitives = EPrimitive::bits() | EPrimitive::TriangleList;

	descr.layout = PipelineLayoutDescriptor::Builder()
			.AddTexture( "un_ColorTexture", EImage::Tex2D, EPixelFormatClass::RGBA | EPixelFormatClass::LinearColorSpace | EPixelFormatClass::AnyFloat | EPixelFormatClass::AnyNorm, 0, 0, EShader::bits() | EShader::Fragment )
			.AddUniformBuffer( "ub", 16_b, 1, 0, EShader::bits() | EShader::Fragment )
	.Finish();

	descr.attribs = VertexAttribs()
			.Add( "at_Position", EVertexAttribute::Float2, 0, "" )
			.Add( "at_Texcoord", EVertexAttribute::Float2, 1, "" );

	descr.Vertex().StringGLSL( 
R"#(#version 450 core
// LunarGOO output
#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_ARB_separate_shader_objects : enable
layout(location=0) in vec2 at_Position;
layout(location=1) in vec2 at_Texcoord;
out gl_PerVertex {
	vec4 gl_Position;
	float gl_PointSize;
	float gl_ClipDistance[1];
	float gl_CullDistance[1];
} ;
layout(location=0) out vec2 v_Texcoord;
const float C_0d0 = 0.0;
const float C_1d0 = 1.0;

void main()
{
	vec4 H_e4s46x = vec4(at_Position.x, at_Position.y, C_0d0, C_1d0);
	gl_Position = H_e4s46x;
	v_Texcoord = at_Texcoord;
	
}
)#"_ref );
	descr.Vertex().ArraySPIRV( 
{ 0x07230203, 0x00010000, 0x00080001, 0x00000025, 0x00000000, 0x00020011, 0x00000001, 0x0006000B, 0x00000001, 0x4C534C47, 0x6474732E, 0x3035342E, 0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0009000F, 0x00000000, 0x00000004, 0x6E69616D, 0x00000000, 0x0000000C, 0x0000001B, 0x00000022, 0x00000023, 0x00030003, 0x00000002, 0x000001C2, 0x00070004, 0x415F4C47, 0x675F4252, 0x735F7570, 0x65646168, 0x6E695F72, 0x00343674, 0x00090004, 0x415F4C47, 0x735F4252, 0x72617065, 0x5F657461, 0x64616873, 0x6F5F7265, 0x63656A62, 0x00007374, 0x00040005, 0x00000004, 0x6E69616D, 0x00000000, 0x00050005, 0x00000009, 0x34655F48, 0x78363473, 0x00000000, 0x00050005, 0x0000000C, 0x505F7461, 0x7469736F, 0x006E6F69, 0x00060005, 0x00000019, 0x505F6C67, 0x65567265, 0x78657472, 0x00000000, 0x00060006, 0x00000019, 0x00000000, 0x505F6C67, 0x7469736F, 0x006E6F69, 0x00070006, 0x00000019, 0x00000001, 0x505F6C67, 0x746E696F, 0x657A6953, 0x00000000, 0x00070006, 0x00000019, 0x00000002, 0x435F6C67, 0x4470696C, 0x61747369, 0x0065636E, 0x00070006, 0x00000019, 0x00000003, 0x435F6C67, 0x446C6C75, 0x61747369, 0x0065636E, 0x00030005, 0x0000001B, 0x00000000, 0x00050005, 0x00000022, 0x65545F76, 0x6F6F6378, 0x00006472, 0x00050005, 0x00000023, 0x545F7461, 0x6F637865, 0x0064726F, 0x00040047, 0x0000000C, 0x0000001E, 0x00000000, 0x00050048, 0x00000019, 0x00000000, 0x0000000B, 0x00000000, 0x00050048, 0x00000019, 0x00000001, 0x0000000B, 0x00000001, 0x00050048, 0x00000019, 0x00000002, 0x0000000B, 0x00000003, 0x00050048, 0x00000019, 0x00000003, 0x0000000B, 0x00000004, 0x00030047, 0x00000019, 0x00000002, 0x00040047, 0x00000022, 0x0000001E, 0x00000000, 0x00040047, 0x00000023, 0x0000001E, 0x00000001, 0x00020013, 0x00000002, 0x00030021, 0x00000003, 0x00000002, 0x00030016, 0x00000006, 0x00000020, 0x00040017, 0x00000007, 0x00000006, 0x00000004, 0x00040020, 0x00000008, 0x00000007, 0x00000007, 0x00040017, 0x0000000A, 0x00000006, 0x00000002, 0x00040020, 0x0000000B, 0x00000001, 0x0000000A, 0x0004003B, 0x0000000B, 0x0000000C, 0x00000001, 0x00040015, 0x0000000D, 0x00000020, 0x00000000, 0x0004002B, 0x0000000D, 0x0000000E, 0x00000000, 0x00040020, 0x0000000F, 0x00000001, 0x00000006, 0x0004002B, 0x0000000D, 0x00000012, 0x00000001, 0x0004002B, 0x00000006, 0x00000015, 0x00000000, 0x0004002B, 0x00000006, 0x00000016, 0x3F800000, 0x0004001C, 0x00000018, 0x00000006, 0x00000012, 0x0006001E, 0x00000019, 0x00000007, 0x00000006, 0x00000018, 0x00000018, 0x00040020, 0x0000001A, 0x00000003, 0x00000019, 0x0004003B, 0x0000001A, 0x0000001B, 0x00000003, 0x00040015, 0x0000001C, 0x00000020, 0x00000001, 0x0004002B, 0x0000001C, 0x0000001D, 0x00000000, 0x00040020, 0x0000001F, 0x00000003, 0x00000007, 0x00040020, 0x00000021, 0x00000003, 0x0000000A, 0x0004003B, 0x00000021, 0x00000022, 0x00000003, 0x0004003B, 0x0000000B, 0x00000023, 0x00000001, 0x00050036, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000200F8, 0x00000005, 0x0004003B, 0x00000008, 0x00000009, 0x00000007, 0x00050041, 0x0000000F, 0x00000010, 0x0000000C, 0x0000000E, 0x0004003D, 0x00000006, 0x00000011, 0x00000010, 0x00050041, 0x0000000F, 0x00000013, 0x0000000C, 0x00000012, 0x0004003D, 0x00000006, 0x00000014, 0x00000013, 0x00070050, 0x00000007, 0x00000017, 0x00000011, 0x00000014, 0x00000015, 0x00000016, 0x0003003E, 0x00000009, 0x00000017, 0x0004003D, 0x00000007, 0x0000001E, 0x00000009, 0x00050041, 0x0000001F, 0x00000020, 0x0000001B, 0x0000001D, 0x0003003E, 0x00000020, 0x0000001E, 0x0004003D, 0x0000000A, 0x00000024, 0x00000023, 0x0003003E, 0x00000022, 0x00000024, 0x000100FD, 0x00010038 } );
	//descr.Vertex().FuncSW( &SWShaderLang::default2_vs );

	descr.fragOutput = FragmentOutputState()
			.Add( "out_Color", EFragOutput::Float4, 0 );

	descr.Fragment().StringGLSL( 
R"#(#version 450 core
// LunarGOO output
#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_ARB_separate_shader_objects : enable
layout(binding=0) uniform sampler2D un_ColorTexture;
layout(std140, binding=1) uniform UB {
	vec4 color;
} ub;
layout(location=0) in vec2 v_Texcoord;
layout(location=0) out vec4 out_Color;

void main()
{
	vec4 out_Color1 = texture(un_ColorTexture, v_Texcoord);
	vec4 out_Color2 = out_Color1 * ub.color;
	out_Color = out_Color2;
	
}
)#"_ref );
	descr.Fragment().ArraySPIRV( 
{ 0x07230203, 0x00010000, 0x00080001, 0x00000022, 0x00000000, 0x00020011, 0x00000001, 0x0006000B, 0x00000001, 0x4C534C47, 0x6474732E, 0x3035342E, 0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0007000F, 0x00000004, 0x00000004, 0x6E69616D, 0x00000000, 0x00000011, 0x00000020, 0x00030010, 0x00000004, 0x00000007, 0x00030003, 0x00000002, 0x000001C2, 0x00070004, 0x415F4C47, 0x675F4252, 0x735F7570, 0x65646168, 0x6E695F72, 0x00343674, 0x00090004, 0x415F4C47, 0x735F4252, 0x72617065, 0x5F657461, 0x64616873, 0x6F5F7265, 0x63656A62, 0x00007374, 0x00040005, 0x00000004, 0x6E69616D, 0x00000000, 0x00050005, 0x00000009, 0x5F74756F, 0x6F6C6F43, 0x00003172, 0x00060005, 0x0000000D, 0x435F6E75, 0x726F6C6F, 0x74786554, 0x00657275, 0x00050005, 0x00000011, 0x65545F76, 0x6F6F6378, 0x00006472, 0x00050005, 0x00000014, 0x5F74756F, 0x6F6C6F43, 0x00003272, 0x00030005, 0x00000016, 0x00004255, 0x00050006, 0x00000016, 0x00000000, 0x6F6C6F63, 0x00000072, 0x00030005, 0x00000018, 0x00006275, 0x00050005, 0x00000020, 0x5F74756F, 0x6F6C6F43, 0x00000072, 0x00040047, 0x0000000D, 0x00000022, 0x00000000, 0x00040047, 0x0000000D, 0x00000021, 0x00000000, 0x00040047, 0x00000011, 0x0000001E, 0x00000000, 0x00050048, 0x00000016, 0x00000000, 0x00000023, 0x00000000, 0x00030047, 0x00000016, 0x00000002, 0x00040047, 0x00000018, 0x00000022, 0x00000000, 0x00040047, 0x00000018, 0x00000021, 0x00000001, 0x00040047, 0x00000020, 0x0000001E, 0x00000000, 0x00020013, 0x00000002, 0x00030021, 0x00000003, 0x00000002, 0x00030016, 0x00000006, 0x00000020, 0x00040017, 0x00000007, 0x00000006, 0x00000004, 0x00040020, 0x00000008, 0x00000007, 0x00000007, 0x00090019, 0x0000000A, 0x00000006, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x0003001B, 0x0000000B, 0x0000000A, 0x00040020, 0x0000000C, 0x00000000, 0x0000000B, 0x0004003B, 0x0000000C, 0x0000000D, 0x00000000, 0x00040017, 0x0000000F, 0x00000006, 0x00000002, 0x00040020, 0x00000010, 0x00000001, 0x0000000F, 0x0004003B, 0x00000010, 0x00000011, 0x00000001, 0x0003001E, 0x00000016, 0x00000007, 0x00040020, 0x00000017, 0x00000002, 0x00000016, 0x0004003B, 0x00000017, 0x00000018, 0x00000002, 0x00040015, 0x00000019, 0x00000020, 0x00000001, 0x0004002B, 0x00000019, 0x0000001A, 0x00000000, 0x00040020, 0x0000001B, 0x00000002, 0x00000007, 0x00040020, 0x0000001F, 0x00000003, 0x00000007, 0x0004003B, 0x0000001F, 0x00000020, 0x00000003, 0x00050036, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000200F8, 0x00000005, 0x0004003B, 0x00000008, 0x00000009, 0x00000007, 0x0004003B, 0x00000008, 0x00000014, 0x00000007, 0x0004003D, 0x0000000B, 0x0000000E, 0x0000000D, 0x0004003D, 0x0000000F, 0x00000012, 0x00000011, 0x00050057, 0x00000007, 0x00000013, 0x0000000E, 0x00000012, 0x0003003E, 0x00000009, 0x00000013, 0x0004003D, 0x00000007, 0x00000015, 0x00000009, 0x00050041, 0x0000001B, 0x0000001C, 0x00000018, 0x0000001A, 0x0004003D, 0x00000007, 0x0000001D, 0x0000001C, 0x00050085, 0x00000007, 0x0000001E, 0x00000015, 0x0000001D, 0x0003003E, 0x00000014, 0x0000001E, 0x0004003D, 0x00000007, 0x00000021, 0x00000014, 0x0003003E, 0x00000020, 0x00000021, 0x000100FD, 0x00010038 } );
	//descr.Fragment().FuncSW( &SWShaderLang::default2_fs );

};
};
