// This is generated file
// Origin file: 'd:\projects\activeprojects\p034_engine2\external\pipelinecompiler\tests\pipelines\default.cpp'
// Created at: 2017/10/17 - 12:23:35

#include "all_pipelines.h"

namespace Pipelines
{

void Create_default (PipelineTemplateDescriptor& descr)
{
	descr = PipelineTemplateDescriptor();
	// RenderState
	descr.renderState = RenderState();
	// InputAssemblyState
	descr.renderState.inputAssembly.topology         = EPrimitive::TriangleList;
	descr.renderState.inputAssembly.primitiveRestart = false;

	descr.dynamicStates = EPipelineDynamicState::bits() | EPipelineDynamicState::Viewport | EPipelineDynamicState::Scissor;
	descr.supportedShaders = EShader::bits() | EShader::Vertex | EShader::Fragment;
	descr.supportedPrimitives = EPrimitive::bits() | EPrimitive::TriangleList;

	descr.layout = PipelineLayoutDescriptor::Builder()
			.AddTexture( "un_ColorTexture", EImage::Tex2D, EPixelFormatClass::RGBA | EPixelFormatClass::LinearColorSpace | EPixelFormatClass::AnyFloat | EPixelFormatClass::AnyNorm, 0, 0, EShader::bits() | EShader::Fragment )
	.Finish();

	descr.Vertex().StringGLSL( 
R"#(#version 450 core
// LunarGOO output
#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_ARB_separate_shader_objects : enable
out gl_PerVertex {
	vec4 gl_Position;
	float gl_PointSize;
	float gl_ClipDistance[1];
	float gl_CullDistance[1];
} ;
layout(location=1) out vec3 v_Color;
layout(location=0) out vec2 v_Texcoord;
const vec3 C_txdkqe1[3] = vec3[3](vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0));
const vec2 C_m32npq[3] = vec2[3](vec2(0.0, -0.5), vec2(0.5), vec2(-0.5, 0.5));
const float C_0d0 = 0.0;
const float C_1d0 = 1.0;
const vec2 C_vec2p0d5p = vec2(0.5);

void main()
{
	vec4 H_ofyi3v = vec4(C_m32npq[gl_VertexID].x, C_m32npq[gl_VertexID].y, C_0d0, C_1d0);
	gl_Position = H_ofyi3v;
	v_Color = C_txdkqe1[gl_VertexID];
	vec2 v_Texcoord1 = C_m32npq[gl_VertexID] + C_vec2p0d5p;
	v_Texcoord = v_Texcoord1;
	
}
)#"_ref );
	descr.Vertex().ArraySPIRV( 
{ 0x07230203, 0x00010000, 0x00080001, 0x00000046, 0x00000000, 0x00020011, 0x00000001, 0x0006000B, 0x00000001, 0x4C534C47, 0x6474732E, 0x3035342E, 0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0009000F, 0x00000000, 0x00000004, 0x6E69616D, 0x00000000, 0x00000017, 0x00000029, 0x00000030, 0x00000044, 0x00030003, 0x00000002, 0x000001C2, 0x00070004, 0x415F4C47, 0x675F4252, 0x735F7570, 0x65646168, 0x6E695F72, 0x00343674, 0x00090004, 0x415F4C47, 0x735F4252, 0x72617065, 0x5F657461, 0x64616873, 0x6F5F7265, 0x63656A62, 0x00007374, 0x00040005, 0x00000004, 0x6E69616D, 0x00000000, 0x00050005, 0x00000009, 0x666F5F48, 0x76336979, 0x00000000, 0x00060005, 0x00000017, 0x565F6C67, 0x65747265, 0x646E4978, 0x00007865, 0x00050005, 0x0000001B, 0x65646E69, 0x6C626178, 0x00000065, 0x00050005, 0x00000021, 0x65646E69, 0x6C626178, 0x00000065, 0x00060005, 0x00000027, 0x505F6C67, 0x65567265, 0x78657472, 0x00000000, 0x00060006, 0x00000027, 0x00000000, 0x505F6C67, 0x7469736F, 0x006E6F69, 0x00070006, 0x00000027, 0x00000001, 0x505F6C67, 0x746E696F, 0x657A6953, 0x00000000, 0x00070006, 0x00000027, 0x00000002, 0x435F6C67, 0x4470696C, 0x61747369, 0x0065636E, 0x00070006, 0x00000027, 0x00000003, 0x435F6C67, 0x446C6C75, 0x61747369, 0x0065636E, 0x00030005, 0x00000029, 0x00000000, 0x00040005, 0x00000030, 0x6F435F76, 0x00726F6C, 0x00050005, 0x00000038, 0x65646E69, 0x6C626178, 0x00000065, 0x00050005, 0x0000003D, 0x65545F76, 0x6F6F6378, 0x00316472, 0x00050005, 0x0000003F, 0x65646E69, 0x6C626178, 0x00000065, 0x00050005, 0x00000044, 0x65545F76, 0x6F6F6378, 0x00006472, 0x00040047, 0x00000017, 0x0000000B, 0x0000002A, 0x00050048, 0x00000027, 0x00000000, 0x0000000B, 0x00000000, 0x00050048, 0x00000027, 0x00000001, 0x0000000B, 0x00000001, 0x00050048, 0x00000027, 0x00000002, 0x0000000B, 0x00000003, 0x00050048, 0x00000027, 0x00000003, 0x0000000B, 0x00000004, 0x00030047, 0x00000027, 0x00000002, 0x00040047, 0x00000030, 0x0000001E, 0x00000001, 0x00040047, 0x00000044, 0x0000001E, 0x00000000, 0x00020013, 0x00000002, 0x00030021, 0x00000003, 0x00000002, 0x00030016, 0x00000006, 0x00000020, 0x00040017, 0x00000007, 0x00000006, 0x00000004, 0x00040020, 0x00000008, 0x00000007, 0x00000007, 0x00040017, 0x0000000A, 0x00000006, 0x00000002, 0x00040015, 0x0000000B, 0x00000020, 0x00000000, 0x0004002B, 0x0000000B, 0x0000000C, 0x00000003, 0x0004001C, 0x0000000D, 0x0000000A, 0x0000000C, 0x0004002B, 0x00000006, 0x0000000E, 0x00000000, 0x0004002B, 0x00000006, 0x0000000F, 0xBF000000, 0x0005002C, 0x0000000A, 0x00000010, 0x0000000E, 0x0000000F, 0x0004002B, 0x00000006, 0x00000011, 0x3F000000, 0x0005002C, 0x0000000A, 0x00000012, 0x00000011, 0x00000011, 0x0005002C, 0x0000000A, 0x00000013, 0x0000000F, 0x00000011, 0x0006002C, 0x0000000D, 0x00000014, 0x00000010, 0x00000012, 0x00000013, 0x00040015, 0x00000015, 0x00000020, 0x00000001, 0x00040020, 0x00000016, 0x00000001, 0x00000015, 0x0004003B, 0x00000016, 0x00000017, 0x00000001, 0x0004002B, 0x0000000B, 0x00000019, 0x00000000, 0x00040020, 0x0000001A, 0x00000007, 0x0000000D, 0x00040020, 0x0000001C, 0x00000007, 0x00000006, 0x0004002B, 0x0000000B, 0x00000020, 0x00000001, 0x0004002B, 0x00000006, 0x00000024, 0x3F800000, 0x0004001C, 0x00000026, 0x00000006, 0x00000020, 0x0006001E, 0x00000027, 0x00000007, 0x00000006, 0x00000026, 0x00000026, 0x00040020, 0x00000028, 0x00000003, 0x00000027, 0x0004003B, 0x00000028, 0x00000029, 0x00000003, 0x0004002B, 0x00000015, 0x0000002A, 0x00000000, 0x00040020, 0x0000002C, 0x00000003, 0x00000007, 0x00040017, 0x0000002E, 0x00000006, 0x00000003, 0x00040020, 0x0000002F, 0x00000003, 0x0000002E, 0x0004003B, 0x0000002F, 0x00000030, 0x00000003, 0x0004001C, 0x00000031, 0x0000002E, 0x0000000C, 0x0006002C, 0x0000002E, 0x00000032, 0x00000024, 0x0000000E, 0x0000000E, 0x0006002C, 0x0000002E, 0x00000033, 0x0000000E, 0x00000024, 0x0000000E, 0x0006002C, 0x0000002E, 0x00000034, 0x0000000E, 0x0000000E, 0x00000024, 0x0006002C, 0x00000031, 0x00000035, 0x00000032, 0x00000033, 0x00000034, 0x00040020, 0x00000037, 0x00000007, 0x00000031, 0x00040020, 0x00000039, 0x00000007, 0x0000002E, 0x00040020, 0x0000003C, 0x00000007, 0x0000000A, 0x00040020, 0x00000043, 0x00000003, 0x0000000A, 0x0004003B, 0x00000043, 0x00000044, 0x00000003, 0x00050036, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000200F8, 0x00000005, 0x0004003B, 0x00000008, 0x00000009, 0x00000007, 0x0004003B, 0x0000001A, 0x0000001B, 0x00000007, 0x0004003B, 0x0000001A, 0x00000021, 0x00000007, 0x0004003B, 0x00000037, 0x00000038, 0x00000007, 0x0004003B, 0x0000003C, 0x0000003D, 0x00000007, 0x0004003B, 0x0000001A, 0x0000003F, 0x00000007, 0x0004003D, 0x00000015, 0x00000018, 0x00000017, 0x0003003E, 0x0000001B, 0x00000014, 0x00060041, 0x0000001C, 0x0000001D, 0x0000001B, 0x00000018, 0x00000019, 0x0004003D, 0x00000006, 0x0000001E, 0x0000001D, 0x0004003D, 0x00000015, 0x0000001F, 0x00000017, 0x0003003E, 0x00000021, 0x00000014, 0x00060041, 0x0000001C, 0x00000022, 0x00000021, 0x0000001F, 0x00000020, 0x0004003D, 0x00000006, 0x00000023, 0x00000022, 0x00070050, 0x00000007, 0x00000025, 0x0000001E, 0x00000023, 0x0000000E, 0x00000024, 0x0003003E, 0x00000009, 0x00000025, 0x0004003D, 0x00000007, 0x0000002B, 0x00000009, 0x00050041, 0x0000002C, 0x0000002D, 0x00000029, 0x0000002A, 0x0003003E, 0x0000002D, 0x0000002B, 0x0004003D, 0x00000015, 0x00000036, 0x00000017, 0x0003003E, 0x00000038, 0x00000035, 0x00050041, 0x00000039, 0x0000003A, 0x00000038, 0x00000036, 0x0004003D, 0x0000002E, 0x0000003B, 0x0000003A, 0x0003003E, 0x00000030, 0x0000003B, 0x0004003D, 0x00000015, 0x0000003E, 0x00000017, 0x0003003E, 0x0000003F, 0x00000014, 0x00050041, 0x0000003C, 0x00000040, 0x0000003F, 0x0000003E, 0x0004003D, 0x0000000A, 0x00000041, 0x00000040, 0x00050081, 0x0000000A, 0x00000042, 0x00000041, 0x00000012, 0x0003003E, 0x0000003D, 0x00000042, 0x0004003D, 0x0000000A, 0x00000045, 0x0000003D, 0x0003003E, 0x00000044, 0x00000045, 0x000100FD, 0x00010038 } );

	descr.fragOutput = FragmentOutputState()
			.Add( "out_Color", EFragOutput::Float4, 0 );

	descr.Fragment().StringGLSL( 
R"#(#version 450 core
// LunarGOO output
#extension GL_ARB_gpu_shader_int64 : enable
#extension GL_ARB_separate_shader_objects : enable
layout(binding=0) uniform sampler2D un_ColorTexture;
layout(location=0) in vec2 v_Texcoord;
layout(location=1) in vec3 v_Color;
layout(location=0) out vec4 out_Color;
const float C_1d0 = 1.0;

void main()
{
	vec4 out_Color1 = texture(un_ColorTexture, v_Texcoord);
	vec4 H_0n2d7f = vec4(v_Color.x, v_Color.y, v_Color.z, C_1d0);
	vec4 out_Color2 = H_0n2d7f * out_Color1;
	out_Color = out_Color2;
	
}
)#"_ref );
	descr.Fragment().ArraySPIRV( 
{ 0x07230203, 0x00010000, 0x00080001, 0x0000002C, 0x00000000, 0x00020011, 0x00000001, 0x0006000B, 0x00000001, 0x4C534C47, 0x6474732E, 0x3035342E, 0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0008000F, 0x00000004, 0x00000004, 0x6E69616D, 0x00000000, 0x00000011, 0x00000017, 0x0000002A, 0x00030010, 0x00000004, 0x00000007, 0x00030003, 0x00000002, 0x000001C2, 0x00070004, 0x415F4C47, 0x675F4252, 0x735F7570, 0x65646168, 0x6E695F72, 0x00343674, 0x00090004, 0x415F4C47, 0x735F4252, 0x72617065, 0x5F657461, 0x64616873, 0x6F5F7265, 0x63656A62, 0x00007374, 0x00040005, 0x00000004, 0x6E69616D, 0x00000000, 0x00050005, 0x00000009, 0x5F74756F, 0x6F6C6F43, 0x00003172, 0x00060005, 0x0000000D, 0x435F6E75, 0x726F6C6F, 0x74786554, 0x00657275, 0x00050005, 0x00000011, 0x65545F76, 0x6F6F6378, 0x00006472, 0x00050005, 0x00000014, 0x6E305F48, 0x66376432, 0x00000000, 0x00040005, 0x00000017, 0x6F435F76, 0x00726F6C, 0x00050005, 0x00000025, 0x5F74756F, 0x6F6C6F43, 0x00003272, 0x00050005, 0x0000002A, 0x5F74756F, 0x6F6C6F43, 0x00000072, 0x00040047, 0x0000000D, 0x00000022, 0x00000000, 0x00040047, 0x0000000D, 0x00000021, 0x00000000, 0x00040047, 0x00000011, 0x0000001E, 0x00000000, 0x00040047, 0x00000017, 0x0000001E, 0x00000001, 0x00040047, 0x0000002A, 0x0000001E, 0x00000000, 0x00020013, 0x00000002, 0x00030021, 0x00000003, 0x00000002, 0x00030016, 0x00000006, 0x00000020, 0x00040017, 0x00000007, 0x00000006, 0x00000004, 0x00040020, 0x00000008, 0x00000007, 0x00000007, 0x00090019, 0x0000000A, 0x00000006, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x0003001B, 0x0000000B, 0x0000000A, 0x00040020, 0x0000000C, 0x00000000, 0x0000000B, 0x0004003B, 0x0000000C, 0x0000000D, 0x00000000, 0x00040017, 0x0000000F, 0x00000006, 0x00000002, 0x00040020, 0x00000010, 0x00000001, 0x0000000F, 0x0004003B, 0x00000010, 0x00000011, 0x00000001, 0x00040017, 0x00000015, 0x00000006, 0x00000003, 0x00040020, 0x00000016, 0x00000001, 0x00000015, 0x0004003B, 0x00000016, 0x00000017, 0x00000001, 0x00040015, 0x00000018, 0x00000020, 0x00000000, 0x0004002B, 0x00000018, 0x00000019, 0x00000000, 0x00040020, 0x0000001A, 0x00000001, 0x00000006, 0x0004002B, 0x00000018, 0x0000001D, 0x00000001, 0x0004002B, 0x00000018, 0x00000020, 0x00000002, 0x0004002B, 0x00000006, 0x00000023, 0x3F800000, 0x00040020, 0x00000029, 0x00000003, 0x00000007, 0x0004003B, 0x00000029, 0x0000002A, 0x00000003, 0x00050036, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000200F8, 0x00000005, 0x0004003B, 0x00000008, 0x00000009, 0x00000007, 0x0004003B, 0x00000008, 0x00000014, 0x00000007, 0x0004003B, 0x00000008, 0x00000025, 0x00000007, 0x0004003D, 0x0000000B, 0x0000000E, 0x0000000D, 0x0004003D, 0x0000000F, 0x00000012, 0x00000011, 0x00050057, 0x00000007, 0x00000013, 0x0000000E, 0x00000012, 0x0003003E, 0x00000009, 0x00000013, 0x00050041, 0x0000001A, 0x0000001B, 0x00000017, 0x00000019, 0x0004003D, 0x00000006, 0x0000001C, 0x0000001B, 0x00050041, 0x0000001A, 0x0000001E, 0x00000017, 0x0000001D, 0x0004003D, 0x00000006, 0x0000001F, 0x0000001E, 0x00050041, 0x0000001A, 0x00000021, 0x00000017, 0x00000020, 0x0004003D, 0x00000006, 0x00000022, 0x00000021, 0x00070050, 0x00000007, 0x00000024, 0x0000001C, 0x0000001F, 0x00000022, 0x00000023, 0x0003003E, 0x00000014, 0x00000024, 0x0004003D, 0x00000007, 0x00000026, 0x00000014, 0x0004003D, 0x00000007, 0x00000027, 0x00000009, 0x00050085, 0x00000007, 0x00000028, 0x00000026, 0x00000027, 0x0003003E, 0x00000025, 0x00000028, 0x0004003D, 0x00000007, 0x0000002B, 0x00000025, 0x0003003E, 0x0000002A, 0x0000002B, 0x000100FD, 0x00010038 } );

};
};
