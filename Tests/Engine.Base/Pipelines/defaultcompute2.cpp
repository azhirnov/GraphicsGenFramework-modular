// This is generated file
// Origin file: 'Engine.Base\Pipelines/DefaultCompute2.ppln'
// Created at: 2018/04/26 - 11:17:14

#include "all_pipelines.h"

namespace Pipelines
{

void Create_defaultcompute2 (PipelineTemplateDescriptor& descr)
{
	descr = PipelineTemplateDescriptor();
	descr.supportedShaders = EShader::Compute;

	descr.localGroupSize = uint3(1, 1, 1);
	descr.layout = PipelineLayoutDescriptor::Builder()
			.AddImage( "un_OutImage", EImage::Tex2D, EPixelFormat::RGBA8_UNorm, EShaderMemoryModel::WriteOnly, 0, 0, EShader::Compute )
			.Finish();

	descr.Compute().StringGLSL( 
R"#(#version 450 core


#define SH_VERTEX           (1<<0)
#define SH_TESS_CONTROL     (1<<1)
#define SH_TESS_EVALUATION  (1<<2)
#define SH_GEOMETRY         (1<<3)
#define SH_FRAGMENT         (1<<4)
#define SH_COMPUTE          (1<<5)

#ifdef GL_ARB_gpu_shader_int64
#extension GL_ARB_gpu_shader_int64 : require
//#define ARB_gpu_shader_int64_enabled  1
#endif

// for vulkan compatibility
#ifdef GL_ARB_separate_shader_objects
#extension GL_ARB_separate_shader_objects : enable
#define ARB_separate_shader_objects_enabled  1
#endif

#define bool2		bvec2
#define bool3		bvec3
#define bool4		bvec4

#define int2		ivec2
#define int3		ivec3
#define int4		ivec4

#define uint2		uvec2
#define uint3		uvec3
#define uint4		uvec4

#ifdef ARB_gpu_shader_int64_enabled
# define ilong		int64_t
# define ilong2		i64vec2
# define ilong3		i64vec3
# define ilong4		i64vec4
# define ulong		uint64_t
# define ulong2		u64vec2
# define ulong3		u64vec3
# define ulong4		u64vec4
#endif // ARB_gpu_shader_int64_enabled

#define float2		vec2
#define float3		vec3
#define float4		vec4
			
#define float2x2	mat2x2
#define float2x3	mat2x3
#define float2x4	mat2x4
#define float3x2	mat3x2
#define float3x3	mat3x3
#define float3x4	mat3x4
#define float4x2	mat4x2
#define float4x3	mat4x3
#define float4x4	mat4x4

#define double2		dvec2
#define double3		dvec3
#define double4		dvec4
			
#define double2x2	dmat2x2
#define double2x3	dmat2x3
#define double2x4	dmat2x4
#define double3x2	dmat3x2
#define double3x3	dmat3x3
#define double3x4	dmat3x4
#define double4x2	dmat4x2
#define double4x3	dmat4x3
#define double4x4	dmat4x4

#ifdef VULKAN
#define PUSH_CONSTANT( _name_ )	layout (std140, push_constant) uniform _name_
#else
#define PUSH_CONSTANT( _name_ )	layout (std140) uniform pushConst_##_name_
#endif
		
#define SHADER	SH_COMPUTE


layout(binding=0) layout(rgba8) writeonly uniform image2D un_OutImage;


layout (local_size_x=1, local_size_y=1, local_size_z=1) in;

float iTime;
vec2 iResolution;

//---------------------------------

float shade(in vec2 uv, in float t);
vec3 color(in float grad);
float rand(in vec2 n);
float noise(in vec2 n);
vec3 ramp(in float t);
vec2 polarMap(in vec2 uv, in float shift, in float inner);
float fire(in vec2 n);
void mainImage(out vec4 fragColor, in vec2 fragCoord);

//---------------------------------

float rand(in vec2 n)
{
	return fract( (sin( dot( n, vec2( 12.98980045f, 12.14140034f ) ) ) * float( 83758.546875f )) );
}


float noise(in vec2 n)
{
	vec2 b = floor( n );
	;
	vec2 f = smoothstep( vec2( 0.0f ), vec2( 1.0f ), fract( n ) );
	;
	return mix( mix( rand(b), rand((b + vec2( 1.0f, 0.0f ))), f.x ), mix( rand((b + vec2( 0.0f, 1.0f ))), rand((b + vec2( 1.0f ))), f.x ), f.y );
}


vec3 ramp(in float t)
{
	return ( ((t <= float( 0.5f ))) ? ((vec3( (float( 1.0f ) - (t * float( 1.39999998f ))), float( 0.2f ), float( 1.04999995f ) ) / t)) : ((vec3( ((float( 0.30000001f ) * (float( 1.0f ) - t)) * float( 2.0f )), float( 0.2f ), float( 1.04999995f ) ) / t)) );
}


vec2 polarMap(in vec2 uv, in float shift, in float inner)
{
	uv = (vec2( 0.5f ) - uv);
	float px = ((float( 1.0f ) - fract( ((atan( uv.y, uv.x ) / float( 6.28000021f )) + float( 0.25f )) )) + shift);
	;
	float py = (((sqrt( ((uv.x * uv.x) + (uv.y * uv.y)) ) * (float( 1.0f ) + (inner * float( 2.0f )))) - inner) * float( 2.0f ));
	;
	return vec2( px, py );
}


float fire(in vec2 n)
{
	return ((noise(n) + (noise((n * float( 2.0999999f ))) * float( 0.60000002f ))) + (noise((n * float( 5.4000001f ))) * float( 0.41999999f )));
}


float shade(in vec2 uv, in float t)
{
	(uv.x += ( ((uv.y < float( 0.5f ))) ? ((float( 23.0f ) + (t * float( 0.035f )))) : ((float( -11.0f ) + (t * float( 0.03f )))) ));
	uv.y = abs( (uv.y - float( 0.5f )) );
	(uv.x *= float( 35.0f ));
	float q = (fire((uv - (t * float( 0.013f )))) / float( 2.0f ));
	;
	vec2 r = vec2( fire(((((uv + (q / float( 2.0f ))) + t) - uv.x) - uv.y)), fire(((uv + q) - t)) );
	;
	return pow( (((r.y + r.y) * max( float( 0.0f ), uv.y )) + float( 0.1f )), float( 4.0f ) );
}


vec3 color(in float grad)
{
	float m2 = float( 0.15000001f );
	;
	grad = sqrt( grad );
	vec3 color = vec3( 0.10339016f, 0.14679761f, 0.13616373f );
	;
	vec3 color2 = color;
	;
	color = ramp(grad);
	(color /= (m2 + max( vec3( 0.0f ), color )));
	return color;
}


void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
	float m1 = float( 1.60000002f );
	;
	float t = iTime;
	;
	vec2 uv = (fragCoord / iResolution.yy);
	;
	float ff = (float( 1.0f ) - uv.y);
	;
	(uv.x -= (((iResolution.x / iResolution.y) - float( 1.0f )) / float( 2.0f )));
	vec2 uv2 = uv;
	;
	uv2.y = (float( 1.0f ) - uv2.y);
	uv = polarMap(uv, float( 1.29999995f ), m1);
	uv2 = polarMap(uv2, float( 1.89999998f ), m1);
	vec3 c1 = (color(shade(uv, t)) * ff);
	;
	vec3 c2 = (color(shade(uv2, t)) * (float( 1.0f ) - ff));
	;
	fragColor = vec4( (c1 + c2), float( 1.0f ) );
}


void main()
{
	iTime = float( 1.0f );
	iResolution = vec2( (uvec3( 1U ) * gl_NumWorkGroups).xy );
	vec2 fragCoord = vec2( gl_GlobalInvocationID.xy );
	;
	vec4 fragColor;
	mainImage(fragColor, fragCoord);
	imageStore( un_OutImage, ivec2( gl_GlobalInvocationID.xy ), fragColor );
}



)#"_str );
	descr.Compute().ArraySPIRV({ 
0x07230203, 0x00010000, 0x00080006, 0x0000019C, 0x00000000, 0x00020011, 0x00000001, 0x0006000B, 0x00000002, 0x4C534C47, 0x6474732E, 0x3035342E, 
0x00000000, 0x0003000E, 0x00000000, 0x00000001, 0x0007000F, 0x00000005, 0x00000005, 0x6E69616D, 0x00000000, 0x00000181, 0x00000188, 0x00060010, 
0x00000005, 0x00000011, 0x00000001, 0x00000001, 0x00000001, 0x00030007, 0x00000001, 0x00000000, 0x002D0003, 0x00000002, 0x000001C2, 0x00000001, 
0x4F202F2F, 0x646F4D70, 0x50656C75, 0x65636F72, 0x64657373, 0x746E6520, 0x702D7972, 0x746E696F, 0x69616D20, 0x2F2F0A6E, 0x4D704F20, 0x6C75646F, 
0x6F725065, 0x73736563, 0x63206465, 0x6E65696C, 0x706F2074, 0x6C676E65, 0x0A303031, 0x4F202F2F, 0x646F4D70, 0x50656C75, 0x65636F72, 0x64657373, 
0x72617420, 0x2D746567, 0x20766E65, 0x6E65706F, 0x2F0A6C67, 0x704F202F, 0x75646F4D, 0x7250656C, 0x7365636F, 0x20646573, 0x72746E65, 0x6F702D79, 
0x20746E69, 0x6E69616D, 0x696C230A, 0x3120656E, 0x0000000A, 0x00070004, 0x415F4C47, 0x675F4252, 0x735F7570, 0x65646168, 0x6E695F72, 0x00343674, 
0x00090004, 0x415F4C47, 0x735F4252, 0x72617065, 0x5F657461, 0x64616873, 0x6F5F7265, 0x63656A62, 0x00007374, 0x00040005, 0x00000005, 0x6E69616D, 
0x00000000, 0x00050005, 0x0000000C, 0x646E6172, 0x32667628, 0x0000003B, 0x00030005, 0x0000000B, 0x0000006E, 0x00050005, 0x0000000F, 0x73696F6E, 
0x66762865, 0x00003B32, 0x00030005, 0x0000000E, 0x0000006E, 0x00050005, 0x00000015, 0x706D6172, 0x3B316628, 0x00000000, 0x00030005, 0x00000014, 
0x00000074, 0x00070005, 0x0000001B, 0x616C6F70, 0x70614D72, 0x32667628, 0x3B31663B, 0x003B3166, 0x00030005, 0x00000018, 0x00007675, 0x00040005, 
0x00000019, 0x66696873, 0x00000074, 0x00040005, 0x0000001A, 0x656E6E69, 0x00000072, 0x00050005, 0x0000001E, 0x65726966, 0x32667628, 0x0000003B, 
0x00030005, 0x0000001D, 0x0000006E, 0x00060005, 0x00000023, 0x64616873, 0x66762865, 0x31663B32, 0x0000003B, 0x00030005, 0x00000021, 0x00007675, 
0x00030005, 0x00000022, 0x00000074, 0x00050005, 0x00000026, 0x6F6C6F63, 0x31662872, 0x0000003B, 0x00040005, 0x00000025, 0x64617267, 0x00000000, 
0x00070005, 0x0000002D, 0x6E69616D, 0x67616D49, 0x66762865, 0x66763B34, 0x00003B32, 0x00050005, 0x0000002B, 0x67617266, 0x6F6C6F43, 0x00000072, 
0x00050005, 0x0000002C, 0x67617266, 0x726F6F43, 0x00000064, 0x00030005, 0x0000003A, 0x00000062, 0x00030005, 0x0000003D, 0x00000066, 0x00040005, 
0x00000045, 0x61726170, 0x0000006D, 0x00040005, 0x0000004B, 0x61726170, 0x0000006D, 0x00040005, 0x00000055, 0x61726170, 0x0000006D, 0x00040005, 
0x00000059, 0x61726170, 0x0000006D, 0x00030005, 0x00000087, 0x00007870, 0x00030005, 0x00000095, 0x00007970, 0x00040005, 0x000000AE, 0x61726170, 
0x0000006D, 0x00040005, 0x000000B4, 0x61726170, 0x0000006D, 0x00040005, 0x000000BC, 0x61726170, 0x0000006D, 0x00030005, 0x000000E3, 0x00000071, 
0x00040005, 0x000000EA, 0x61726170, 0x0000006D, 0x00030005, 0x000000ED, 0x00000072, 0x00040005, 0x000000FE, 0x61726170, 0x0000006D, 0x00040005, 
0x00000107, 0x61726170, 0x0000006D, 0x00030005, 0x00000119, 0x0000326D, 0x00040005, 0x0000011D, 0x6F6C6F63, 0x00000072, 0x00040005, 0x00000122, 
0x6F6C6F63, 0x00003272, 0x00040005, 0x00000124, 0x61726170, 0x0000006D, 0x00030005, 0x00000132, 0x0000316D, 0x00030005, 0x00000134, 0x00000074, 
0x00040005, 0x00000136, 0x6D695469, 0x00000065, 0x00030005, 0x00000138, 0x00007675, 0x00050005, 0x0000013B, 0x73655269, 0x74756C6F, 0x006E6F69, 
0x00030005, 0x0000013F, 0x00006666, 0x00030005, 0x0000014E, 0x00327675, 0x00040005, 0x00000155, 0x61726170, 0x0000006D, 0x00040005, 0x00000157, 
0x61726170, 0x0000006D, 0x00040005, 0x00000158, 0x61726170, 0x0000006D, 0x00040005, 0x0000015C, 0x61726170, 0x0000006D, 0x00040005, 0x0000015E, 
0x61726170, 0x0000006D, 0x00040005, 0x0000015F, 0x61726170, 0x0000006D, 0x00030005, 0x00000162, 0x00003163, 0x00040005, 0x00000163, 0x61726170, 
0x0000006D, 0x00040005, 0x00000165, 0x61726170, 0x0000006D, 0x00040005, 0x00000168, 0x61726170, 0x0000006D, 0x00030005, 0x0000016C, 0x00003263, 
0x00040005, 0x0000016D, 0x61726170, 0x0000006D, 0x00040005, 0x0000016F, 0x61726170, 0x0000006D, 0x00040005, 0x00000172, 0x61726170, 0x0000006D, 
0x00070005, 0x00000181, 0x4E5F6C67, 0x6F576D75, 0x72476B72, 0x7370756F, 0x00000000, 0x00050005, 0x00000187, 0x67617266, 0x726F6F43, 0x00000064, 
0x00080005, 0x00000188, 0x475F6C67, 0x61626F6C, 0x766E496C, 0x7461636F, 0x496E6F69, 0x00000044, 0x00050005, 0x0000018C, 0x67617266, 0x6F6C6F43, 
0x00000072, 0x00040005, 0x0000018D, 0x61726170, 0x0000006D, 0x00040005, 0x0000018E, 0x61726170, 0x0000006D, 0x00050005, 0x00000194, 0x4F5F6E75, 
0x6D497475, 0x00656761, 0x00040047, 0x00000181, 0x0000000B, 0x00000018, 0x00040047, 0x00000188, 0x0000000B, 0x0000001C, 0x00040047, 0x00000194, 
0x00000022, 0x00000000, 0x00040047, 0x00000194, 0x00000021, 0x00000000, 0x00030047, 0x00000194, 0x00000019, 0x00020013, 0x00000003, 0x00030021, 
0x00000004, 0x00000003, 0x00030016, 0x00000007, 0x00000020, 0x00040017, 0x00000008, 0x00000007, 0x00000002, 0x00040020, 0x00000009, 0x00000007, 
0x00000008, 0x00040021, 0x0000000A, 0x00000007, 0x00000009, 0x00040020, 0x00000011, 0x00000007, 0x00000007, 0x00040017, 0x00000012, 0x00000007, 
0x00000003, 0x00040021, 0x00000013, 0x00000012, 0x00000011, 0x00060021, 0x00000017, 0x00000008, 0x00000009, 0x00000011, 0x00000011, 0x00050021, 
0x00000020, 0x00000007, 0x00000009, 0x00000011, 0x00040017, 0x00000028, 0x00000007, 0x00000004, 0x00040020, 0x00000029, 0x00000007, 0x00000028, 
0x00050021, 0x0000002A, 0x00000003, 0x00000029, 0x00000009, 0x0004002B, 0x00000007, 0x00000030, 0x414FD639, 0x0004002B, 0x00000007, 0x00000031, 
0x4142432D, 0x0005002C, 0x00000008, 0x00000032, 0x00000030, 0x00000031, 0x0004002B, 0x00000007, 0x00000035, 0x47A39746, 0x0004002B, 0x00000007, 
0x0000003E, 0x00000000, 0x0005002C, 0x00000008, 0x0000003F, 0x0000003E, 0x0000003E, 0x0004002B, 0x00000007, 0x00000040, 0x3F800000, 0x0005002C, 
0x00000008, 0x00000041, 0x00000040, 0x00000040, 0x0005002C, 0x00000008, 0x00000049, 0x00000040, 0x0000003E, 0x00040015, 0x0000004D, 0x00000020, 
0x00000000, 0x0004002B, 0x0000004D, 0x0000004E, 0x00000000, 0x0005002C, 0x00000008, 0x00000053, 0x0000003E, 0x00000040, 0x0004002B, 0x0000004D, 
0x0000005E, 0x00000001, 0x0004002B, 0x00000007, 0x00000065, 0x3F000000, 0x00020014, 0x00000066, 0x00040020, 0x00000068, 0x00000007, 0x00000012, 
0x0004002B, 0x00000007, 0x0000006D, 0x3FB33333, 0x0004002B, 0x00000007, 0x00000070, 0x3E4CCCCD, 0x0004002B, 0x00000007, 0x00000071, 0x3F866666, 
0x0004002B, 0x00000007, 0x00000077, 0x3E99999A, 0x0004002B, 0x00000007, 0x0000007B, 0x40000000, 0x0005002C, 0x00000008, 0x00000084, 0x00000065, 
0x00000065, 0x0004002B, 0x00000007, 0x0000008D, 0x40C8F5C3, 0x0004002B, 0x00000007, 0x0000008F, 0x3E800000, 0x0004002B, 0x00000007, 0x000000B2, 
0x40066666, 0x0004002B, 0x00000007, 0x000000B6, 0x3F19999A, 0x0004002B, 0x00000007, 0x000000BA, 0x40ACCCCD, 0x0004002B, 0x00000007, 0x000000BE, 
0x3ED70A3D, 0x0004002B, 0x00000007, 0x000000C9, 0x41B80000, 0x0004002B, 0x00000007, 0x000000CB, 0x3D0F5C29, 0x0004002B, 0x00000007, 0x000000CF, 
0xC1300000, 0x0004002B, 0x00000007, 0x000000D1, 0x3CF5C28F, 0x0004002B, 0x00000007, 0x000000DE, 0x420C0000, 0x0004002B, 0x00000007, 0x000000E6, 
0x3C54FDF4, 0x0004002B, 0x00000007, 0x00000113, 0x3DCCCCCD, 0x0004002B, 0x00000007, 0x00000115, 0x40800000, 0x0004002B, 0x00000007, 0x0000011A, 
0x3E19999A, 0x0004002B, 0x00000007, 0x0000011E, 0x3DD3BE38, 0x0004002B, 0x00000007, 0x0000011F, 0x3E16521D, 0x0004002B, 0x00000007, 0x00000120, 
0x3E0B6E81, 0x0006002C, 0x00000012, 0x00000121, 0x0000011E, 0x0000011F, 0x00000120, 0x0006002C, 0x00000012, 0x00000128, 0x0000003E, 0x0000003E, 
0x0000003E, 0x0004002B, 0x00000007, 0x00000133, 0x3FCCCCCD, 0x00040020, 0x00000135, 0x00000006, 0x00000007, 0x0004003B, 0x00000135, 0x00000136, 
0x00000006, 0x00040020, 0x0000013A, 0x00000006, 0x00000008, 0x0004003B, 0x0000013A, 0x0000013B, 0x00000006, 0x0004002B, 0x00000007, 0x00000154, 
0x3FA66666, 0x0004002B, 0x00000007, 0x0000015B, 0x3FF33333, 0x00040017, 0x0000017E, 0x0000004D, 0x00000003, 0x0006002C, 0x0000017E, 0x0000017F, 
0x0000005E, 0x0000005E, 0x0000005E, 0x00040020, 0x00000180, 0x00000001, 0x0000017E, 0x0004003B, 0x00000180, 0x00000181, 0x00000001, 0x00040017, 
0x00000184, 0x0000004D, 0x00000002, 0x0004003B, 0x00000180, 0x00000188, 0x00000001, 0x00090019, 0x00000192, 0x00000007, 0x00000001, 0x00000000, 
0x00000000, 0x00000000, 0x00000002, 0x00000004, 0x00040020, 0x00000193, 0x00000000, 0x00000192, 0x0004003B, 0x00000193, 0x00000194, 0x00000000, 
0x00040015, 0x00000198, 0x00000020, 0x00000001, 0x00040017, 0x00000199, 0x00000198, 0x00000002, 0x00050036, 0x00000003, 0x00000005, 0x00000000, 
0x00000004, 0x000200F8, 0x00000006, 0x0004003B, 0x00000009, 0x00000187, 0x00000007, 0x0004003B, 0x00000029, 0x0000018C, 0x00000007, 0x0004003B, 
0x00000029, 0x0000018D, 0x00000007, 0x0004003B, 0x00000009, 0x0000018E, 0x00000007, 0x00040008, 0x00000001, 0x000000C4, 0x00000000, 0x0003003E, 
0x00000136, 0x00000040, 0x00040008, 0x00000001, 0x000000C5, 0x00000000, 0x0004003D, 0x0000017E, 0x00000182, 0x00000181, 0x00050084, 0x0000017E, 
0x00000183, 0x0000017F, 0x00000182, 0x0007004F, 0x00000184, 0x00000185, 0x00000183, 0x00000183, 0x00000000, 0x00000001, 0x00040070, 0x00000008, 
0x00000186, 0x00000185, 0x0003003E, 0x0000013B, 0x00000186, 0x00040008, 0x00000001, 0x000000C6, 0x00000000, 0x0004003D, 0x0000017E, 0x00000189, 
0x00000188, 0x0007004F, 0x00000184, 0x0000018A, 0x00000189, 0x00000189, 0x00000000, 0x00000001, 0x00040070, 0x00000008, 0x0000018B, 0x0000018A, 
0x0003003E, 0x00000187, 0x0000018B, 0x00040008, 0x00000001, 0x000000C9, 0x00000000, 0x0004003D, 0x00000008, 0x0000018F, 0x00000187, 0x0003003E, 
0x0000018E, 0x0000018F, 0x00060039, 0x00000003, 0x00000190, 0x0000002D, 0x0000018D, 0x0000018E, 0x0004003D, 0x00000028, 0x00000191, 0x0000018D, 
0x0003003E, 0x0000018C, 0x00000191, 0x00040008, 0x00000001, 0x000000CA, 0x00000000, 0x0004003D, 0x00000192, 0x00000195, 0x00000194, 0x0004003D, 
0x0000017E, 0x00000196, 0x00000188, 0x0007004F, 0x00000184, 0x00000197, 0x00000196, 0x00000196, 0x00000000, 0x00000001, 0x0004007C, 0x00000199, 
0x0000019A, 0x00000197, 0x0004003D, 0x00000028, 0x0000019B, 0x0000018C, 0x00040063, 0x00000195, 0x0000019A, 0x0000019B, 0x000100FD, 0x00010038, 
0x00050036, 0x00000007, 0x0000000C, 0x00000000, 0x0000000A, 0x00030037, 0x00000009, 0x0000000B, 0x000200F8, 0x0000000D, 0x00040008, 0x00000001, 
0x00000069, 0x00000000, 0x0004003D, 0x00000008, 0x0000002F, 0x0000000B, 0x00050094, 0x00000007, 0x00000033, 0x0000002F, 0x00000032, 0x0006000C, 
0x00000007, 0x00000034, 0x00000002, 0x0000000D, 0x00000033, 0x00050085, 0x00000007, 0x00000036, 0x00000034, 0x00000035, 0x0006000C, 0x00000007, 
0x00000037, 0x00000002, 0x0000000A, 0x00000036, 0x000200FE, 0x00000037, 0x00010038, 0x00050036, 0x00000007, 0x0000000F, 0x00000000, 0x0000000A, 
0x00030037, 0x00000009, 0x0000000E, 0x000200F8, 0x00000010, 0x0004003B, 0x00000009, 0x0000003A, 0x00000007, 0x0004003B, 0x00000009, 0x0000003D, 
0x00000007, 0x0004003B, 0x00000009, 0x00000045, 0x00000007, 0x0004003B, 0x00000009, 0x0000004B, 0x00000007, 0x0004003B, 0x00000009, 0x00000055, 
0x00000007, 0x0004003B, 0x00000009, 0x00000059, 0x00000007, 0x00040008, 0x00000001, 0x0000006F, 0x00000000, 0x0004003D, 0x00000008, 0x0000003B, 
0x0000000E, 0x0006000C, 0x00000008, 0x0000003C, 0x00000002, 0x00000008, 0x0000003B, 0x0003003E, 0x0000003A, 0x0000003C, 0x00040008, 0x00000001, 
0x00000071, 0x00000000, 0x0004003D, 0x00000008, 0x00000042, 0x0000000E, 0x0006000C, 0x00000008, 0x00000043, 0x00000002, 0x0000000A, 0x00000042, 
0x0008000C, 0x00000008, 0x00000044, 0x00000002, 0x00000031, 0x0000003F, 0x00000041, 0x00000043, 0x0003003E, 0x0000003D, 0x00000044, 0x00040008, 
0x00000001, 0x00000073, 0x00000000, 0x0004003D, 0x00000008, 0x00000046, 0x0000003A, 0x0003003E, 0x00000045, 0x00000046, 0x00050039, 0x00000007, 
0x00000047, 0x0000000C, 0x00000045, 0x0004003D, 0x00000008, 0x00000048, 0x0000003A, 0x00050081, 0x00000008, 0x0000004A, 0x00000048, 0x00000049, 
0x0003003E, 0x0000004B, 0x0000004A, 0x00050039, 0x00000007, 0x0000004C, 0x0000000C, 0x0000004B, 0x00050041, 0x00000011, 0x0000004F, 0x0000003D, 
0x0000004E, 0x0004003D, 0x00000007, 0x00000050, 0x0000004F, 0x0008000C, 0x00000007, 0x00000051, 0x00000002, 0x0000002E, 0x00000047, 0x0000004C, 
0x00000050, 0x0004003D, 0x00000008, 0x00000052, 0x0000003A, 0x00050081, 0x00000008, 0x00000054, 0x00000052, 0x00000053, 0x0003003E, 0x00000055, 
0x00000054, 0x00050039, 0x00000007, 0x00000056, 0x0000000C, 0x00000055, 0x0004003D, 0x00000008, 0x00000057, 0x0000003A, 0x00050081, 0x00000008, 
0x00000058, 0x00000057, 0x00000041, 0x0003003E, 0x00000059, 0x00000058, 0x00050039, 0x00000007, 0x0000005A, 0x0000000C, 0x00000059, 0x00050041, 
0x00000011, 0x0000005B, 0x0000003D, 0x0000004E, 0x0004003D, 0x00000007, 0x0000005C, 0x0000005B, 0x0008000C, 0x00000007, 0x0000005D, 0x00000002, 
0x0000002E, 0x00000056, 0x0000005A, 0x0000005C, 0x00050041, 0x00000011, 0x0000005F, 0x0000003D, 0x0000005E, 0x0004003D, 0x00000007, 0x00000060, 
0x0000005F, 0x0008000C, 0x00000007, 0x00000061, 0x00000002, 0x0000002E, 0x00000051, 0x0000005D, 0x00000060, 0x000200FE, 0x00000061, 0x00010038, 
0x00050036, 0x00000012, 0x00000015, 0x00000000, 0x00000013, 0x00030037, 0x00000011, 0x00000014, 0x000200F8, 0x00000016, 0x0004003B, 0x00000068, 
0x00000069, 0x00000007, 0x00040008, 0x00000001, 0x00000079, 0x00000000, 0x0004003D, 0x00000007, 0x00000064, 0x00000014, 0x000500BC, 0x00000066, 
0x00000067, 0x00000064, 0x00000065, 0x000300F7, 0x0000006B, 0x00000000, 0x000400FA, 0x00000067, 0x0000006A, 0x00000076, 0x000200F8, 0x0000006A, 
0x0004003D, 0x00000007, 0x0000006C, 0x00000014, 0x00050085, 0x00000007, 0x0000006E, 0x0000006C, 0x0000006D, 0x00050083, 0x00000007, 0x0000006F, 
0x00000040, 0x0000006E, 0x00060050, 0x00000012, 0x00000072, 0x0000006F, 0x00000070, 0x00000071, 0x0004003D, 0x00000007, 0x00000073, 0x00000014, 
0x00060050, 0x00000012, 0x00000074, 0x00000073, 0x00000073, 0x00000073, 0x00050088, 0x00000012, 0x00000075, 0x00000072, 0x00000074, 0x0003003E, 
0x00000069, 0x00000075, 0x000200F9, 0x0000006B, 0x000200F8, 0x00000076, 0x0004003D, 0x00000007, 0x00000078, 0x00000014, 0x00050083, 0x00000007, 
0x00000079, 0x00000040, 0x00000078, 0x00050085, 0x00000007, 0x0000007A, 0x00000077, 0x00000079, 0x00050085, 0x00000007, 0x0000007C, 0x0000007A, 
0x0000007B, 0x00060050, 0x00000012, 0x0000007D, 0x0000007C, 0x00000070, 0x00000071, 0x0004003D, 0x00000007, 0x0000007E, 0x00000014, 0x00060050, 
0x00000012, 0x0000007F, 0x0000007E, 0x0000007E, 0x0000007E, 0x00050088, 0x00000012, 0x00000080, 0x0000007D, 0x0000007F, 0x0003003E, 0x00000069, 
0x00000080, 0x000200F9, 0x0000006B, 0x000200F8, 0x0000006B, 0x0004003D, 0x00000012, 0x00000081, 0x00000069, 0x000200FE, 0x00000081, 0x00010038, 
0x00050036, 0x00000008, 0x0000001B, 0x00000000, 0x00000017, 0x00030037, 0x00000009, 0x00000018, 0x00030037, 0x00000011, 0x00000019, 0x00030037, 
0x00000011, 0x0000001A, 0x000200F8, 0x0000001C, 0x0004003B, 0x00000011, 0x00000087, 0x00000007, 0x0004003B, 0x00000011, 0x00000095, 0x00000007, 
0x00040008, 0x00000001, 0x0000007F, 0x00000000, 0x0004003D, 0x00000008, 0x00000085, 0x00000018, 0x00050083, 0x00000008, 0x00000086, 0x00000084, 
0x00000085, 0x0003003E, 0x00000018, 0x00000086, 0x00040008, 0x00000001, 0x00000080, 0x00000000, 0x00050041, 0x00000011, 0x00000088, 0x00000018, 
0x0000005E, 0x0004003D, 0x00000007, 0x00000089, 0x00000088, 0x00050041, 0x00000011, 0x0000008A, 0x00000018, 0x0000004E, 0x0004003D, 0x00000007, 
0x0000008B, 0x0000008A, 0x0007000C, 0x00000007, 0x0000008C, 0x00000002, 0x00000019, 0x00000089, 0x0000008B, 0x00050088, 0x00000007, 0x0000008E, 
0x0000008C, 0x0000008D, 0x00050081, 0x00000007, 0x00000090, 0x0000008E, 0x0000008F, 0x0006000C, 0x00000007, 0x00000091, 0x00000002, 0x0000000A, 
0x00000090, 0x00050083, 0x00000007, 0x00000092, 0x00000040, 0x00000091, 0x0004003D, 0x00000007, 0x00000093, 0x00000019, 0x00050081, 0x00000007, 
0x00000094, 0x00000092, 0x00000093, 0x0003003E, 0x00000087, 0x00000094, 0x00040008, 0x00000001, 0x00000082, 0x00000000, 0x00050041, 0x00000011, 
0x00000096, 0x00000018, 0x0000004E, 0x0004003D, 0x00000007, 0x00000097, 0x00000096, 0x00050041, 0x00000011, 0x00000098, 0x00000018, 0x0000004E, 
0x0004003D, 0x00000007, 0x00000099, 0x00000098, 0x00050085, 0x00000007, 0x0000009A, 0x00000097, 0x00000099, 0x00050041, 0x00000011, 0x0000009B, 
0x00000018, 0x0000005E, 0x0004003D, 0x00000007, 0x0000009C, 0x0000009B, 0x00050041, 0x00000011, 0x0000009D, 0x00000018, 0x0000005E, 0x0004003D, 
0x00000007, 0x0000009E, 0x0000009D, 0x00050085, 0x00000007, 0x0000009F, 0x0000009C, 0x0000009E, 0x00050081, 0x00000007, 0x000000A0, 0x0000009A, 
0x0000009F, 0x0006000C, 0x00000007, 0x000000A1, 0x00000002, 0x0000001F, 0x000000A0, 0x0004003D, 0x00000007, 0x000000A2, 0x0000001A, 0x00050085, 
0x00000007, 0x000000A3, 0x000000A2, 0x0000007B, 0x00050081, 0x00000007, 0x000000A4, 0x00000040, 0x000000A3, 0x00050085, 0x00000007, 0x000000A5, 
0x000000A1, 0x000000A4, 0x0004003D, 0x00000007, 0x000000A6, 0x0000001A, 0x00050083, 0x00000007, 0x000000A7, 0x000000A5, 0x000000A6, 0x00050085, 
0x00000007, 0x000000A8, 0x000000A7, 0x0000007B, 0x0003003E, 0x00000095, 0x000000A8, 0x00040008, 0x00000001, 0x00000084, 0x00000000, 0x0004003D, 
0x00000007, 0x000000A9, 0x00000087, 0x0004003D, 0x00000007, 0x000000AA, 0x00000095, 0x00050050, 0x00000008, 0x000000AB, 0x000000A9, 0x000000AA, 
0x000200FE, 0x000000AB, 0x00010038, 0x00050036, 0x00000007, 0x0000001E, 0x00000000, 0x0000000A, 0x00030037, 0x00000009, 0x0000001D, 0x000200F8, 
0x0000001F, 0x0004003B, 0x00000009, 0x000000AE, 0x00000007, 0x0004003B, 0x00000009, 0x000000B4, 0x00000007, 0x0004003B, 0x00000009, 0x000000BC, 
0x00000007, 0x00040008, 0x00000001, 0x0000008A, 0x00000000, 0x0004003D, 0x00000008, 0x000000AF, 0x0000001D, 0x0003003E, 0x000000AE, 0x000000AF, 
0x00050039, 0x00000007, 0x000000B0, 0x0000000F, 0x000000AE, 0x0004003D, 0x00000008, 0x000000B1, 0x0000001D, 0x0005008E, 0x00000008, 0x000000B3, 
0x000000B1, 0x000000B2, 0x0003003E, 0x000000B4, 0x000000B3, 0x00050039, 0x00000007, 0x000000B5, 0x0000000F, 0x000000B4, 0x00050085, 0x00000007, 
0x000000B7, 0x000000B5, 0x000000B6, 0x00050081, 0x00000007, 0x000000B8, 0x000000B0, 0x000000B7, 0x0004003D, 0x00000008, 0x000000B9, 0x0000001D, 
0x0005008E, 0x00000008, 0x000000BB, 0x000000B9, 0x000000BA, 0x0003003E, 0x000000BC, 0x000000BB, 0x00050039, 0x00000007, 0x000000BD, 0x0000000F, 
0x000000BC, 0x00050085, 0x00000007, 0x000000BF, 0x000000BD, 0x000000BE, 0x00050081, 0x00000007, 0x000000C0, 0x000000B8, 0x000000BF, 0x000200FE, 
0x000000C0, 0x00010038, 0x00050036, 0x00000007, 0x00000023, 0x00000000, 0x00000020, 0x00030037, 0x00000009, 0x00000021, 0x00030037, 0x00000011, 
0x00000022, 0x000200F8, 0x00000024, 0x0004003B, 0x00000011, 0x000000C6, 0x00000007, 0x0004003B, 0x00000011, 0x000000E3, 0x00000007, 0x0004003B, 
0x00000009, 0x000000EA, 0x00000007, 0x0004003B, 0x00000009, 0x000000ED, 0x00000007, 0x0004003B, 0x00000009, 0x000000FE, 0x00000007, 0x0004003B, 
0x00000009, 0x00000107, 0x00000007, 0x00040008, 0x00000001, 0x00000090, 0x00000000, 0x00050041, 0x00000011, 0x000000C3, 0x00000021, 0x0000005E, 
0x0004003D, 0x00000007, 0x000000C4, 0x000000C3, 0x000500B8, 0x00000066, 0x000000C5, 0x000000C4, 0x00000065, 0x000300F7, 0x000000C8, 0x00000000, 
0x000400FA, 0x000000C5, 0x000000C7, 0x000000CE, 0x000200F8, 0x000000C7, 0x0004003D, 0x00000007, 0x000000CA, 0x00000022, 0x00050085, 0x00000007, 
0x000000CC, 0x000000CA, 0x000000CB, 0x00050081, 0x00000007, 0x000000CD, 0x000000C9, 0x000000CC, 0x0003003E, 0x000000C6, 0x000000CD, 0x000200F9, 
0x000000C8, 0x000200F8, 0x000000CE, 0x0004003D, 0x00000007, 0x000000D0, 0x00000022, 0x00050085, 0x00000007, 0x000000D2, 0x000000D0, 0x000000D1, 
0x00050081, 0x00000007, 0x000000D3, 0x000000CF, 0x000000D2, 0x0003003E, 0x000000C6, 0x000000D3, 0x000200F9, 0x000000C8, 0x000200F8, 0x000000C8, 
0x0004003D, 0x00000007, 0x000000D4, 0x000000C6, 0x00050041, 0x00000011, 0x000000D5, 0x00000021, 0x0000004E, 0x0004003D, 0x00000007, 0x000000D6, 
0x000000D5, 0x00050081, 0x00000007, 0x000000D7, 0x000000D6, 0x000000D4, 0x00050041, 0x00000011, 0x000000D8, 0x00000021, 0x0000004E, 0x0003003E, 
0x000000D8, 0x000000D7, 0x00040008, 0x00000001, 0x00000091, 0x00000000, 0x00050041, 0x00000011, 0x000000D9, 0x00000021, 0x0000005E, 0x0004003D, 
0x00000007, 0x000000DA, 0x000000D9, 0x00050083, 0x00000007, 0x000000DB, 0x000000DA, 0x00000065, 0x0006000C, 0x00000007, 0x000000DC, 0x00000002, 
0x00000004, 0x000000DB, 0x00050041, 0x00000011, 0x000000DD, 0x00000021, 0x0000005E, 0x0003003E, 0x000000DD, 0x000000DC, 0x00040008, 0x00000001, 
0x00000092, 0x00000000, 0x00050041, 0x00000011, 0x000000DF, 0x00000021, 0x0000004E, 0x0004003D, 0x00000007, 0x000000E0, 0x000000DF, 0x00050085, 
0x00000007, 0x000000E1, 0x000000E0, 0x000000DE, 0x00050041, 0x00000011, 0x000000E2, 0x00000021, 0x0000004E, 0x0003003E, 0x000000E2, 0x000000E1, 
0x00040008, 0x00000001, 0x00000093, 0x00000000, 0x0004003D, 0x00000008, 0x000000E4, 0x00000021, 0x0004003D, 0x00000007, 0x000000E5, 0x00000022, 
0x00050085, 0x00000007, 0x000000E7, 0x000000E5, 0x000000E6, 0x00050050, 0x00000008, 0x000000E8, 0x000000E7, 0x000000E7, 0x00050083, 0x00000008, 
0x000000E9, 0x000000E4, 0x000000E8, 0x0003003E, 0x000000EA, 0x000000E9, 0x00050039, 0x00000007, 0x000000EB, 0x0000001E, 0x000000EA, 0x00050088, 
0x00000007, 0x000000EC, 0x000000EB, 0x0000007B, 0x0003003E, 0x000000E3, 0x000000EC, 0x00040008, 0x00000001, 0x00000095, 0x00000000, 0x0004003D, 
0x00000008, 0x000000EE, 0x00000021, 0x0004003D, 0x00000007, 0x000000EF, 0x000000E3, 0x00050088, 0x00000007, 0x000000F0, 0x000000EF, 0x0000007B, 
0x00050050, 0x00000008, 0x000000F1, 0x000000F0, 0x000000F0, 0x00050081, 0x00000008, 0x000000F2, 0x000000EE, 0x000000F1, 0x0004003D, 0x00000007, 
0x000000F3, 0x00000022, 0x00050050, 0x00000008, 0x000000F4, 0x000000F3, 0x000000F3, 0x00050081, 0x00000008, 0x000000F5, 0x000000F2, 0x000000F4, 
0x00050041, 0x00000011, 0x000000F6, 0x00000021, 0x0000004E, 0x0004003D, 0x00000007, 0x000000F7, 0x000000F6, 0x00050050, 0x00000008, 0x000000F8, 
0x000000F7, 0x000000F7, 0x00050083, 0x00000008, 0x000000F9, 0x000000F5, 0x000000F8, 0x00050041, 0x00000011, 0x000000FA, 0x00000021, 0x0000005E, 
0x0004003D, 0x00000007, 0x000000FB, 0x000000FA, 0x00050050, 0x00000008, 0x000000FC, 0x000000FB, 0x000000FB, 0x00050083, 0x00000008, 0x000000FD, 
0x000000F9, 0x000000FC, 0x0003003E, 0x000000FE, 0x000000FD, 0x00050039, 0x00000007, 0x000000FF, 0x0000001E, 0x000000FE, 0x0004003D, 0x00000008, 
0x00000100, 0x00000021, 0x0004003D, 0x00000007, 0x00000101, 0x000000E3, 0x00050050, 0x00000008, 0x00000102, 0x00000101, 0x00000101, 0x00050081, 
0x00000008, 0x00000103, 0x00000100, 0x00000102, 0x0004003D, 0x00000007, 0x00000104, 0x00000022, 0x00050050, 0x00000008, 0x00000105, 0x00000104, 
0x00000104, 0x00050083, 0x00000008, 0x00000106, 0x00000103, 0x00000105, 0x0003003E, 0x00000107, 0x00000106, 0x00050039, 0x00000007, 0x00000108, 
0x0000001E, 0x00000107, 0x00050050, 0x00000008, 0x00000109, 0x000000FF, 0x00000108, 0x0003003E, 0x000000ED, 0x00000109, 0x00040008, 0x00000001, 
0x00000097, 0x00000000, 0x00050041, 0x00000011, 0x0000010A, 0x000000ED, 0x0000005E, 0x0004003D, 0x00000007, 0x0000010B, 0x0000010A, 0x00050041, 
0x00000011, 0x0000010C, 0x000000ED, 0x0000005E, 0x0004003D, 0x00000007, 0x0000010D, 0x0000010C, 0x00050081, 0x00000007, 0x0000010E, 0x0000010B, 
0x0000010D, 0x00050041, 0x00000011, 0x0000010F, 0x00000021, 0x0000005E, 0x0004003D, 0x00000007, 0x00000110, 0x0000010F, 0x0007000C, 0x00000007, 
0x00000111, 0x00000002, 0x00000028, 0x0000003E, 0x00000110, 0x00050085, 0x00000007, 0x00000112, 0x0000010E, 0x00000111, 0x00050081, 0x00000007, 
0x00000114, 0x00000112, 0x00000113, 0x0007000C, 0x00000007, 0x00000116, 0x00000002, 0x0000001A, 0x00000114, 0x00000115, 0x000200FE, 0x00000116, 
0x00010038, 0x00050036, 0x00000012, 0x00000026, 0x00000000, 0x00000013, 0x00030037, 0x00000011, 0x00000025, 0x000200F8, 0x00000027, 0x0004003B, 
0x00000011, 0x00000119, 0x00000007, 0x0004003B, 0x00000068, 0x0000011D, 0x00000007, 0x0004003B, 0x00000068, 0x00000122, 0x00000007, 0x0004003B, 
0x00000011, 0x00000124, 0x00000007, 0x00040008, 0x00000001, 0x0000009D, 0x00000000, 0x0003003E, 0x00000119, 0x0000011A, 0x00040008, 0x00000001, 
0x0000009F, 0x00000000, 0x0004003D, 0x00000007, 0x0000011B, 0x00000025, 0x0006000C, 0x00000007, 0x0000011C, 0x00000002, 0x0000001F, 0x0000011B, 
0x0003003E, 0x00000025, 0x0000011C, 0x00040008, 0x00000001, 0x000000A0, 0x00000000, 0x0003003E, 0x0000011D, 0x00000121, 0x00040008, 0x00000001, 
0x000000A2, 0x00000000, 0x0004003D, 0x00000012, 0x00000123, 0x0000011D, 0x0003003E, 0x00000122, 0x00000123, 0x00040008, 0x00000001, 0x000000A4, 
0x00000000, 0x0004003D, 0x00000007, 0x00000125, 0x00000025, 0x0003003E, 0x00000124, 0x00000125, 0x00050039, 0x00000012, 0x00000126, 0x00000015, 
0x00000124, 0x0003003E, 0x0000011D, 0x00000126, 0x00040008, 0x00000001, 0x000000A5, 0x00000000, 0x0004003D, 0x00000007, 0x00000127, 0x00000119, 
0x0004003D, 0x00000012, 0x00000129, 0x0000011D, 0x0007000C, 0x00000012, 0x0000012A, 0x00000002, 0x00000028, 0x00000128, 0x00000129, 0x00060050, 
0x00000012, 0x0000012B, 0x00000127, 0x00000127, 0x00000127, 0x00050081, 0x00000012, 0x0000012C, 0x0000012B, 0x0000012A, 0x0004003D, 0x00000012, 
0x0000012D, 0x0000011D, 0x00050088, 0x00000012, 0x0000012E, 0x0000012D, 0x0000012C, 0x0003003E, 0x0000011D, 0x0000012E, 0x00040008, 0x00000001, 
0x000000A6, 0x00000000, 0x0004003D, 0x00000012, 0x0000012F, 0x0000011D, 0x000200FE, 0x0000012F, 0x00010038, 0x00050036, 0x00000003, 0x0000002D, 
0x00000000, 0x0000002A, 0x00030037, 0x00000029, 0x0000002B, 0x00030037, 0x00000009, 0x0000002C, 0x000200F8, 0x0000002E, 0x0004003B, 0x00000011, 
0x00000132, 0x00000007, 0x0004003B, 0x00000011, 0x00000134, 0x00000007, 0x0004003B, 0x00000009, 0x00000138, 0x00000007, 0x0004003B, 0x00000011, 
0x0000013F, 0x00000007, 0x0004003B, 0x00000009, 0x0000014E, 0x00000007, 0x0004003B, 0x00000009, 0x00000155, 0x00000007, 0x0004003B, 0x00000011, 
0x00000157, 0x00000007, 0x0004003B, 0x00000011, 0x00000158, 0x00000007, 0x0004003B, 0x00000009, 0x0000015C, 0x00000007, 0x0004003B, 0x00000011, 
0x0000015E, 0x00000007, 0x0004003B, 0x00000011, 0x0000015F, 0x00000007, 0x0004003B, 0x00000068, 0x00000162, 0x00000007, 0x0004003B, 0x00000009, 
0x00000163, 0x00000007, 0x0004003B, 0x00000011, 0x00000165, 0x00000007, 0x0004003B, 0x00000011, 0x00000168, 0x00000007, 0x0004003B, 0x00000068, 
0x0000016C, 0x00000007, 0x0004003B, 0x00000009, 0x0000016D, 0x00000007, 0x0004003B, 0x00000011, 0x0000016F, 0x00000007, 0x0004003B, 0x00000011, 
0x00000172, 0x00000007, 0x00040008, 0x00000001, 0x000000AC, 0x00000000, 0x0003003E, 0x00000132, 0x00000133, 0x00040008, 0x00000001, 0x000000AE, 
0x00000000, 0x0004003D, 0x00000007, 0x00000137, 0x00000136, 0x0003003E, 0x00000134, 0x00000137, 0x00040008, 0x00000001, 0x000000B0, 0x00000000, 
0x0004003D, 0x00000008, 0x00000139, 0x0000002C, 0x0004003D, 0x00000008, 0x0000013C, 0x0000013B, 0x0007004F, 0x00000008, 0x0000013D, 0x0000013C, 
0x0000013C, 0x00000001, 0x00000001, 0x00050088, 0x00000008, 0x0000013E, 0x00000139, 0x0000013D, 0x0003003E, 0x00000138, 0x0000013E, 0x00040008, 
0x00000001, 0x000000B2, 0x00000000, 0x00050041, 0x00000011, 0x00000140, 0x00000138, 0x0000005E, 0x0004003D, 0x00000007, 0x00000141, 0x00000140, 
0x00050083, 0x00000007, 0x00000142, 0x00000040, 0x00000141, 0x0003003E, 0x0000013F, 0x00000142, 0x00040008, 0x00000001, 0x000000B4, 0x00000000, 
0x00050041, 0x00000135, 0x00000143, 0x0000013B, 0x0000004E, 0x0004003D, 0x00000007, 0x00000144, 0x00000143, 0x00050041, 0x00000135, 0x00000145, 
0x0000013B, 0x0000005E, 0x0004003D, 0x00000007, 0x00000146, 0x00000145, 0x00050088, 0x00000007, 0x00000147, 0x00000144, 0x00000146, 0x00050083, 
0x00000007, 0x00000148, 0x00000147, 0x00000040, 0x00050088, 0x00000007, 0x00000149, 0x00000148, 0x0000007B, 0x00050041, 0x00000011, 0x0000014A, 
0x00000138, 0x0000004E, 0x0004003D, 0x00000007, 0x0000014B, 0x0000014A, 0x00050083, 0x00000007, 0x0000014C, 0x0000014B, 0x00000149, 0x00050041, 
0x00000011, 0x0000014D, 0x00000138, 0x0000004E, 0x0003003E, 0x0000014D, 0x0000014C, 0x00040008, 0x00000001, 0x000000B5, 0x00000000, 0x0004003D, 
0x00000008, 0x0000014F, 0x00000138, 0x0003003E, 0x0000014E, 0x0000014F, 0x00040008, 0x00000001, 0x000000B7, 0x00000000, 0x00050041, 0x00000011, 
0x00000150, 0x0000014E, 0x0000005E, 0x0004003D, 0x00000007, 0x00000151, 0x00000150, 0x00050083, 0x00000007, 0x00000152, 0x00000040, 0x00000151, 
0x00050041, 0x00000011, 0x00000153, 0x0000014E, 0x0000005E, 0x0003003E, 0x00000153, 0x00000152, 0x00040008, 0x00000001, 0x000000B8, 0x00000000, 
0x0004003D, 0x00000008, 0x00000156, 0x00000138, 0x0003003E, 0x00000155, 0x00000156, 0x0003003E, 0x00000157, 0x00000154, 0x0004003D, 0x00000007, 
0x00000159, 0x00000132, 0x0003003E, 0x00000158, 0x00000159, 0x00070039, 0x00000008, 0x0000015A, 0x0000001B, 0x00000155, 0x00000157, 0x00000158, 
0x0003003E, 0x00000138, 0x0000015A, 0x00040008, 0x00000001, 0x000000B9, 0x00000000, 0x0004003D, 0x00000008, 0x0000015D, 0x0000014E, 0x0003003E, 
0x0000015C, 0x0000015D, 0x0003003E, 0x0000015E, 0x0000015B, 0x0004003D, 0x00000007, 0x00000160, 0x00000132, 0x0003003E, 0x0000015F, 0x00000160, 
0x00070039, 0x00000008, 0x00000161, 0x0000001B, 0x0000015C, 0x0000015E, 0x0000015F, 0x0003003E, 0x0000014E, 0x00000161, 0x00040008, 0x00000001, 
0x000000BA, 0x00000000, 0x0004003D, 0x00000008, 0x00000164, 0x00000138, 0x0003003E, 0x00000163, 0x00000164, 0x0004003D, 0x00000007, 0x00000166, 
0x00000134, 0x0003003E, 0x00000165, 0x00000166, 0x00060039, 0x00000007, 0x00000167, 0x00000023, 0x00000163, 0x00000165, 0x0003003E, 0x00000168, 
0x00000167, 0x00050039, 0x00000012, 0x00000169, 0x00000026, 0x00000168, 0x0004003D, 0x00000007, 0x0000016A, 0x0000013F, 0x0005008E, 0x00000012, 
0x0000016B, 0x00000169, 0x0000016A, 0x0003003E, 0x00000162, 0x0000016B, 0x00040008, 0x00000001, 0x000000BC, 0x00000000, 0x0004003D, 0x00000008, 
0x0000016E, 0x0000014E, 0x0003003E, 0x0000016D, 0x0000016E, 0x0004003D, 0x00000007, 0x00000170, 0x00000134, 0x0003003E, 0x0000016F, 0x00000170, 
0x00060039, 0x00000007, 0x00000171, 0x00000023, 0x0000016D, 0x0000016F, 0x0003003E, 0x00000172, 0x00000171, 0x00050039, 0x00000012, 0x00000173, 
0x00000026, 0x00000172, 0x0004003D, 0x00000007, 0x00000174, 0x0000013F, 0x00050083, 0x00000007, 0x00000175, 0x00000040, 0x00000174, 0x0005008E, 
0x00000012, 0x00000176, 0x00000173, 0x00000175, 0x0003003E, 0x0000016C, 0x00000176, 0x00040008, 0x00000001, 0x000000BE, 0x00000000, 0x0004003D, 
0x00000012, 0x00000177, 0x00000162, 0x0004003D, 0x00000012, 0x00000178, 0x0000016C, 0x00050081, 0x00000012, 0x00000179, 0x00000177, 0x00000178, 
0x00050051, 0x00000007, 0x0000017A, 0x00000179, 0x00000000, 0x00050051, 0x00000007, 0x0000017B, 0x00000179, 0x00000001, 0x00050051, 0x00000007, 
0x0000017C, 0x00000179, 0x00000002, 0x00070050, 0x00000028, 0x0000017D, 0x0000017A, 0x0000017B, 0x0000017C, 0x00000040, 0x0003003E, 0x0000002B, 
0x0000017D, 0x000100FD, 0x00010038 });
	descr.Compute().StringCL( 
R"#(#define FORMAT( _fmt_ )
#define INOUT
#define OUT
// Functions for GLSL compatibility

#define Gen_IntTemplates( _gen_ ) \
	_gen_( int ) \
	_gen_( int2 ) \
	_gen_( int3 ) \
	_gen_( int4 )

#define Gen_UIntTemplates( _gen_ ) \
	_gen_( uint ) \
	_gen_( uint2 ) \
	_gen_( uint3 ) \
	_gen_( uint4 )
	
#define Gen_LongTemplates( _gen_ ) \
	_gen_( long ) \
	_gen_( long2 ) \
	_gen_( long3 ) \
	_gen_( long4 )
	
#define Gen_ULongTemplates( _gen_ ) \
	_gen_( ulong ) \
	_gen_( ulong2 ) \
	_gen_( ulong3 ) \
	_gen_( ulong4 )

#define Gen_FloatTemplates( _gen_ ) \
	_gen_( float ) \
	_gen_( float2 ) \
	_gen_( float3 ) \
	_gen_( float4 )

#define Gen_DoubleTemplates( _gen_ ) \
	_gen_( double ) \
	_gen_( double2 ) \
	_gen_( double3 ) \
	_gen_( double4 )


// Fract
#define GenTemplate_Fract( _type_ ) \
	_type_ fractTempl_##_type_ (_type_ x) { \
		_type_	ipart; \
		return fract( x, &ipart ); \
	}
	Gen_FloatTemplates( GenTemplate_Fract )
	Gen_DoubleTemplates( GenTemplate_Fract )
#undef GenTemplate_Fract


// findMSB 32
#define GenTemplate_FindMSB32( _type_ ) \
	_type_ findMSB_##_type_ (_type_ x) { \
		return 31 - clz( x ); \
	}
	Gen_IntTemplates( GenTemplate_FindMSB32 )
	Gen_UIntTemplates( GenTemplate_FindMSB32 )
#undef GenTemplate_FindMSB32
	

// findMSB 64
#define GenTemplate_FindMSB64( _type_ ) \
	_type_ findMSB_##_type_ (_type_ x) { \
		return 63 - clz( x ); \
	}
	Gen_LongTemplates( GenTemplate_FindMSB64 )
	Gen_ULongTemplates( GenTemplate_FindMSB64 )
#undef GenTemplate_FindMSB64


// findLSB 32
#define GenTemplate_FindLSB32( _type_ ) \
	_type_ findLSB_##_type_ (_type_ x) { \
		return	(convert_##_type_(!!( x >> 31 )) & convert_##_type_(!( x & convert_##_type_(0x7FFFFFFF) ))) + \
				(convert_##_type_(!!( x >> 30 )) & convert_##_type_(!( x & convert_##_type_(0x3FFFFFFF) ))) + \
				(convert_##_type_(!!( x >> 29 )) & convert_##_type_(!( x & convert_##_type_(0x1FFFFFFF) ))) + \
				(convert_##_type_(!!( x >> 28 )) & convert_##_type_(!( x & convert_##_type_(0xFFFFFFF) ))) + \
				(convert_##_type_(!!( x >> 27 )) & convert_##_type_(!( x & convert_##_type_(0x7FFFFFF) ))) + \
				(convert_##_type_(!!( x >> 26 )) & convert_##_type_(!( x & convert_##_type_(0x3FFFFFF) ))) + \
				(convert_##_type_(!!( x >> 25 )) & convert_##_type_(!( x & convert_##_type_(0x1FFFFFF) ))) + \
				(convert_##_type_(!!( x >> 24 )) & convert_##_type_(!( x & convert_##_type_(0xFFFFFF) ))) + \
				(convert_##_type_(!!( x >> 23 )) & convert_##_type_(!( x & convert_##_type_(0x7FFFFF) ))) + \
				(convert_##_type_(!!( x >> 22 )) & convert_##_type_(!( x & convert_##_type_(0x3FFFFF) ))) + \
				(convert_##_type_(!!( x >> 21 )) & convert_##_type_(!( x & convert_##_type_(0x1FFFFF) ))) + \
				(convert_##_type_(!!( x >> 20 )) & convert_##_type_(!( x & convert_##_type_(0xFFFFF) ))) + \
				(convert_##_type_(!!( x >> 19 )) & convert_##_type_(!( x & convert_##_type_(0x7FFFF) ))) + \
				(convert_##_type_(!!( x >> 18 )) & convert_##_type_(!( x & convert_##_type_(0x3FFFF) ))) + \
				(convert_##_type_(!!( x >> 17 )) & convert_##_type_(!( x & convert_##_type_(0x1FFFF) ))) + \
				(convert_##_type_(!!( x >> 16 )) & convert_##_type_(!( x & convert_##_type_(0xFFFF) ))) + \
				(convert_##_type_(!!( x >> 15 )) & convert_##_type_(!( x & convert_##_type_(0x7FFF) ))) + \
				(convert_##_type_(!!( x >> 14 )) & convert_##_type_(!( x & convert_##_type_(0x3FFF) ))) + \
				(convert_##_type_(!!( x >> 13 )) & convert_##_type_(!( x & convert_##_type_(0x1FFF) ))) + \
				(convert_##_type_(!!( x >> 12 )) & convert_##_type_(!( x & convert_##_type_(0xFFF) ))) + \
				(convert_##_type_(!!( x >> 11 )) & convert_##_type_(!( x & convert_##_type_(0x7FF) ))) + \
				(convert_##_type_(!!( x >> 10 )) & convert_##_type_(!( x & convert_##_type_(0x3FF) ))) + \
				(convert_##_type_(!!( x >>  9 )) & convert_##_type_(!( x & convert_##_type_(0x1FF) ))) + \
				(convert_##_type_(!!( x >>  8 )) & convert_##_type_(!( x & convert_##_type_(0xFF) ))) + \
				(convert_##_type_(!!( x >>  7 )) & convert_##_type_(!( x & convert_##_type_(0x7F) ))) + \
				(convert_##_type_(!!( x >>  6 )) & convert_##_type_(!( x & convert_##_type_(0x3F) ))) + \
				(convert_##_type_(!!( x >>  5 )) & convert_##_type_(!( x & convert_##_type_(0x1F) ))) + \
				(convert_##_type_(!!( x >>  4 )) & convert_##_type_(!( x & convert_##_type_(0xF) ))) + \
				(convert_##_type_(!!( x >>  3 )) & convert_##_type_(!( x & convert_##_type_(0x7) ))) + \
				(convert_##_type_(!!( x >>  2 )) & convert_##_type_(!( x & convert_##_type_(0x3) ))) + \
				(convert_##_type_(!!( x >>  1 )) & convert_##_type_(!( x & convert_##_type_(0x1) ))) + \
				convert_##_type_(!!( x )) - 1; \
	}
	Gen_IntTemplates( GenTemplate_FindLSB32 )
	Gen_UIntTemplates( GenTemplate_FindLSB32 )
#undef GenTemplate_FindLSB32
	
/*
// findLSB 64
#define GenTemplate_FindLSB64( _type_ ) \
	_type_ findLSB_##_type_ (_type_ x) { \
		return 63 - clz( rotate( x, 63 ) ); \
	}
	Gen_LongTemplates( GenTemplate_FindLSB64 )
	Gen_ULongTemplates( GenTemplate_FindLSB64 )
#undef GenTemplate_FindLSB64



// bitfieldReverse 32
#define GenTemplate_BitfieldReverse32( _type_ ) \
	_type_ bitfieldReverse_##_type_ (_type_ x) { \
		return ; \
	}
	Gen_IntTemplates( GenTemplate_BitfieldReverse32 )
	Gen_UIntTemplates( GenTemplate_BitfieldReverse32 )
#undef GenTemplate_BitfieldReverse32
*/

#undef Gen_IntTemplates
#undef Gen_UIntTemplates
#undef Gen_LongTemplates
#undef Gen_ULongTemplates
#undef Gen_FloatTemplates
#undef Gen_DoubleTemplates

__constant float C_1d0 = ((float)( 1.0f ));
__constant float C_a1d0 = ((float)( -1.0f ));
__constant float C_0d5 = ((float)( 0.5f ));
__constant float2 C_vec2p0d5p = ((float2)( 0.5f ));
__constant float C_6d28 = ((float)( 6.28000021f ));
__constant float C_0d25 = ((float)( 0.25f ));
__constant float C_1d3 = ((float)( 1.29999995f ));
__constant float C_4d2 = ((float)( 4.19999981f ));
__constant float C_a1d6 = ((float)( -1.60000002f ));
__constant float C_2d0 = ((float)( 2.0f ));
__constant float C_1d9 = ((float)( 1.89999998f ));
__constant float C_23d035 = ((float)( 23.03499985f ));
__constant float C_a10d97 = ((float)( -10.97000027f ));
__constant float C_a0d5 = ((float)( -0.5f ));
__constant float C_35d0 = ((float)( 35.0f ));
__constant float2 C_rbhvie1 = ((float2)( -0.013f ));
__constant float2 C_vec2p0d0p = ((float2)( 0.0f ));
__constant float2 C_vec2p1d0p = ((float2)( 1.0f ));
__constant float2 C_ocpo71 = ((float2)( 12.98980045f, 12.14140034f ));
__constant float C_83758d5 = ((float)( 83758.5f ));
__constant float2 C_lg7u5s1 = ((float2)( 1.0f, 0.0f ));
__constant float2 C_ni57fz = ((float2)( 0.0f, 1.0f ));
__constant float2 C_vec2p2d1p = ((float2)( 2.0999999f ));
__constant float C_0d6 = ((float)( 0.60000002f ));
__constant float2 C_vec2p5d4p = ((float2)( 5.4000001f ));
__constant float C_0d42 = ((float)( 0.41999999f ));
__constant float2 C_vec2pa1d0p = ((float2)( -1.0f ));
__constant float C_0d0 = ((float)( 0.0f ));
__constant float C_0d1 = ((float)( 0.1f ));
__constant float C_4d0 = ((float)( 4.0f ));
__constant float C_0d3 = ((float)( 0.30000001f ));
__constant float C_0d2 = ((float)( 0.2f ));
__constant float C_1d05 = ((float)( 1.04999995f ));
__constant float C_1d4 = ((float)( 1.39999998f ));
__constant float3 C_vec3p0d0p = ((float3)( 0.0f ));
__constant float3 C_vec3p0d15p = ((float3)( 0.15000001f ));

//---------------------------------

kernel void main (
	/*0*/write_only FORMAT(rgba8_unorm) image2d_t un_OutImage)
{

{
	int2 H_k5ommu = convert_int3( ((uint3)(get_num_groups(0), get_num_groups(1), get_num_groups(2))) ).xy;
	;
	float2 iResolution = convert_float2( H_k5ommu );
	;
	int2 H_fjkh5n = convert_int3( ((uint3)(get_global_id(0),  get_global_id(1),  get_global_id(2))) ).xy;
	;
	float2 fragCoord = convert_float2( H_fjkh5n );
	;
	float2 uv = (fragCoord / iResolution.yy);
	;
	float ff = (C_1d0 - uv.y);
	;
	float3 H_lh8qqk1 = ((float3)( ff ));
	;
	float H_dpd8p01 = (iResolution.x / iResolution.y);
	;
	float H_yvli0e = (H_dpd8p01 + C_a1d0);
	;
	float H_s54pjj1 = (H_yvli0e * C_0d5);
	;
	float H_7jtxwq = (uv.x - H_s54pjj1);
	;
	float2 H_u1lsbk = uv;
	;
	H_u1lsbk.x = H_7jtxwq;
	float2 H_efr8vx = ((float2)( H_7jtxwq, ff ));
	;
	float2 H_o40hj71 = (C_vec2p0d5p - H_u1lsbk);
	;
	float px = atan2( H_o40hj71.y, H_o40hj71.x );
	;
	float H_6v7n0l1 = (px / C_6d28);
	;
	float H_wlz5m9 = (H_6v7n0l1 + C_0d25);
	;
	float px1 = fractTempl_float( H_wlz5m9 );
	;
	float H_2smk0c1 = (C_1d0 - px1);
	;
	float px2 = (H_2smk0c1 + C_1d3);
	;
	float H_la83yl = (H_o40hj71.x * H_o40hj71.x);
	;
	float H_tx59t81 = (H_o40hj71.y * H_o40hj71.y);
	;
	float H_8z41nj = (H_la83yl + H_tx59t81);
	;
	float py = sqrt( H_8z41nj );
	;
	float H_8hinza = (py * C_4d2);
	;
	float H_z04hwr1 = (H_8hinza + C_a1d6);
	;
	float py1 = (H_z04hwr1 * C_2d0);
	;
	float2 H_fcju8d = (C_vec2p0d5p - H_efr8vx);
	;
	float px3 = atan2( H_fcju8d.y, H_fcju8d.x );
	;
	float H_32ry1y1 = (px3 / C_6d28);
	;
	float H_lciq0x1 = (C_0d25 + H_32ry1y1);
	;
	float px4 = fractTempl_float( H_lciq0x1 );
	;
	float H_5ptl6b1 = (C_1d0 - px4);
	;
	float px5 = (H_5ptl6b1 + C_1d9);
	;
	float H_r5b2mo = (H_fcju8d.x * H_fcju8d.x);
	;
	float H_tomqav = (H_fcju8d.y * H_fcju8d.y);
	;
	float H_po2mrf1 = (H_r5b2mo + H_tomqav);
	;
	float py2 = sqrt( H_po2mrf1 );
	;
	float H_m5q2j41 = (C_4d2 * py2);
	;
	float H_fg99u6 = (C_a1d6 + H_m5q2j41);
	;
	float py3 = (C_2d0 * H_fg99u6);
	;
	int H_ch0lad1 = (py1 < C_0d5);
	;
	float select = ( (H_ch0lad1) ? (C_23d035) : (C_a10d97) );
	;
	float H_sophre1 = (px2 + select);
	;
	float H_w2uh7d = (py1 + C_a0d5);
	;
	float uv1 = fabs( H_w2uh7d );
	;
	float H_uxngg31 = (H_sophre1 * C_35d0);
	;
	float2 H_88tkuq1 = ((float2)( H_uxngg31, uv1 ));
	;
	float2 param = (H_88tkuq1 + C_rbhvie1);
	;
	float2 H_nemlkg = floor( param );
	;
	float2 H_l5pql91 = fractTempl_float2( param );
	;
	float2 H_ydzinr1 = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_l5pql91 );
	;
	float misc2a = dot( H_nemlkg, C_ocpo71 );
	;
	float H_97tvfp = sin( misc2a );
	;
	float H_ol6vt5 = (H_97tvfp * C_83758d5);
	;
	float H_njzxsr = fractTempl_float( H_ol6vt5 );
	;
	float2 param1 = (H_nemlkg + C_lg7u5s1);
	;
	float misc2a1 = dot( param1, C_ocpo71 );
	;
	float H_keffz41 = sin( misc2a1 );
	;
	float H_xjoqai = (C_83758d5 * H_keffz41);
	;
	float H_na04w51 = fractTempl_float( H_xjoqai );
	;
	float misc3a = mix( H_njzxsr, H_na04w51, H_ydzinr1.x );
	;
	float2 param2 = (H_nemlkg + C_ni57fz);
	;
	float misc2a2 = dot( param2, C_ocpo71 );
	;
	float H_jpoi3w = sin( misc2a2 );
	;
	float H_8vwibi1 = (C_83758d5 * H_jpoi3w);
	;
	float H_9ps7og = fractTempl_float( H_8vwibi1 );
	;
	float2 param3 = (C_vec2p1d0p + H_nemlkg);
	;
	float misc2a3 = dot( param3, C_ocpo71 );
	;
	float H_i6j7361 = sin( misc2a3 );
	;
	float H_8luw1w = (C_83758d5 * H_i6j7361);
	;
	float H_bqdy761 = fractTempl_float( H_8luw1w );
	;
	float misc3a1 = mix( H_9ps7og, H_bqdy761, H_ydzinr1.x );
	;
	float misc3a2 = mix( misc3a, misc3a1, H_ydzinr1.y );
	;
	float2 param4 = (param * C_vec2p2d1p);
	;
	float2 H_jwjge81 = floor( param4 );
	;
	float2 H_pkik5d1 = fractTempl_float2( param4 );
	;
	float2 H_tv291x = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_pkik5d1 );
	;
	float misc2a4 = dot( H_jwjge81, C_ocpo71 );
	;
	float H_5wxck6 = sin( misc2a4 );
	;
	float H_8krpkl = (C_83758d5 * H_5wxck6);
	;
	float H_v0jmc71 = fractTempl_float( H_8krpkl );
	;
	float2 param5 = (C_lg7u5s1 + H_jwjge81);
	;
	float misc2a5 = dot( param5, C_ocpo71 );
	;
	float H_g2vk83 = sin( misc2a5 );
	;
	float H_38vgm9 = (C_83758d5 * H_g2vk83);
	;
	float H_t9efxn1 = fractTempl_float( H_38vgm9 );
	;
	float misc3a3 = mix( H_v0jmc71, H_t9efxn1, H_tv291x.x );
	;
	float2 param6 = (C_ni57fz + H_jwjge81);
	;
	float misc2a6 = dot( param6, C_ocpo71 );
	;
	float H_7rbuq21 = sin( misc2a6 );
	;
	float H_6ej9qj1 = (C_83758d5 * H_7rbuq21);
	;
	float H_53ogrt = fractTempl_float( H_6ej9qj1 );
	;
	float2 param7 = (C_vec2p1d0p + H_jwjge81);
	;
	float misc2a7 = dot( param7, C_ocpo71 );
	;
	float H_emqthu1 = sin( misc2a7 );
	;
	float H_jzdzj91 = (C_83758d5 * H_emqthu1);
	;
	float H_pig2391 = fractTempl_float( H_jzdzj91 );
	;
	float misc3a4 = mix( H_53ogrt, H_pig2391, H_tv291x.x );
	;
	float misc3a5 = mix( misc3a3, misc3a4, H_tv291x.y );
	;
	float H_ejdcw8 = (misc3a5 * C_0d6);
	;
	float H_2ljwhc = (H_ejdcw8 + misc3a2);
	;
	float2 param8 = (param * C_vec2p5d4p);
	;
	float2 H_vgcs72 = floor( param8 );
	;
	float2 H_9x2bcf1 = fractTempl_float2( param8 );
	;
	float2 H_1moj6p1 = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_9x2bcf1 );
	;
	float misc2a8 = dot( H_vgcs72, C_ocpo71 );
	;
	float H_5jfmu31 = sin( misc2a8 );
	;
	float H_92b5ls = (C_83758d5 * H_5jfmu31);
	;
	float H_27zglf1 = fractTempl_float( H_92b5ls );
	;
	float2 param9 = (C_lg7u5s1 + H_vgcs72);
	;
	float misc2a9 = dot( param9, C_ocpo71 );
	;
	float H_wlp03w = sin( misc2a9 );
	;
	float H_hfha5q = (C_83758d5 * H_wlp03w);
	;
	float H_ew6j9m = fractTempl_float( H_hfha5q );
	;
	float misc3a6 = mix( H_27zglf1, H_ew6j9m, H_1moj6p1.x );
	;
	float2 parama = (C_ni57fz + H_vgcs72);
	;
	float misc2aa = dot( parama, C_ocpo71 );
	;
	float H_kewibw = sin( misc2aa );
	;
	float H_balykn = (C_83758d5 * H_kewibw);
	;
	float H_uueyuw = fractTempl_float( H_balykn );
	;
	float2 paramb = (C_vec2p1d0p + H_vgcs72);
	;
	float misc2ab = dot( paramb, C_ocpo71 );
	;
	float H_bblbo5 = sin( misc2ab );
	;
	float H_e1e2141 = (C_83758d5 * H_bblbo5);
	;
	float H_6ibhin1 = fractTempl_float( H_e1e2141 );
	;
	float misc3a7 = mix( H_uueyuw, H_6ibhin1, H_1moj6p1.x );
	;
	float misc3a8 = mix( misc3a6, misc3a7, H_1moj6p1.y );
	;
	float H_flh10r = (misc3a8 * C_0d42);
	;
	float H_9ef9yj = (H_2ljwhc + H_flh10r);
	;
	float H_tiogkc = (C_0d5 * H_9ef9yj);
	;
	float2 H_4xmiy2 = ((float2)( H_tiogkc ));
	;
	float2 H_hvjs551 = (H_4xmiy2 + H_88tkuq1);
	;
	float2 paramc = (H_hvjs551 + C_vec2pa1d0p);
	;
	float2 H_o5krm11 = floor( paramc );
	;
	float2 H_6wk5j4 = fractTempl_float2( paramc );
	;
	float2 H_9t3lbm1 = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_6wk5j4 );
	;
	float misc2ac = dot( H_o5krm11, C_ocpo71 );
	;
	float H_i60bfx = sin( misc2ac );
	;
	float H_vbneju = (C_83758d5 * H_i60bfx);
	;
	float H_zibu6d1 = fractTempl_float( H_vbneju );
	;
	float2 paramd = (C_lg7u5s1 + H_o5krm11);
	;
	float misc2ad = dot( paramd, C_ocpo71 );
	;
	float H_9vgkxw1 = sin( misc2ad );
	;
	float H_r7x74o1 = (C_83758d5 * H_9vgkxw1);
	;
	float H_hg3uvi = fractTempl_float( H_r7x74o1 );
	;
	float misc3a9 = mix( H_zibu6d1, H_hg3uvi, H_9t3lbm1.x );
	;
	float2 parame = (C_ni57fz + H_o5krm11);
	;
	float misc2ae = dot( parame, C_ocpo71 );
	;
	float H_k1eslt1 = sin( misc2ae );
	;
	float H_fe7gx91 = (C_83758d5 * H_k1eslt1);
	;
	float H_uifl4g = fractTempl_float( H_fe7gx91 );
	;
	float2 paramf = (C_vec2p1d0p + H_o5krm11);
	;
	float misc2af = dot( paramf, C_ocpo71 );
	;
	float H_7rsx2u = sin( misc2af );
	;
	float H_3avxhf = (C_83758d5 * H_7rsx2u);
	;
	float H_rfc9yn1 = fractTempl_float( H_3avxhf );
	;
	float misc3aa = mix( H_uifl4g, H_rfc9yn1, H_9t3lbm1.x );
	;
	float misc3ab = mix( misc3a9, misc3aa, H_9t3lbm1.y );
	;
	float2 paramg = (C_vec2p2d1p * paramc);
	;
	float2 H_os11xy1 = floor( paramg );
	;
	float2 H_effn5f1 = fractTempl_float2( paramg );
	;
	float2 H_x4jody = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_effn5f1 );
	;
	float misc2ag = dot( H_os11xy1, C_ocpo71 );
	;
	float H_68nm241 = sin( misc2ag );
	;
	float H_gymxvt = (C_83758d5 * H_68nm241);
	;
	float H_e2oai81 = fractTempl_float( H_gymxvt );
	;
	float2 paramh = (C_lg7u5s1 + H_os11xy1);
	;
	float misc2ah = dot( paramh, C_ocpo71 );
	;
	float H_5jwp6v = sin( misc2ah );
	;
	float H_w331wj = (C_83758d5 * H_5jwp6v);
	;
	float H_ydgqpy1 = fractTempl_float( H_w331wj );
	;
	float misc3ac = mix( H_e2oai81, H_ydgqpy1, H_x4jody.x );
	;
	float2 parami = (C_ni57fz + H_os11xy1);
	;
	float misc2ai = dot( parami, C_ocpo71 );
	;
	float H_40re651 = sin( misc2ai );
	;
	float H_rvlvqm1 = (C_83758d5 * H_40re651);
	;
	float H_6c0gwk = fractTempl_float( H_rvlvqm1 );
	;
	float2 paramj = (C_vec2p1d0p + H_os11xy1);
	;
	float misc2aj = dot( paramj, C_ocpo71 );
	;
	float H_rp5kn5 = sin( misc2aj );
	;
	float H_34geuy1 = (C_83758d5 * H_rp5kn5);
	;)#"_str
+
R"#(
	float H_na6z48 = fractTempl_float( H_34geuy1 );
	;
	float misc3ad = mix( H_6c0gwk, H_na6z48, H_x4jody.x );
	;
	float misc3ae = mix( misc3ac, misc3ad, H_x4jody.y );
	;
	float H_u3jtm9 = (C_0d6 * misc3ae);
	;
	float H_zc7ud31 = (H_u3jtm9 + misc3ab);
	;
	float2 paramk = (C_vec2p5d4p * paramc);
	;
	float2 H_8renha1 = floor( paramk );
	;
	float2 H_eockwc1 = fractTempl_float2( paramk );
	;
	float2 H_p9echl = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_eockwc1 );
	;
	float misc2ak = dot( H_8renha1, C_ocpo71 );
	;
	float H_mrh2xw1 = sin( misc2ak );
	;
	float H_rsucx8 = (C_83758d5 * H_mrh2xw1);
	;
	float H_28qb4x = fractTempl_float( H_rsucx8 );
	;
	float2 paraml = (C_lg7u5s1 + H_8renha1);
	;
	float misc2al = dot( paraml, C_ocpo71 );
	;
	float H_do6v961 = sin( misc2al );
	;
	float H_hix4z31 = (C_83758d5 * H_do6v961);
	;
	float H_aiq29a1 = fractTempl_float( H_hix4z31 );
	;
	float misc3af = mix( H_28qb4x, H_aiq29a1, H_p9echl.x );
	;
	float2 paramm = (C_ni57fz + H_8renha1);
	;
	float misc2am = dot( paramm, C_ocpo71 );
	;
	float H_0gy0lt1 = sin( misc2am );
	;
	float H_n27j0s = (C_83758d5 * H_0gy0lt1);
	;
	float H_rva67w1 = fractTempl_float( H_n27j0s );
	;
	float2 paramn = (C_vec2p1d0p + H_8renha1);
	;
	float misc2an = dot( paramn, C_ocpo71 );
	;
	float H_rcntx21 = sin( misc2an );
	;
	float H_ep36981 = (C_83758d5 * H_rcntx21);
	;
	float H_vquc441 = fractTempl_float( H_ep36981 );
	;
	float misc3ag = mix( H_rva67w1, H_vquc441, H_p9echl.x );
	;
	float misc3ah = mix( misc3af, misc3ag, H_p9echl.y );
	;
	float H_nchxsy = (C_0d42 * misc3ah);
	;
	float H_katy1n1 = (H_nchxsy + H_zc7ud31);
	;
	float H_m3vz7s1 = (H_katy1n1 + H_katy1n1);
	;
	float misc2ao = max( C_0d0, uv1 );
	;
	float H_hvabwf1 = (H_m3vz7s1 * misc2ao);
	;
	float H_vc5r6w = (H_hvabwf1 + C_0d1);
	;
	float misc2ap = pow( H_vc5r6w, C_4d0 );
	;
	float grad = sqrt( misc2ap );
	;
	float3 H_9nixm01 = ((float3)( grad ));
	;
	int H_ubj2t4 = (grad > C_0d5);
	;
	float H_bazl0k = (C_1d0 - grad);
	;
	float H_7628fe = (H_bazl0k * C_0d3);
	;
	float H_wuq6o = (C_2d0 * H_7628fe);
	;
	float3 H_68q09d1 = ((float3)( H_wuq6o, C_0d2, C_1d05 ));
	;
	float H_6o8zqp = (grad * C_1d4);
	;
	float H_q9kve3 = (C_1d0 - H_6o8zqp);
	;
	float3 H_ndga3y = ((float3)( H_q9kve3, C_0d2, C_1d05 ));
	;
	float3 select1 = ( (H_ubj2t4) ? (H_68q09d1) : (H_ndga3y) );
	;
	float3 select2 = (select1 / H_9nixm01);
	;
	float3 color = max( C_vec3p0d0p, select2 );
	;
	float3 H_03fk0z = (color + C_vec3p0d15p);
	;
	float3 color1 = (select2 / H_03fk0z);
	;
	float3 H_2keb3m = (H_lh8qqk1 * color1);
	;
	int H_262g84 = (py3 < C_0d5);
	;
	float select3 = ( (H_262g84) ? (C_23d035) : (C_a10d97) );
	;
	float H_43z4311 = (px5 + select3);
	;
	float H_gqeszc1 = (C_a0d5 + py3);
	;
	float uv2 = fabs( H_gqeszc1 );
	;
	float H_o17eg71 = (C_35d0 * H_43z4311);
	;
	float2 H_p1aqqf1 = ((float2)( H_o17eg71, uv2 ));
	;
	float2 paramo = (C_rbhvie1 + H_p1aqqf1);
	;
	float2 H_47m9wy1 = floor( paramo );
	;
	float2 H_e1vamf = fractTempl_float2( paramo );
	;
	float2 H_ess4mv = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_e1vamf );
	;
	float misc2aq = dot( H_47m9wy1, C_ocpo71 );
	;
	float H_4m62n5 = sin( misc2aq );
	;
	float H_yw34yt = (C_83758d5 * H_4m62n5);
	;
	float H_t2kofv1 = fractTempl_float( H_yw34yt );
	;
	float2 paramp = (C_lg7u5s1 + H_47m9wy1);
	;
	float misc2ar = dot( paramp, C_ocpo71 );
	;
	float H_7wh9sv1 = sin( misc2ar );
	;
	float H_7r5rw1 = (C_83758d5 * H_7wh9sv1);
	;
	float H_hnhabo1 = fractTempl_float( H_7r5rw1 );
	;
	float misc3ai = mix( H_t2kofv1, H_hnhabo1, H_ess4mv.x );
	;
	float2 paramq = (C_ni57fz + H_47m9wy1);
	;
	float misc2as = dot( paramq, C_ocpo71 );
	;
	float H_2eauq6 = sin( misc2as );
	;
	float H_kor39b1 = (C_83758d5 * H_2eauq6);
	;
	float H_gnbo7u1 = fractTempl_float( H_kor39b1 );
	;
	float2 paramr = (C_vec2p1d0p + H_47m9wy1);
	;
	float misc2at = dot( paramr, C_ocpo71 );
	;
	float H_t2r3961 = sin( misc2at );
	;
	float H_12iy4e = (C_83758d5 * H_t2r3961);
	;
	float H_h49ehc1 = fractTempl_float( H_12iy4e );
	;
	float misc3aj = mix( H_gnbo7u1, H_h49ehc1, H_ess4mv.x );
	;
	float misc3ak = mix( misc3ai, misc3aj, H_ess4mv.y );
	;
	float2 params = (C_vec2p2d1p * paramo);
	;
	float2 H_8duaya = floor( params );
	;
	float2 H_eaqbgd = fractTempl_float2( params );
	;
	float2 H_sf7m94 = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_eaqbgd );
	;
	float misc2au = dot( H_8duaya, C_ocpo71 );
	;
	float H_49obx21 = sin( misc2au );
	;
	float H_nvyw14 = (C_83758d5 * H_49obx21);
	;
	float H_4wejg61 = fractTempl_float( H_nvyw14 );
	;
	float2 paramt = (C_lg7u5s1 + H_8duaya);
	;
	float misc2av = dot( paramt, C_ocpo71 );
	;
	float H_ry2he3 = sin( misc2av );
	;
	float H_rtyir2 = (C_83758d5 * H_ry2he3);
	;
	float H_rqd3q31 = fractTempl_float( H_rtyir2 );
	;
	float misc3al = mix( H_4wejg61, H_rqd3q31, H_sf7m94.x );
	;
	float2 paramu = (C_ni57fz + H_8duaya);
	;
	float misc2aw = dot( paramu, C_ocpo71 );
	;
	float H_ythg5v = sin( misc2aw );
	;
	float H_zmrcay1 = (C_83758d5 * H_ythg5v);
	;
	float H_udzllc1 = fractTempl_float( H_zmrcay1 );
	;
	float2 paramv = (C_vec2p1d0p + H_8duaya);
	;
	float misc2ax = dot( paramv, C_ocpo71 );
	;
	float H_pq69i4 = sin( misc2ax );
	;
	float H_3tpjs4 = (C_83758d5 * H_pq69i4);
	;
	float H_pskd2v = fractTempl_float( H_3tpjs4 );
	;
	float misc3am = mix( H_udzllc1, H_pskd2v, H_sf7m94.x );
	;
	float misc3an = mix( misc3al, misc3am, H_sf7m94.y );
	;
	float H_3v3x47 = (C_0d6 * misc3an);
	;
	float H_f21ack = (H_3v3x47 + misc3ak);
	;
	float2 paramw = (C_vec2p5d4p * paramo);
	;
	float2 H_80ck881 = floor( paramw );
	;
	float2 H_q830t6 = fractTempl_float2( paramw );
	;
	float2 H_2elk6l1 = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_q830t6 );
	;
	float misc2ay = dot( H_80ck881, C_ocpo71 );
	;
	float H_ksirrv1 = sin( misc2ay );
	;
	float H_c7yanv1 = (C_83758d5 * H_ksirrv1);
	;
	float H_6hazaw1 = fractTempl_float( H_c7yanv1 );
	;
	float2 paramx = (C_lg7u5s1 + H_80ck881);
	;
	float misc2az = dot( paramx, C_ocpo71 );
	;
	float H_7ixw8w = sin( misc2az );
	;
	float H_kgvju01 = (C_83758d5 * H_7ixw8w);
	;
	float H_1ye0821 = fractTempl_float( H_kgvju01 );
	;
	float misc3ao = mix( H_6hazaw1, H_1ye0821, H_2elk6l1.x );
	;
	float2 paramy = (C_ni57fz + H_80ck881);
	;
	float misc2a01 = dot( paramy, C_ocpo71 );
	;
	float H_4d2j02 = sin( misc2a01 );
	;
	float H_i2oqnx1 = (C_83758d5 * H_4d2j02);
	;
	float H_jw2csj1 = fractTempl_float( H_i2oqnx1 );
	;
	float2 paramz = (C_vec2p1d0p + H_80ck881);
	;
	float misc2a11 = dot( paramz, C_ocpo71 );
	;
	float H_rr5hvx1 = sin( misc2a11 );
	;
	float H_aytaw01 = (C_83758d5 * H_rr5hvx1);
	;
	float H_ok7ykf = fractTempl_float( H_aytaw01 );
	;
	float misc3ap = mix( H_jw2csj1, H_ok7ykf, H_2elk6l1.x );
	;
	float misc3aq = mix( misc3ao, misc3ap, H_2elk6l1.y );
	;
	float H_g7puq01 = (C_0d42 * misc3aq);
	;
	float H_tp5r061 = (H_f21ack + H_g7puq01);
	;
	float H_bnrcvp = (C_0d5 * H_tp5r061);
	;
	float2 H_ibclh6 = ((float2)( H_bnrcvp ));
	;
	float2 H_1qmhcm = (H_ibclh6 + H_p1aqqf1);
	;
	float2 param01 = (C_vec2pa1d0p + H_1qmhcm);
	;
	float2 H_aiel941 = floor( param01 );
	;
	float2 H_46v63o = fractTempl_float2( param01 );
	;
	float2 H_auv90s1 = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_46v63o );
	;
	float misc2a21 = dot( H_aiel941, C_ocpo71 );
	;
	float H_aiynmf1 = sin( misc2a21 );
	;
	float H_xzrp0n1 = (C_83758d5 * H_aiynmf1);
	;
	float H_k0rbta = fractTempl_float( H_xzrp0n1 );
	;
	float2 param11 = (C_lg7u5s1 + H_aiel941);
	;
	float misc2a31 = dot( param11, C_ocpo71 );
	;
	float H_pupsdh = sin( misc2a31 );
	;
	float H_i3xcqc1 = (C_83758d5 * H_pupsdh);
	;
	float H_jm9zor1 = fractTempl_float( H_i3xcqc1 );
	;
	float misc3ar = mix( H_k0rbta, H_jm9zor1, H_auv90s1.x );
	;
	float2 param21 = (C_ni57fz + H_aiel941);
	;
	float misc2a41 = dot( param21, C_ocpo71 );
	;
	float H_odt8ey = sin( misc2a41 );
	;
	float H_1noa7x1 = (C_83758d5 * H_odt8ey);
	;
	float H_ig3seb = fractTempl_float( H_1noa7x1 );
	;
	float2 param31 = (C_vec2p1d0p + H_aiel941);
	;
	float misc2a51 = dot( param31, C_ocpo71 );
	;
	float H_b47kth = sin( misc2a51 );
	;
	float H_4ymxqc1 = (C_83758d5 * H_b47kth);
	;
	float H_g58pdf = fractTempl_float( H_4ymxqc1 );
	;
	float misc3as = mix( H_ig3seb, H_g58pdf, H_auv90s1.x );
	;
	float misc3at = mix( misc3ar, misc3as, H_auv90s1.y );
	;
	float2 param41 = (C_vec2p2d1p * param01);
	;
	float2 H_anqxgn = floor( param41 );
	;
	float2 H_gqlaz81 = fractTempl_float2( param41 );
	;
	float2 H_cc6ej31 = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_gqlaz81 );
	;
	float misc2a61 = dot( H_anqxgn, C_ocpo71 );
	;
	float H_ana0uy = sin( misc2a61 );
	;
	float H_ow9zeq1 = (C_83758d5 * H_ana0uy);
	;
	float H_9bymvp = fractTempl_float( H_ow9zeq1 );
	;
	float2 param51 = (C_lg7u5s1 + H_anqxgn);
	;
	float misc2a71 = dot( param51, C_ocpo71 );
	;
	float H_h91tiv1 = sin( misc2a71 );
	;
	float H_45tjcm = (C_83758d5 * H_h91tiv1);
	;
	float H_0bbmm91 = fractTempl_float( H_45tjcm );
	;
	float misc3au = mix( H_9bymvp, H_0bbmm91, H_cc6ej31.x );
	;
	float2 param61 = (C_ni57fz + H_anqxgn);
	;
	float misc2a81 = dot( param61, C_ocpo71 );
	;
	float H_cpwfdh1 = sin( misc2a81 );
	;
	float H_590cok = (C_83758d5 * H_cpwfdh1);
	;
	float H_snicde1 = fractTempl_float( H_590cok );
	;
	float2 param71 = (C_vec2p1d0p + H_anqxgn);
	;
	float misc2a91 = dot( param71, C_ocpo71 );
	;
	float H_v4y97e1 = sin( misc2a91 );
	;
	float H_3soisf1 = (C_83758d5 * H_v4y97e1);
	;
	float H_h3b9q71 = fractTempl_float( H_3soisf1 );
	;
	float misc3av = mix( H_snicde1, H_h3b9q71, H_cc6ej31.x );
	;
	float misc3aw = mix( misc3au, misc3av, H_cc6ej31.y );
	;
	float H_cmo0n4 = (C_0d6 * misc3aw);
	;
	float H_0f5ax91 = (H_cmo0n4 + misc3at);
	;
	float2 param81 = (C_vec2p5d4p * param01);
	;
	float2 H_2aahgb = floor( param81 );
	;
	float2 H_cqxjpu = fractTempl_float2( param81 );
	;
	float2 H_9dk9iq = smoothstep( C_vec2p0d0p, C_vec2p1d0p, H_cqxjpu );
	;
	float misc2aa1 = dot( H_2aahgb, C_ocpo71 );
	;
	float H_v6lik91 = sin( misc2aa1 );
	;
	float H_i5b5kw1 = (C_83758d5 * H_v6lik91);
	;
	float H_jo7wzi = fractTempl_float( H_i5b5kw1 );
	;
	float2 param91 = (C_lg7u5s1 + H_2aahgb);
	;
	float misc2ab1 = dot( param91, C_ocpo71 );
	;
	float H_6jtbzq = sin( misc2ab1 );
	;
	float H_nnzfkq = (C_83758d5 * H_6jtbzq);
	;
	float H_rtp1l2 = fractTempl_float( H_nnzfkq );
	;
	float misc3ax = mix( H_jo7wzi, H_rtp1l2, H_9dk9iq.x );
	;
	float2 parama1 = (C_ni57fz + H_2aahgb);
	;
	float misc2ac1 = dot( parama1, C_ocpo71 );
	;
	float H_pumnca1 = sin( misc2ac1 );
	;
	float H_bwt7j11 = (C_83758d5 * H_pumnca1);
	;
	float H_tztg9p = fractTempl_float( H_bwt7j11 );
	;
	float2 paramb1 = (C_vec2p1d0p + H_2aahgb);
	;
	float misc2ad1 = dot( paramb1, C_ocpo71 );
	;
	float H_odq3dr1 = sin( misc2ad1 );
	;
	float H_k5e95o1 = (C_83758d5 * H_odq3dr1);
	;
	float H_0ssbnr = fractTempl_float( H_k5e95o1 );
	;
	float misc3ay = mix( H_tztg9p, H_0ssbnr, H_9dk9iq.x );
	;
	float misc3az = mix( misc3ax, misc3ay, H_9dk9iq.y );
	;
	float H_5ubqs31 = (C_0d42 * misc3az);
	;
	float H_glrq7s1 = (H_0f5ax91 + H_5ubqs31);
	;
	float H_i6qzhh = (H_glrq7s1 + H_glrq7s1);
	;
	float misc2ae1 = max( C_0d0, uv2 );
	;
	float H_9w9ycm = (H_i6qzhh * misc2ae1);
	;
	float H_yr1h27 = (C_0d1 + H_9w9ycm);
	;
	float misc2af1 = pow( H_yr1h27, C_4d0 );
	;
	float grad1 = sqrt( misc2af1 );
	;
	float3 H_sso2ps1 = ((float3)( grad1 ));
	;
	int H_3a6evl1 = (grad1 > C_0d5);
	;
	float H_i9cukr = (C_1d0 - grad1);
	;
	float H_4rdx09 = (C_0d3 * H_i9cukr);
	;
	float H_b72udc = (C_2d0 * H_4rdx09);
	;
	float3 H_vhcf8r = ((float3)( H_b72udc, C_0d2, C_1d05 ));
	;
	float H_33asz11 = (C_1d4 * grad1);
	;
	float H_clf0m71 = (C_1d0 - H_33asz11);
	;
	float3 H_e8k55m1 = ((float3)( H_clf0m71, C_0d2, C_1d05 ));
	;
	float3 select4 = ( (H_3a6evl1) ? (H_vhcf8r) : (H_e8k55m1) );
	;
	float3 select5 = (select4 / H_sso2ps1);
	;
	float3 color2 = max( C_vec3p0d0p, select5 );
	;
	float3 H_ybj2j71 = (C_vec3p0d15p + color2);
	;
	float3 color3 = (select5 / H_ybj2j71);
	;
	float H_zv1y8k1 = (C_1d0 - ff);
	;
	float3 H_mhs2u2 = ((float3)( H_zv1y8k1 ));
	;
	float3 H_7uzp9m = (H_mhs2u2 * color3);
	;
	float3 H_u86m591 = (H_2keb3m + H_7uzp9m);
	;
	float4 H_0v2d701 = ((float4)( H_u86m591.x, H_u86m591.y, H_u86m591.z, C_1d0 ));
	;
	int2 H_fjkh5nr = convert_int3( ((uint3)(get_global_id(0),  get_global_id(1),  get_global_id(2))) ).xy;
	;
	write_imagef(un_OutImage, H_fjkh5nr, H_0v2d701);
}


}
)#"_str );

};
};
